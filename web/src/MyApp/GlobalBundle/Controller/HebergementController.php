<?phpnamespace MyApp\GlobalBundle\Controller;use MyApp\AdminBundle\Forms\Formulaire_information_reservation_global_type;use MyApp\AdminBundle\Forms\DemandeInformationType;use MyApp\AdminBundle\Forms\SearchMoteurEnginePortailType;use MyApp\GlobalBundle\Entity\Reservation_Online;use Symfony\Bundle\FrameworkBundle\Controller\Controller;use MyApp\GlobalBundle\Form\Info_reservationForm;use MyApp\GlobalBundle\Form\GoogleForm;use MyApp\GlobalBundle\Form\ReservationOnlineForm;use MyApp\GlobalBundle\Form\DeviseForm;use MyApp\GlobalBundle\Entity\Formu_province_region;use MyApp\GlobalBundle\Entity\ReservationOnline;use MyApp\GlobalBundle\Entity\Info_reservation;use MyApp\GlobalBundle\Entity\Devises;use MyApp\GlobalBundle\Entity\Types_prix;use Symfony\Component\HttpKernel\Exception\NotFoundHttpException;use Berriart\Bundle\SitemapBundle\Entity\Url;use Berriart\Bundle\SitemapBundle\Entity\ImageUrl;use MyApp\GlobalBundle\Controller\DefaultController;use MyApp\AdminBundle\Forms\DemandeInformationEnType;use MyApp\GlobalBundle\Entity\Utilisateur;use MyApp\GlobalBundle\Entity\Calendrier_saison;/** *  * @author leonardc *	 * Classe controller sépare la logique métier coté client de celle coté admin pour toute la gestion hébergement *  */class HebergementController extends Controller{	        private $champRecherche = "";        	/**	 * Génère le site map	 * @param $createUrl __url qui va être ajouter dans le site map	 */	private function populateSiteMapAction($createUrl)	{		if(is_array($createUrl))		{			for($i = 0; $i < count($createUrl); $i++ )			{				$sitemap = $this->get('sitemap');				$url = new Url();				$url->setLoc($createUrl[$i]);				$url->setLastmod(new \DateTime());				$url->setChangeFreq(Url::CHANGEFREQ_DAILY);				$url->setPriority('0.4');				$sitemap->add($url);				$sitemap->save();			}		}			else 		{			$sitemap = $this->get('sitemap');			$url = new Url();			$url->setLoc($createUrl);			$url->setLastmod(new \DateTime());			$url->setChangeFreq(Url::CHANGEFREQ_DAILY);			$url->setPriority('0.4');			$sitemap->add($url);			$sitemap->save();		}	}                public function getValideUrlSiteMap($em, $tab)        {            $url = $em->getRepository("MyAppGlobalBundle:Acomptes")->getRechercherNouvellesUrls($tab);            if($url == null){                self::populateSiteMapAction($tab);            }                    }		/**	 * Traitement du moteur de recherche	 */	private function getRechercheMoteurDeRecherche()	{		//Gestionnaire des entités		$em  = $this->getDoctrine()->getEntityManager();		//Moteur de recherche		$client = new Utilisateur();		$formEngine = $this->container->get('form.factory')->create(new SearchMoteurEnginePortailType(), $client);		$request = $this->get('request');		if($request->getMethod() != "POST")		{			return array("form", $formEngine);		}		else		{			//$request = $this->get('request');			if( $request->getMethod() == 'POST' ){				// On fait le lien Requête <-> Formulaire.				$formEngine->bindRequest($request);				$word = $formEngine->getData()->getNom();				if($word != null)				{                                           $solo = $multiple = "";                                        $rep = (new DefaultController)->getMoteurRechercheAction($word, $em);                                                                                                                  if($rep != null)                                        {                                                                                    if($rep[1] == "hebergement")                                              {                                                                                                      $tab = array("request", $this->redirect($this->generateUrl('_hebergementinfoclient', array( 'name' => strtolower($rep[0][0]->getRepertoireFr()) ))));                                                  ($tab != null)? $solo = true: $solo = false;                                                  $this->champRecherche = $word;                                                  return $tab;                                              }                                           /* }else{                                                //$listeProposition = $em->getRepository('MyAppGlobalBundle:Hebergements')->getListeClientPropositionMoteurRecherche($tab);                                                return $this->redirect($this->generateUrl('_propositionmoteurrecherche'));                                            }  */                                                                                  }                                          else                                        {                                                                                     $tab = array("multiple", $em->getRepository('MyAppGlobalBundle:Hebergements')->getRechercheTout($word));                                             ($tab != null)? $multiple = true: $multiple = false;                                            $this->champRecherche = $word;                                            return $tab;                                        }                                        					if($solo == false && $multiple == false) {												throw new \Exception("Aucun résultat trouvé");					}				}				return $this->redirect($this->generateUrl($word), 404);			}		}	}                /**         * Méthode pour retourner tous les résultats trouvés par la recherche avec le moteur         */        private function getSimuleGoogleSearch($rep)        {                      //Gestionnaire des entités            $em = $this->getDoctrine()->getEntityManager();            //Québec en saison            $saison = (new DefaultController)->getSaisonQuebec();               //traitement formulaire reservation en ligne            $reservationEnLignePays = (new DefaultController)->getReservationEnLignePays($em);            //Moteur de recherche            $listClient = $em->getRepository('MyAppGlobalBundle:Utilisateur')->getAutocompletionPortail();            //Moteur de reecherche            $client = new Utilisateur();            $formEngine = $this->container->get('form.factory')->create(new SearchMoteurEnginePortailType(), $client);                       //Liste des régions pour la réservation            $fullListReservation = new DestinationController;            $reservationRegionAjax = $fullListReservation->hydrateDropDownListRegionReservation($em);            //Liste des villes pour la réservation            $reservationVilleAjax = $fullListReservation->hydrateDropDownListVilleReservation($em);            $lang = $this->container->get("session")->getLocale();            //rendu de la vue des résultats                     if($lang == "fr"){                return $this->render("MyAppGlobalBundle:Hebergement:ResultatsSearch.html.twig", array(                    "resultat"                  => $rep[1],                      "champRecherche"            => $this->champRecherche,                    'googledfp1'                => "GR_ACCUEIL_01",                    'googledfp2'		=> "GR_ACCUEIL_02",                    'googledfp3'		=> "GR_ACCUEIL_03",                                           'reservationRegionAjax'     => $reservationRegionAjax,                    'reservationVilleAjax'      => $reservationVilleAjax,                    'saison'			=> $saison,                    'formEngine'		=> $formEngine->createView(),                    'reservationPays'           => $reservationEnLignePays[0],                    'reservationProvince'       => $reservationEnLignePays[1],                    'regionQcFooter'		=> (new AttraitsactivityController)->getListeFooterRegion($em)[0],                    'regionOnFooter'		=> (new AttraitsactivityController)->getListeFooterRegion($em)[1],                    'regionNbFooter'		=> (new AttraitsactivityController)->getListeFooterRegion($em)[2],                     'multipleResultat'          => true,                    'sansItem'                  => true,                    'titrefrsansitem'           => "Résultat de la recherche $this->champRecherche",                ));            }            else{                return $this->render("MyAppGlobalBundle:Hebergement:ResultatsSearch-en.html.twig", array(                    "resultat"                  => $rep[1],                      "champRecherche"            => $this->champRecherche,                    'googledfp1'                => "GR_ACCUEIL_01",                    'googledfp2'		=> "GR_ACCUEIL_02",                    'googledfp3'		=> "GR_ACCUEIL_03",                                           'reservationRegionAjax'     => $reservationRegionAjax,                    'reservationVilleAjax'      => $reservationVilleAjax,                    'saison'			=> $saison,                    'formEngine'		=> $formEngine->createView(),                    'reservationPays'           => $reservationEnLignePays[0],                    'reservationProvince'       => $reservationEnLignePays[1],                    'regionQcFooter'		=> (new AttraitsactivityController)->getListeFooterRegion($em)[0],                    'regionOnFooter'		=> (new AttraitsactivityController)->getListeFooterRegion($em)[1],                    'regionNbFooter'		=> (new AttraitsactivityController)->getListeFooterRegion($em)[2],                     'multipleResultat'          => true,                    'sansItem'                  => true,                    'titrefrsansitem'           => "Search Result $this->champRecherche",                ));            }        }		/**	 * Fonction pour sortir un client aléatoire 	 */	private function getClientAleatoire($id, $geo, $name)	{		//Gestionnaire des entités		$em = $this->getDoctrine()->getEntityManager();			if($name == "province")		{			//Recherche les clients qui sont approuvés et qui sont de la même catégorie d'hébergement et de la même province			$etablissement = $em->getRepository('MyAppGlobalBundle:Hebergements')->getAfficheUnClientParCategorie($id, $geo, $name);		}		elseif($name == "region") 		{			//Recherche les clients qui sont approuvés et qui sont de la même catégorie d'hébergement et de la même région			$etablissement = $em->getRepository('MyAppGlobalBundle:Hebergements')->getAfficheUnClientParCategorie($id, $geo, $name);		}		else		{			//Recherche les clients qui sont approuvés et qui sont de la même catégorie d'hébergement et de la même ville			$etablissement = $em->getRepository('MyAppGlobalBundle:Hebergements')->getAfficheUnClientParCategorie($id, $geo, $name);		}		/*if($etablissement != null){			$clientAuberge = array_rand($etablissement, 1);			//Recherche le client aléatoire			$etablissement = $em->getRepository('MyAppGlobalBundle:Hebergements')->getAfficheUnClientHebergementCategorie($etablissement[$clientAuberge]->getId(), $geo, $name);		}*/				return $etablissement;	}			/**	 * Fonction qui contrôle si les tableaux des types hébergements ne sont pas vides et on récupère un client aléatoire pour affichage dans la photo payante	 */	public static function getValideTableauClient($tab)	{			if(sizeof($tab) == 8)		{			$aubergeclient = $tab[0];			$giteclient = $tab[1];			$centreclient = $tab[2];			$residenceclient = $tab[3];			$etablissementclient = $tab[4];			$hotelclient = $tab[5];			$campingclient = $tab[6];			$villageclient = $tab[7];						//On va stoker dans un tableau les types d'hébergements qui existent			$tableau = array();			if(sizeof($aubergeclient) >= 1)			{				shuffle($aubergeclient);				array_push($tableau, $aubergeclient[0]);			}			if(sizeof($giteclient) >= 1)			{				shuffle($giteclient);				array_push($tableau, $giteclient[0]);			}			if(sizeof($centreclient) >= 1)			{				shuffle($centreclient);				array_push($tableau, $centreclient[0]);			}			if(sizeof($residenceclient) >= 1)			{				shuffle($residenceclient);				array_push($tableau, $residenceclient[0]);			}			if(sizeof($etablissementclient) >= 1)			{				shuffle($etablissementclient);				array_push($tableau, $etablissementclient[0]);			}			if(sizeof($hotelclient) >= 1)			{				shuffle($hotelclient);				array_push($tableau, $hotelclient[0]);			}			if(sizeof($campingclient) >= 1)			{				shuffle($campingclient);				array_push($tableau, $campingclient[0]);			}			if(sizeof($villageclient) >= 1)			{				shuffle($villageclient);				array_push($tableau, $villageclient[0]);			}			//On brasse le tableau et on en ressort un client pour l'affichage de la grande photo payante			if($tableau != null)			{				$resultat = array_rand($tableau, 1);				return $tableau[$resultat];			}		}		else		{                    $quebec = $ontario = $newB = "";			$quebec = $tab[0];                        if(count($tab) > 1){                            $ontario = $tab[1];                        }                        if(count($tab) > 2){                            $newB = $tab[2];                        }				//On va stoker dans un tableau le type d'hébergement recherché pour chaque province			$tableau = array();			if($quebec != null and sizeof($quebec) >= 1)			{				shuffle($quebec);				array_push($tableau, $quebec[0]);			}			if($ontario != null and sizeof($ontario) >= 1)			{				shuffle($ontario);				array_push($tableau, $ontario[0]);			}			if($newB != null and sizeof($newB) >= 1)			{				shuffle($newB);				array_push($tableau, $newB[0]);			}			//On brasse le tableau et on en ressort un client pour l'affichage de la grande photo payante                        if(count($tableau) > 1){                            $resultat = array_rand($tableau, 1);                            return $tableau[$resultat];                        }                        elseif(count($tableau) == 1){                            return $tableau[0] ;                        }                        else{                            return $tableau;                        }                   		}	}		/**	 * Retourne une liste d'hébergement pour la region donnée	 */	public function genereListeHotelSuggestion($tab, $em)	{		$listeHotelRegion = $em->getRepository('MyAppGlobalBundle:Hebergements')->getRecupListeHotelPourSuggestionGauche($tab);		if($listeHotelRegion != null)		{			$tablo = array();			foreach($listeHotelRegion as $tst){				array_push($tablo, $tst->getId());			}			shuffle($tablo);			//Retourne les listes des hébergements pour les 3 régions des suggestions (7 == hôtels)			return $listehebergementLeft = $em->getRepository('MyAppGlobalBundle:Hebergements')->getHebergementLimit(7, $tablo);		}	}		/**	 * Génère les liste des suggestion de la colonne de gauche	 */	public function genereListeSuggestionColonneGauche($listeRegionQc, $em)	{		$tabContainer = [];		if(isset($listeRegionQc[0]))		{			$listeHotelRegion1 = $em->getRepository('MyAppGlobalBundle:Hebergements')->getRecupListeHotelPourSuggestionGauche($listeRegionQc[0]->getRegionId()->getId());			if($listeHotelRegion1 != null)			{				$tab1 = array();				foreach($listeHotelRegion1 as $tst){					array_push($tab1, $tst->getId());				}				shuffle($tab1);				//Retourne les listes des hébergements pour les 3 régions des suggestions (7 == hôtels)				$listehebergementLeft1 = $em->getRepository('MyAppGlobalBundle:Hebergements')->getHebergementLimit(7, $tab1);				$tabIdHebergement1 = [];				foreach($listehebergementLeft1 as $tw){					array_push($tabIdHebergement1, $tw->getId());				}				unset($listehebergementLeft1);				$listehebergementLeft1 = $em->getRepository('MyAppGlobalBundle:Chambres')->getTest($tabIdHebergement1);				$valideSuggLeft1 = $listehebergementLeft1[0];				$tabSugg1 = [ $listehebergementLeft1 , $valideSuggLeft1]; 				array_push($tabContainer, $tabSugg1);			}		}		if(isset($listeRegionQc[1]))		{			$listeHotelRegion2 = $em->getRepository('MyAppGlobalBundle:Hebergements')->getRecupListeHotelPourSuggestionGauche($listeRegionQc[1]->getRegionId()->getId());			if($listeHotelRegion2 != null)			{				$tab2 = array();				foreach($listeHotelRegion2 as $tst){					array_push($tab2, $tst->getId());				}				shuffle($tab2);				$listehebergementLeft2 = $em->getRepository('MyAppGlobalBundle:Hebergements')->getHebergementLimit(7, $tab2);				$tabIdHebergement2 = [];				foreach($listehebergementLeft2 as $tw){					array_push($tabIdHebergement2, $tw->getId());				}				unset($listehebergementLeft2);				$listehebergementLeft2 = $em->getRepository('MyAppGlobalBundle:Chambres')->getTest($tabIdHebergement2);				$valideSuggLeft2 = $listehebergementLeft2[0];				$tabSugg2 = [ $listehebergementLeft2 , $valideSuggLeft2];				array_push($tabContainer, $tabSugg2);			}		}		if(isset($listeRegionQc[2]))		{			$listeHotelRegion3 = $em->getRepository('MyAppGlobalBundle:Hebergements')->getRecupListeHotelPourSuggestionGauche($listeRegionQc[2]->getRegionId()->getId());			if($listeHotelRegion3 != null)			{				$tab3 = array();				foreach($listeHotelRegion3 as $tst){					array_push($tab3, $tst->getId());				}				shuffle($tab3);				$listehebergementLeft3 = $em->getRepository('MyAppGlobalBundle:Hebergements')->getHebergementLimit(7, $tab3);				$tabIdHebergement3 = [];				foreach($listehebergementLeft3 as $tw){					array_push($tabIdHebergement3, $tw->getId());				}				unset($listehebergementLeft3);				$listehebergementLeft3 = $em->getRepository('MyAppGlobalBundle:Chambres')->getTest($tabIdHebergement3);				$valideSuggLeft3 = $listehebergementLeft3[0];				$tabSugg3 = [ $listehebergementLeft3 , $valideSuggLeft3];				array_push($tabContainer, $tabSugg3);			}		}		return $tabContainer;	}			/**	 * Page index pour la section hébergement coté client	 */	public function indexAction()	{		 	$clientAleatoire = $insolite = $village = $camping = $hotel = $auberge = $gite = $centre = $residence = $etablissement = $reservationRegionAjax = $reservationVilleAjax = $valideSuggLeft1 = $valideSuggLeft2 = $valideSuggLeft3 = $listehebergementLeft1 = $listehebergementLeft2 = $listehebergementLeft3 = "";                		//Gestionnaire des entités		$em = $this->getDoctrine()->getEntityManager();		//On récupère le texte d'accueil		$texte_accueil = $em->getRepository('MyAppGlobalBundle:Textes_accueil')->getListTexteAccueilHebergement();		$texte_accueil_en = $em->getRepository('MyAppGlobalBundle:Textes_accueil')->getListTexteAccueilHebergementen();	                $tabProvince = [5,8,9];                               $regionqc = $em->getRepository('MyAppGlobalBundle:Hebergements')->getAfficheRegionsCoteClient(9);                $regionon = $em->getRepository('MyAppGlobalBundle:Hebergements')->getAfficheRegionsCoteClient(8);                $regionnb = $em->getRepository('MyAppGlobalBundle:Hebergements')->getAfficheRegionsCoteClient(5);                $regional = $em->getRepository('MyAppGlobalBundle:Hebergements')->getAfficheRegionsCoteClient(1);                $regioncb = $em->getRepository('MyAppGlobalBundle:Hebergements')->getAfficheRegionsCoteClient(2);                $regionip = $em->getRepository('MyAppGlobalBundle:Hebergements')->getAfficheRegionsCoteClient(3);                $regionsa = $em->getRepository('MyAppGlobalBundle:Hebergements')->getAfficheRegionsCoteClient(10);                $regiontn = $em->getRepository('MyAppGlobalBundle:Hebergements')->getAfficheRegionsCoteClient(11);                $regiontno = $em->getRepository('MyAppGlobalBundle:Hebergements')->getAfficheRegionsCoteClient(12);                $regiontma = $em->getRepository('MyAppGlobalBundle:Hebergements')->getAfficheRegionsCoteClient(4);                $regiontyc = $em->getRepository('MyAppGlobalBundle:Hebergements')->getAfficheRegionsCoteClient(13);		//On stoke dans une autre variable les régions du Qc pour ne pas changer l'ordre d'affichage alphabétique		$listeRegionQc = array_values(array_filter($regionqc));		//On brasse le tableau qui va nous servir pour afficher les 3 régions pour nos suggestions sur la gauche		shuffle($listeRegionQc);		//Listes des suggestions pour la colonne de gauche		$suggestion = $this->genereListeSuggestionColonneGauche($listeRegionQc, $em);		if(isset($suggestion[0][0]) and isset($suggestion[0][1]))		{			$listehebergementLeft1 = $suggestion[0][0];			$valideSuggLeft1 = $suggestion[0][1];		}		if(isset($suggestion[1][0]) and isset($suggestion[1][1]))		{			$listehebergementLeft2 = $suggestion[1][0];			$valideSuggLeft2 = $suggestion[1][1];		}		if(isset($suggestion[2][0]) and isset($suggestion[2][1]))		{			$listehebergementLeft3 = $suggestion[2][0];			$valideSuggLeft3 = $suggestion[2][1];		}		//Formulaire de recherche map intéractive		$search = new Formu_province_region();		$form = $this->container->get('form.factory')->create(new GoogleForm(), $search);		//On retourne les provinces non vides                               $tabTemp = $tabloFinal = $tabUnitaire = [];                //Retourne les catégories d'hébergements                $tabCategorieHeb = [7,3,5,4,2,10,6,8,9];                //Bucle les catégories pour préparer les tableaux de la vue                foreach($tabCategorieHeb as $key ){                     $tempHebergement = $em->getRepository('MyAppGlobalBundle:Hebergements')->getAfficheUnClientParCategorieHebergement($key, $tabProvince);                    if($tempHebergement != null){                        shuffle($tempHebergement);                        $tempHebergement[ array_rand($tempHebergement, 1) ];                                                     array_push($tabTemp, $tempHebergement);                        $unitaire = $tempHebergement[ array_rand($tempHebergement, 1) ];                                                     array_push($tabUnitaire, $unitaire);                    }                }    		$numbCat = $em->getRepository('MyAppGlobalBundle:Categories_hebergements')->getChoiceCategoryHebergement();			if(isset($tabUnitaire[4]) != null){					$auberge = $tabUnitaire[4];		}		if(isset($tabUnitaire[1]) != null){			$gite = $tabUnitaire[1];		}		if(isset($tabUnitaire[3]) != null){			$centre = $tabUnitaire[3];		}		if(isset($tabUnitaire[2]) != null){			$residence = $tabUnitaire[2];		}		                if(isset($tabUnitaire[6]) != null){                        $etablissement = $tabUnitaire[6];                }               		if(isset($tabUnitaire[0]) != null){			$hotel = $tabUnitaire[0];		}		if(isset($tabUnitaire[7]) != null){			$camping = $tabUnitaire[7];		}		if(isset($tabUnitaire[8]) != null){			$village = $tabUnitaire[8];		}                if(isset($tabUnitaire[5]) != null){                        $insolite = $tabUnitaire[5];                }		//Récupère un client aleatoire		$index = array_rand($tabTemp, 1);		if($tabTemp[$index] != null){			$clientAleatoire = $tabTemp[$index][0];		}                //Moteur de recherche		$listClient = $em->getRepository('MyAppGlobalBundle:Utilisateur')->getAutocompletionPortail();				$retourEngine = $this->getRechercheMoteurDeRecherche();          		if($retourEngine[0] == "form")		{                    $formEngine = $retourEngine[1];		}		if($retourEngine[0] == "request")		{                    //Retourne vers la fiche client                    return $retourEngine[1];		}                elseif($retourEngine[0] == "multiple")                {                                           //retourne vers la vue pour afficher tous les résultats de la recherche                    return $this->getSimuleGoogleSearch($retourEngine);                }		//Site map		                $this->getValideUrlSiteMap($em, array('/hebergements.html','/accommodation.html'));		//affiche image du Québec en saison		$controDefault = new DefaultController();		$saison = $controDefault->getSaisonQuebec();		//traitement formulaire reservation en ligne		$reservationEnLignePays = $controDefault->getReservationEnLignePays($em);                //Liste des régiond pour la réservation                $fullListReservation = new DestinationController;                $reservationRegionAjax = $fullListReservation->hydrateDropDownListRegionReservation($em);                //Liste des villes pour la réservation                $reservationVilleAjax = $fullListReservation->hydrateDropDownListVilleReservation($em);		//Préparation de la view hebergement.html.twig		return $this->render('MyAppGlobalBundle:Hebergement:hebergement.html.twig', 				array( 						  	'regionqc' 			=> $regionqc, 	// Régions					  	'regionon' 			=> $regionon, 					  	'regionnb' 			=> $regionnb,                                                 'regional'                      => $regional,                                                'regioncb'                      => $regioncb,                                                'regionip'                      => $regionip,                                                'regionsa'                      => $regionsa,                                                'regiontn'                      => $regiontn,                                                                                    'regiontno'                     => $regiontno,                                                'regiontma'                     => $regiontma,                                                'regiontyc'                     => $regiontyc,					  	'insection' 			=> "inSection", 					  	'hebergement' 			=> "valid",                                                'urlhebergement' 		=> true,					  	'qcleft1' 			=> $listehebergementLeft1,	// Liste des hôtels pour la région 1					  	'qcleft2' 			=> $listehebergementLeft2,	// " " région 2					  	'qcleft3' 			=> $listehebergementLeft3,	// " " région 3					  	'form' 				=> $form->createView(),						'texte_accueilfr'		=> html_entity_decode($texte_accueil[0]['texte_accueil_hebergement_fr']),						'texte_accueilen'		=> html_entity_decode($texte_accueil_en[0]['texte_accueil_hebergement_en']),						'clientHotel'			=> $tabTemp[0],							'clientAleatoire'		=> $clientAleatoire,							'regionQcFooter'		=> (new AttraitsactivityController)->getListeFooterRegion($em)[0],						'regionOnFooter'		=> (new AttraitsactivityController)->getListeFooterRegion($em)[1],						'regionNbFooter'		=> (new AttraitsactivityController)->getListeFooterRegion($em)[2],						'hebergement'			=> true,						'formEngine'			=> $formEngine->createView(),						'listeClient'			=> $listClient,						'googledfp1'			=> "GR_HEBERGEMENT_01",						'googledfp2'			=> "GR_HEBERGEMENT_02",                                                'googledfp3'			=> "GR_HEBERGEMENT_03",						'numbCat'			=> $numbCat,						'auberge'			=> $auberge,						'gite'				=> $gite,						'centreVacance'			=> $centre,						'residence'			=> $residence,						'etablissement'			=> $etablissement,						'hotel'				=> $hotel,						'camping'			=> $camping,                                                'insolite'                      => $insolite,						'village'			=> $village,						'valideSuggLeft1H'		=> $valideSuggLeft1,						'valideSuggLeft2H'		=> $valideSuggLeft2,						'valideSuggLeft3H'		=> $valideSuggLeft3,						'saison'			=> $saison,						'reservationRegionAjax'         => $reservationRegionAjax,						'reservationVilleAjax'          => $reservationVilleAjax,						'reservationPays'		=> $reservationEnLignePays[0],						'reservationProvince'           => $reservationEnLignePays[1],                                                'metahebergementfr'             => $texte_accueil[0],                                                'metahebergementen'             => $texte_accueil_en[0],                                                'main'                          => true,                            				));	}		/**	 * Affiche tous les types d'hébergements et les villes pour la région choisie	 */	public function listerAction($name)	{			$insoliteclient = $villageclient = $campingclient = $hotelclient = $etablissementclient = $residenceclient = $centreclient = $giteclient = $aubergeclient = $reservationRegionAjax = $reservationVilleAjax = $valideSuggLeft1 = $valideSuggLeft2 = $valideSuggLeft3 = $listehebergementLeft1 = $listehebergementLeft2 = $listehebergementLeft3 = "";		//Contrôle le nom de la région passé		$name = (new ControleDataSecureController)->getCleanNameGeography($name, "region");                //Gestionnaire des entités                $em = $this->getDoctrine()->getEntityManager();                //Récupère l'id de la région avec son nom                $idRegion = $em->getRepository('MyAppGlobalBundle:Regions')->getNameSearchRegion($name);		//Affiche les villes de la région sélectionnée		$listeVille = $em->getRepository('MyAppGlobalBundle:Hebergements')->getAfficheClientDeLaVille($idRegion[0]->getId());			//Formulaire de recherche map intéractive		$search = new Formu_province_region();		$form = $this->container->get('form.factory')->create(new GoogleForm(), $search);			//On cherche les régions du Qc qui ont des hébergements approuvés		$listeRegionQc = $em->getRepository('MyAppGlobalBundle:Hebergements')->getAfficheRegionsCoteClient($idRegion[0]->getProvinceEtatId()->getId());		//On brasse le tableau qui va nous servir pour afficher les 3 régions pour nos suggestions sur la gauche		shuffle($listeRegionQc);		//Listes des suggestions pour la colonne de gauche		$suggestion = $this->genereListeSuggestionColonneGauche($listeRegionQc, $em);		if(isset($suggestion[0][0]) and isset($suggestion[0][1]))		{			$listehebergementLeft1 = $suggestion[0][0];			$valideSuggLeft1 = $suggestion[0][1];		}		if(isset($suggestion[1][0]) and isset($suggestion[1][1]))		{			$listehebergementLeft2 = $suggestion[1][0];			$valideSuggLeft2 = $suggestion[1][1];		}		if(isset($suggestion[2][0]) and isset($suggestion[2][1]))		{			$listehebergementLeft3 = $suggestion[2][0];			$valideSuggLeft3 = $suggestion[2][1];		}		                //Prépare un client pour chaque type d'hébergement (photo catégorie avec son nom d'établissement)				$numbCat = $em->getRepository('MyAppGlobalBundle:Categories_hebergements')->getChoiceCategoryHebergement();                		                //On retourne les provinces non vides                               $tabTemp = $tabloFinal = $tabUnitaire = [];                //Retourne les catégories d'hébergements                $tabCategorieHeb = [7,3,5,4,2,10,6,8,9];                //Bucle les catégories pour préparer les tableaux de la vue                foreach($tabCategorieHeb as $key ){                     $tempHebergement = $em->getRepository('MyAppGlobalBundle:Hebergements')->getAfficheUnClientParCategorieHebergementRegion($key, $idRegion[0]->getId());                    if($tempHebergement != null){                        shuffle($tempHebergement);                        $tempHebergement[ array_rand($tempHebergement, 1) ];                                                     array_push($tabTemp, $tempHebergement);                        $unitaire = $tempHebergement[ array_rand($tempHebergement, 1) ];                                                     array_push($tabUnitaire, $unitaire);                    }                }    		$numbCat = $em->getRepository('MyAppGlobalBundle:Categories_hebergements')->getChoiceCategoryHebergement();			if(isset($tabUnitaire[4]) != null){					$aubergeclient = $tabUnitaire[4];		}		if(isset($tabUnitaire[1]) != null){			$giteclient = $tabUnitaire[1];		}		if(isset($tabUnitaire[3]) != null){			$centreclient = $tabUnitaire[3];		}		if(isset($tabUnitaire[2]) != null){			$residenceclient = $tabUnitaire[2];		}		                if(isset($tabUnitaire[6]) != null){                        $etablissementclient = $tabUnitaire[6];                }               		if(isset($tabUnitaire[0]) != null){			$hotelclient = $tabUnitaire[0];		}		if(isset($tabUnitaire[7]) != null){			$campingclient = $tabUnitaire[7];		}		if(isset($tabUnitaire[8]) != null){			$villageclient = $tabUnitaire[8];		}                if(isset($tabUnitaire[5]) != null){                        $insoliteclient = $tabUnitaire[5];                }                		//Récupère un client pour afficher dans la grande photo payante		$tableau = HebergementController::getValideTableauClient($tabTemp);		//Moteur de recherche		$listClient = $em->getRepository('MyAppGlobalBundle:Utilisateur')->getAutocompletionPortail();				$retourEngine = $this->getRechercheMoteurDeRecherche();          		if($retourEngine[0] == "form")		{                    $formEngine = $retourEngine[1];		}		if($retourEngine[0] == "request")		{                    //Retourne vers la fiche client                    return $retourEngine[1];		}                elseif($retourEngine[0] == "multiple")                {                                           //retourne vers la vue pour afficher tous les résultats de la recherche                    return $this->getSimuleGoogleSearch($retourEngine);                }		//Site map				$this->getValideUrlSiteMap($em, array('/hebergements_region_'.strtolower($idRegion[0]->getRepertoireFr()).'.html','/accommodation_region_'.strtolower($idRegion[0]->getRepertoireEn()).'.html'));		//affiche image du Québec en saison		$controDefault = new DefaultController();		$saison = $controDefault->getSaisonQuebec();		//traitement formulaire reservation en ligne		$reservationEnLignePays = $controDefault->getReservationEnLignePays($em);                //Liste des régiond pour la réservation                $fullListReservation = new DestinationController;                $reservationRegionAjax = $fullListReservation->hydrateDropDownListRegionReservation($em);                //Liste des villes pour la réservation                $reservationVilleAjax = $fullListReservation->hydrateDropDownListVilleReservation($em);		//Préparation de la view hebergementIndex.html.twig		return $this->render('MyAppGlobalBundle:Hebergement:hebergementIndex.html.twig', 				array(						  	'views'			 		=> ucfirst($name),    					  	'insection' 				=> "inSection", 					  	'hebergement' 				=> 'valid', 					  	'urlhebergement' 			=> '_hebergement',					  	'form' 					=> $form->createView(),						'listeVille'				=> $listeVille,						'qcleft1' 				=> $listehebergementLeft1,	// Liste des hôtels pour la région 1						'qcleft2' 				=> $listehebergementLeft2,	// " " région 2						'qcleft3' 				=> $listehebergementLeft3,	// " " région 3						'clientHotel'				=> $tabTemp,						'clientAleatoire'			=> $tableau,						'hebergementnoeudariane'                => $idRegion,						'menuHebergement'			=> true,						'arborecense'				=> "region",						'regionQcFooter'			=> (new AttraitsactivityController)->getListeFooterRegion($em)[0],						'regionOnFooter'			=> (new AttraitsactivityController)->getListeFooterRegion($em)[1],						'regionNbFooter'			=> (new AttraitsactivityController)->getListeFooterRegion($em)[2],						'hebergement'				=> true,						'formEngine'				=> $formEngine->createView(),						'listeClient'				=> $listClient,						'googledfp1'				=> "GR_HEBERGEMENT_01",						'googledfp2'				=> "GR_HEBERGEMENT_02",                                                'googledfp3'                            => "GR_HEBERGEMENT_03",						'numbCat'				=> $numbCat,						'auberge'				=> $aubergeclient,						'gite'					=> $giteclient,						'centreVacance'				=> $centreclient,						'residence'				=> $residenceclient,						'etablissement'				=> $etablissementclient,						'hotel'					=> $hotelclient,						'camping'				=> $campingclient,                                                'insolite'                              => $insoliteclient,						'village'				=> $villageclient,						'hebergementRegion'			=> true,						'valideSuggLeft1H'			=> $valideSuggLeft1,						'valideSuggLeft2H'			=> $valideSuggLeft2,						'valideSuggLeft3H'			=> $valideSuggLeft3,						'saison'				=> $saison,						'reservationRegionAjax'                 => $reservationRegionAjax,						'reservationVilleAjax'                  => $reservationVilleAjax,						'reservationPays'			=> $reservationEnLignePays[0],						'reservationProvince'                   => $reservationEnLignePays[1],                                                'texteintrofr'                          => html_entity_decode($listeVille[0]->getRegionId()->getTexteFr()),                                                'texteintroen'                          => html_entity_decode($listeVille[0]->getRegionId()->getTexteEn()),                                                'metahebergementregion'                 => $idRegion[0],				));	}		/**	 * Affiche tous les types d'hébergements et ses régions pour la province choisie	 */	public function showProvinceAction($name)	{			$insoliteclientListe = $villageclientListe = $campingclientListe = $hotelclientListe = $etablissementclientListe = $residenceclientListe = $centreclientListe = $giteclientListe = $aubergeclientListe = $clientAleatoire = $reservationRegionAjax = $reservationVilleAjax = $valideSuggLeft1 = $valideSuggLeft2 = $valideSuggLeft3 = $listehebergementLeft1 = $listehebergementLeft2 = $listehebergementLeft3 = "";		//Contrôle le nom de la province		$name = (new ControleDataSecureController)->getCleanNameGeography($name, "province");;		//Gestionnaire des entités		$em = $this->getDoctrine()->getEntityManager();                 //Récupère l'id de la province avec son nom		$idProvince = $em->getRepository('MyAppGlobalBundle:Provinces_etats')->getSearchIdByName($name);		//Liste des régions de la province		$region = $em->getRepository('MyAppGlobalBundle:Hebergements')->getAfficheRegionsCoteClient($idProvince[0]->getId());		//On stoke dans une autre variable les régions du Qc pour ne pas changer l'ordre d'affichage alphabétique		$listeRegionQc = array_values(array_filter($region));		//On brasse le tableau qui va nous servir pour afficher les 3 régions pour nos suggestions sur la gauche		shuffle($listeRegionQc);		//Listes des suggestions pour la colonne de gauche		$suggestion = $this->genereListeSuggestionColonneGauche($listeRegionQc, $em);		if(isset($suggestion[0][0]) and isset($suggestion[0][1]))		{			$listehebergementLeft1 = $suggestion[0][0];			$valideSuggLeft1 = $suggestion[0][1];		}		if(isset($suggestion[1][0]) and isset($suggestion[1][1]))		{			$listehebergementLeft2 = $suggestion[1][0];			$valideSuggLeft2 = $suggestion[1][1];		}		if(isset($suggestion[2][0]) and isset($suggestion[2][1]))		{			$listehebergementLeft3 = $suggestion[2][0];			$valideSuggLeft3 = $suggestion[2][1];		}		//Formulaire de recherche map intéractive		$search = new Formu_province_region();		$form = $this->container->get('form.factory')->create(new GoogleForm(), $search);		//Prépare un client pour chaque type d'hébergement (photo catégorie avec son nom d'établissement)				$numbCat = $em->getRepository('MyAppGlobalBundle:Categories_hebergements')->getChoiceCategoryHebergement();                		                //On retourne les provinces non vides                               $tabTemp = $tabloFinal = $tabUnitaire = [];                //Retourne les catégories d'hébergements                $tabCategorieHeb = [7,3,5,4,2,10,6,8,9];                //Bucle les catégories pour préparer les tableaux de la vue                foreach($tabCategorieHeb as $key ){                     $tempHebergement = $em->getRepository('MyAppGlobalBundle:Hebergements')->getAfficheUnClientParCategorieHebergement($key, $idProvince[0]->getId());                    if($tempHebergement != null){                        shuffle($tempHebergement);                        $tempHebergement[ array_rand($tempHebergement, 1) ];                                                     array_push($tabTemp, $tempHebergement);                        $unitaire = $tempHebergement[ array_rand($tempHebergement, 1) ];                                                     array_push($tabUnitaire, $unitaire);                    }                }    		$numbCat = $em->getRepository('MyAppGlobalBundle:Categories_hebergements')->getChoiceCategoryHebergement();			if(isset($tabUnitaire[4]) != null){					$aubergeclientListe = $tabUnitaire[4];		}		if(isset($tabUnitaire[1]) != null){			$giteclientListe = $tabUnitaire[1];		}		if(isset($tabUnitaire[3]) != null){			$centreclientListe = $tabUnitaire[3];		}		if(isset($tabUnitaire[2]) != null){			$residenceclientListe = $tabUnitaire[2];		}		                if(isset($tabUnitaire[6]) != null){                        $etablissementclientListe = $tabUnitaire[6];                }               		if(isset($tabUnitaire[0]) != null){			$hotelclientListe = $tabUnitaire[0];		}		if(isset($tabUnitaire[7]) != null){			$campingclientListe = $tabUnitaire[7];		}		if(isset($tabUnitaire[8]) != null){			$villageclientListe = $tabUnitaire[8];		}                if(isset($tabUnitaire[5]) != null){                        $insoliteclientListe = $tabUnitaire[5];                }                                //Récupère un client aleatoire		$index = array_rand($tabTemp, 1);		if ($tabTemp[$index] != null){			$clientAleatoire = $tabTemp[$index][0];		}		//Moteur de recherche		$listClient = $em->getRepository('MyAppGlobalBundle:Utilisateur')->getAutocompletionPortail();				$retourEngine = $this->getRechercheMoteurDeRecherche();          		if($retourEngine[0] == "form")		{                    $formEngine = $retourEngine[1];		}		if($retourEngine[0] == "request")		{                    //Retourne vers la fiche client                    return $retourEngine[1];		}                elseif($retourEngine[0] == "multiple")                {                                           //retourne vers la vue pour afficher tous les résultats de la recherche                    return $this->getSimuleGoogleSearch($retourEngine);                }		//Site map                $this->generePersistSiteMap2('/hebergements_province_', '/accommodation_province_', $idProvince[0], $em);               		//affiche image du Québec en saison		$controDefault = new DefaultController();		$saison = $controDefault->getSaisonQuebec();		//traitement formulaire reservation en ligne		$reservationEnLignePays = $controDefault->getReservationEnLignePays($em);                 //Liste des régiond pour la réservation                $fullListReservation = new DestinationController;                $reservationRegionAjax = $fullListReservation->hydrateDropDownListRegionReservation($em);                //Liste des villes pour la réservation                $reservationVilleAjax = $fullListReservation->hydrateDropDownListVilleReservation($em);		//Préparation pour la view hebergementProvince.html.twig		return $this->render('MyAppGlobalBundle:Hebergement:hebergementProvince.html.twig', 				array(						  	'insection' 				=> "inSection", 					  	'hebergement' 				=> 'valid', 					  	'urlhebergement'			=> true,						'region'				=> $region, 						'form'					=> $form->createView(),						'clientAleatoire'			=> $clientAleatoire,						'clientHotel'				=> $tabTemp,							'qcleft1' 				=> $listehebergementLeft1,	// Liste des hôtels pour la région 1						'qcleft2' 				=> $listehebergementLeft2,	// " " région 2						'qcleft3' 				=> $listehebergementLeft3,	// " " région 3						'views'					=> ucfirst($name),						'hebergementnoeudariane'                => $idProvince,						'menuHebergement'			=> true,						'views'					=> ucfirst($name),						'regionQcFooter'			=> (new AttraitsactivityController)->getListeFooterRegion($em)[0],						'regionOnFooter'			=> (new AttraitsactivityController)->getListeFooterRegion($em)[1],						'regionNbFooter'			=> (new AttraitsactivityController)->getListeFooterRegion($em)[2],						'hebergement'				=> true,						'formEngine'				=> $formEngine->createView(),						'listeClient'				=> $listClient,						'googledfp1'				=> "GR_HEBERGEMENT_01",						'googledfp2'				=> "GR_HEBERGEMENT_02",                                                'googledfp3'                            => "GR_HEBERGEMENT_03",						'numbCat'				=> $numbCat,						'auberge'				=> $aubergeclientListe,						'gite'					=> $giteclientListe,						'centreVacance'				=> $centreclientListe,						'residence'				=> $residenceclientListe,						'etablissement'				=> $etablissementclientListe,						'hotel'					=> $hotelclientListe,						'camping'				=> $campingclientListe,                                                'insolite'				=> $insoliteclientListe,						'village'				=> $villageclientListe,						'hebergementProvince'                   => true,						'valideSuggLeft1H'			=> $valideSuggLeft1,						'valideSuggLeft2H'			=> $valideSuggLeft2,						'valideSuggLeft3H'			=> $valideSuggLeft3,						'saison'				=> $saison,						'reservationRegionAjax'                 => $reservationRegionAjax,						'reservationVilleAjax'                  => $reservationVilleAjax,						'reservationPays'			=> $reservationEnLignePays[0],						'reservationProvince'                   => $reservationEnLignePays[1],                                                'texteintrofr'                          => html_entity_decode($idProvince[0]->getTexteAccueilFr()),                                                'texteintroen'                          => html_entity_decode($idProvince[0]->getTexteAccueilEn()),                                                'metahebergementenfant'                 => $idProvince[0],                                              				));	}			/**	 * Détail le type d'hébergement sans province choisie	 */	public function styleHebergementAction($name)	{			$tri1 = $tri2 = $tri3 = $tri4 = $reservationRegionAjax = $reservationVilleAjax = $regionSugg1 = $listeSuggestion1 = $regionSugg2 = $listeSuggestion2 = $regionSugg3 = $listeSuggestion3 = $regionSugg4 = $listeSuggestion4 = null;		//On valide le nom de la catégorie choisie			$name = (new ControleDataSecureController)->getCleanNameGeography($name, "name");  		//Gestionnaire des entités		$em = $this->getDoctrine()->getEntityManager();		//On recherche l'id de la catégorie		$idCategorie = $em->getRepository('MyAppGlobalBundle:Categories_hebergements')->getRechercheIdCategorieHebergement($name);		//Affiche les régions qui ont des hébergements		$regionqc = $em->getRepository('MyAppGlobalBundle:Hebergements')->getSelectAllHebergementProvince(9, $idCategorie[0]['id']);		$regionon = $em->getRepository('MyAppGlobalBundle:Hebergements')->getSelectAllHebergementProvince(8, $idCategorie[0]['id']);		$regionnb = $em->getRepository('MyAppGlobalBundle:Hebergements')->getSelectAllHebergementProvince(5, $idCategorie[0]['id']);		//On stoke dans une autre variable les régions du Qc pour ne pas changer l'ordre d'affichage alphabétique		$listeSuggestion = $listeRegionQc = $regionqc;		//On brasse le tableau qui va nous servir pour afficher les 3 régions pour nos suggestions sur la gauche		shuffle($listeRegionQc);		//Client aléatoire		if(count($listeRegionQc) > 1){			$index = array_rand($listeRegionQc, 1);			$clientAleatoire = $listeRegionQc[$index];		}else{			$clientAleatoire = $listeRegionQc[0];		}		//On récupère la liste des clients de cette région qui sont approuvés on stoke les id des clients dans un tableau et que l'on brasse ensuite X3		if(isset($listeRegionQc[0])){			$nomRegion0 = $listeRegionQc[0];			$listeHotelRegion1 = $em->getRepository('MyAppGlobalBundle:Hebergements')->getRecupListeHotelPourSuggestionGauche($listeRegionQc[0]->getRegionId()->getId());			$tab1 = array();			foreach($listeHotelRegion1 as $tst){				array_push($tab1, $tst->getId());			}			shuffle($tab1);			//Retourne les listes des hébergements pour les 3 régions des suggestions			//$listehebergementLeft1 = $em->getRepository('MyAppGlobalBundle:Hebergements')->getHebergementLimit($idCategorie[0]['id'], $tab1);			$listehebergementLeft1 = $em->getRepository('MyAppGlobalBundle:Chambres')->getTest($tab1);                        if($listehebergementLeft1 != null){                            $listehebergementLeft1 = $listehebergementLeft1[0];                        }		}		else			$nomRegion0 = $listehebergementLeft1 = null;		if(isset($listeRegionQc[1])){			$nomRegion1 = $listeRegionQc[1];			$listeHotelRegion2 = $em->getRepository('MyAppGlobalBundle:Hebergements')->getRecupListeHotelPourSuggestionGauche($listeRegionQc[1]->getRegionId()->getId());			$tab2 = array();			foreach($listeHotelRegion2 as $tst){				array_push($tab2, $tst->getId());			}			shuffle($tab2);			//Retourne les listes des hébergements pour les 3 régions des suggestions			//$listehebergementLeft2 = $em->getRepository('MyAppGlobalBundle:Hebergements')->getHebergementLimit($idCategorie[0]['id'], $tab2);			$listehebergementLeft2 = $em->getRepository('MyAppGlobalBundle:Chambres')->getTest($tab2);                        if($listehebergementLeft2 != null){                            $listehebergementLeft2 = $listehebergementLeft2[0];                        }		}		else			$nomRegion1 = $listehebergementLeft2 = null;		if(isset($listeRegionQc[2])){			$nomRegion2 = $listeRegionQc[2];			$listeHotelRegion3 = $em->getRepository('MyAppGlobalBundle:Hebergements')->getRecupListeHotelPourSuggestionGauche($listeRegionQc[2]->getRegionId()->getId());			$tab3 = array();			foreach($listeHotelRegion3 as $tst){				array_push($tab3, $tst->getId());			}			shuffle($tab3);			//Retourne les listes des hébergements pour les 3 régions des suggestions			//$listehebergementLeft3 = $em->getRepository('MyAppGlobalBundle:Hebergements')->getHebergementLimit($idCategorie[0]['id'], $tab3);			$listehebergementLeft3 = $em->getRepository('MyAppGlobalBundle:Chambres')->getTest($tab3);                        if($listehebergementLeft3 != null){                            $listehebergementLeft3 = $listehebergementLeft3[0];                        }		}		else			$nomRegion2 = $listehebergementLeft3 = null;		//Formulaire de recherche map intéractive		$search = new Formu_province_region();		$form = $this->container->get('form.factory')->create(new GoogleForm(), $search);		//Nos suggestions pour le bas de page		for($i = 0; $i < 3; $i++){			shuffle($listeSuggestion);		}		if(isset($listeSuggestion[0])){ //région 1 est sa liste de max 5 hébergements ou moins			$regionSugg1 = $listeSuggestion[0];			$tri1 = $em->getRepository('MyAppGlobalBundle:Hebergements')->getRecupListeHotelPourSuggestionBasPage($listeSuggestion[0]->getRegionId()->getId(), $idCategorie[0]['id']);                        $tab1 = array();			foreach($tri1 as $tst){				array_push($tab1, $tst->getId());			}			shuffle($tab1);			$listeSuggestion1 = $em->getRepository('MyAppGlobalBundle:Chambres')->getTest($tab1);		}		if(isset($listeRegionQc[1])){ //région 2 est sa liste de max 5 hébergements ou moins			$regionSugg2 = $listeSuggestion[1];			$tri2 = $em->getRepository('MyAppGlobalBundle:Hebergements')->getRecupListeHotelPourSuggestionBasPage($listeSuggestion[1]->getRegionId()->getId(), $idCategorie[0]['id']);			$tab2 = array();			foreach($tri2 as $tst){				array_push($tab2, $tst->getId());			}			shuffle($tab2);			$listeSuggestion2 = $em->getRepository('MyAppGlobalBundle:Chambres')->getTest($tab2);		}		if(isset($listeRegionQc[2])){ //région 3 est sa liste de max 5 hébergements ou moins			$regionSugg3 = $listeSuggestion[2];			$tri3 = $em->getRepository('MyAppGlobalBundle:Hebergements')->getRecupListeHotelPourSuggestionBasPage($listeSuggestion[2]->getRegionId()->getId(), $idCategorie[0]['id']);			$tab3 = array();			foreach($tri3 as $tst){				array_push($tab3, $tst->getId());			}			shuffle($tab3);			$listeSuggestion3 = $em->getRepository('MyAppGlobalBundle:Chambres')->getTest($tab3);		}		if(isset($listeRegionQc[3])){ //région 4 est sa liste de max 5 hébergements ou moins			$regionSugg4 = $listeSuggestion[3];			$tri4 = $em->getRepository('MyAppGlobalBundle:Hebergements')->getRecupListeHotelPourSuggestionBasPage($listeSuggestion[3]->getRegionId()->getId(), $idCategorie[0]['id']);                                               $tab4 = array();			foreach($tri4 as $tst){				array_push($tab4, $tst->getId());			}			shuffle($tab4);			$listeSuggestion4 = $em->getRepository('MyAppGlobalBundle:Chambres')->getTest($tab4);		}		//Moteur de recherche		$listClient = $em->getRepository('MyAppGlobalBundle:Utilisateur')->getAutocompletionPortail();				$retourEngine = $this->getRechercheMoteurDeRecherche();          		if($retourEngine[0] == "form")		{                    $formEngine = $retourEngine[1];		}		if($retourEngine[0] == "request")		{                    //Retourne vers la fiche client                    return $retourEngine[1];		}                elseif($retourEngine[0] == "multiple")                {                                           //retourne vers la vue pour afficher tous les résultats de la recherche                    return $this->getSimuleGoogleSearch($retourEngine);                }                //Site map		                $this->getValideUrlSiteMap($em, array('/hebergements_'.strtolower($idCategorie[0]['repertoire_fr']).'.html','/accommodation_'.strtolower($idCategorie[0]['repertoire_en']).'.html'));		//affiche image du Québec en saison		$controDefault = new DefaultController();		$saison = $controDefault->getSaisonQuebec();		//traitement formulaire reservation en ligne		$reservationEnLignePays = $controDefault->getReservationEnLignePays($em);                $texte_accueil = $em->getRepository('MyAppGlobalBundle:Textes_accueil')->getListTexteAccueilHebergement();		$texte_accueil_en = $em->getRepository('MyAppGlobalBundle:Textes_accueil')->getListTexteAccueilHebergementen();                //empêche les donblons des images pour les colonnes du bas                $tabImages = $this->eviteDoublonImage($idCategorie);                         //Liste des régiond pour la réservation                $fullListReservation = new DestinationController;                $reservationRegionAjax = $fullListReservation->hydrateDropDownListRegionReservation($em);                //Liste des villes pour la réservation                $reservationVilleAjax = $fullListReservation->hydrateDropDownListVilleReservation($em);		//Préparation de la view hebergementType.html.twig		return $this->render('MyAppGlobalBundle:Hebergement:hebergementType.html.twig', 				array(					      	'regionqc' 			=> $regionqc, 				      	'regionon' 			=> $regionon, 				      	'regionnb' 			=> $regionnb, 				      	'insection' 			=> "inSection",                                        'urlhebergement' 		=> '_hebergement',                                        'form' 				=> $form->createView(),                                        'regionQcFooter'		=> (new AttraitsactivityController)->getListeFooterRegion($em)[0],                                        'regionOnFooter'		=> (new AttraitsactivityController)->getListeFooterRegion($em)[1],                                        'regionNbFooter'		=> (new AttraitsactivityController)->getListeFooterRegion($em)[2],                                        'texte_accueilfr'		=> html_entity_decode($texte_accueil[0]["texte_accueil_hebergement_fr"]),                                        'texte_accueilen'		=> html_entity_decode($texte_accueil_en[0]["texte_accueil_hebergement_en"]),                                        'hebergement'			=> true,                                        'views'				=> $name,                                        'menuHebergement'		=> true,                                        'displayregion1' 		=> $nomRegion0,	// Nos suggestions colonne de gauche r1                                        'displayregion2' 		=> $nomRegion1,	// " " r2                                        'displayregion3' 		=> $nomRegion2,	// " " r3                                        'qcleft1' 			=> $listehebergementLeft1,	// Liste des hôtels pour la région 1                                        'qcleft2' 			=> $listehebergementLeft2,	// " " région 2                                        'qcleft3' 			=> $listehebergementLeft3,	// " " région 3                                        'clientAleatoire'		=> $clientAleatoire,                                        'formEngine'			=> $formEngine->createView(),                                        'listeClient'			=> $listClient,                                        'googledfp1'			=> "GR_HEBERGEMENT_01",                                        'googledfp2'			=> "GR_HEBERGEMENT_02",                                        'googledfp3'			=> "GR_HEBERGEMENT_03",                                        'hebergementCate'		=> true,                                        'regionSugg1'			=> $regionSugg1,                                        'listeSuggestion1'		=> $listeSuggestion1,                                        'numbListeSugg1'		=> count($listeSuggestion1),                                        'regionSugg2'			=> $regionSugg2,                                        'listeSuggestion2'		=> $listeSuggestion2,                                        'numbListeSugg2'		=> count($listeSuggestion2),                                        'regionSugg3'			=> $regionSugg3,                                        'listeSuggestion3'		=> $listeSuggestion3,                                        'numbListeSugg3'		=> count($listeSuggestion3),                                        'regionSugg4'			=> $regionSugg4,                                        'listeSuggestion4'		=> $listeSuggestion4,                                        'numbListeSugg4'		=> count($listeSuggestion4),                                        'valideSuggBottom1'		=> $listeSuggestion1[0],                                        'valideSuggBottom2'		=> $listeSuggestion2[0],                                        'valideSuggBottom3'		=> $listeSuggestion3[0],                                        'valideSuggBottom4'		=> $listeSuggestion4[0],                                        'valideSuggLeft1'		=> $listehebergementLeft1,                                        'valideSuggLeft2'		=> $listehebergementLeft2,                                        'valideSuggLeft3'		=> $listehebergementLeft3,                                        'saison'			=> $saison,                                        'reservationRegionAjax'         => $reservationRegionAjax,                                        'reservationVilleAjax'          => $reservationVilleAjax,                                        'reservationPays'		=> $reservationEnLignePays[0],                                        'reservationProvince'           => $reservationEnLignePays[1],                                        'numberHebRegionBottom1'        => $tri1,                                        'numberHebRegionBottom2'        => $tri2,                                        'numberHebRegionBottom3'        => $tri3,                                        'numberHebRegionBottom4'        => $tri4,                                        'idcategorie'                   => $idCategorie[0]["id"],                                        'metahebergementcat'            => $idCategorie[0],                                        'imageColBas1'                  => $tabImages[0],                                        'imageColBas2'                  => $tabImages[1],                                        'imageColBas3'                  => $tabImages[2],                                        'imageColBas4'                  => $tabImages[3],				));	}                /**         * Retourne les 4 images pour les colonnes du bas evitera les doublons dans les catégories         */        private function eviteDoublonImage($idCategorie)        {            $path_parts = pathinfo($_SERVER['SCRIPT_FILENAME']);            $tabTemp = scandir($path_parts['dirname'].'/uploads/categorie_hebergement/images_'.$idCategorie[0]['id']);            $tabImages = [];            for($i = 3; $i < count($tabTemp); $i++){                array_push($tabImages, $tabTemp[$i]);            }            shuffle($tabImages);            return $tabImages;        }		/**	 * Affiche la province choisie avec le type d'hébergement sélectionné	 */	public function styleHebergementProvinceAction($name, $province)	{		$metaDescriptionTitle = $textAccueilFr = $textAccueilEn = $reservationRegionAjax = $reservationVilleAjax = $regionSugg1 = $listeSuggestion1 = $regionSugg2 = $listeSuggestion2 = $regionSugg3 = $listeSuggestion3 = $regionSugg4 = $listeSuggestion4 = null;		//On valide le nom et la province de la catégorie choisie		$name = (new ControleDataSecureController)->getCleanNameGeography($name, "name");             		$nomProvince = (new ControleDataSecureController)->getCleanNameGeography($province, "province");		//Gestionnaire des entités		$em = $this->getDoctrine()->getEntityManager();		//On recherche l'id de la catégorie		$idCategorie = $em->getRepository('MyAppGlobalBundle:Categories_hebergements')->getRechercheIdCategorieHebergement($name);				//Recherche l'id de la province par son nom		$idProvince = $em->getRepository('MyAppGlobalBundle:Provinces_etats')->getSearchIdByName($nomProvince);                //Récupère les textes d'accueil le tire et les meta.                $txtCatProv = $em->getRepository("MyAppGlobalBundle:Texte_province_categorie")->getRechercheTexteAccueil($idProvince[0]->getId(), $idCategorie[0]['id']);		//Affiche les régions qui ont la catégorie d'hébergement		$regionCat = $em->getRepository('MyAppGlobalBundle:Hebergements')->getSelectAllHebergementProvince($idProvince[0]->getId(), $idCategorie[0]['id']);                //On stoke dans une autre variable les régions du Qc pour ne pas changer l'ordre d'affichage alphabétique		$listeRegionQc = $regionCat;		//On brasse le tableau qui va nous servir pour afficher les 3 régions pour nos suggestions sur la gauche		shuffle($listeRegionQc);		//Client aléatoire		if(count($listeRegionQc) > 1){			$index = array_rand($listeRegionQc, 1);			$clientAleatoire = $listeRegionQc[$index];		}else{			$clientAleatoire = $listeRegionQc[0];		}		//On récupère la liste des clients de cette région qui sont approuvés on stoke les id des clients dans un tableau et que l'on brasse 		if(isset($listeRegionQc[0])){			$nomRegion0 = $listeRegionQc[0];			$listeHotelRegion1 = $em->getRepository('MyAppGlobalBundle:Hebergements')->getRecupListeHotelPourSuggestionGauche($listeRegionQc[0]->getRegionId()->getId());			$tab1 = array();			foreach($listeHotelRegion1 as $tst){				array_push($tab1, $tst->getId());			}			shuffle($tab1);			$listehebergementLeft1 = $em->getRepository('MyAppGlobalBundle:Chambres')->getTest($tab1);                        if($listehebergementLeft1 != null){                            $listehebergementLeft1 = $listehebergementLeft1[0];                        }		}		else			$nomRegion0 = $listehebergementLeft1 = null;		if(isset($listeRegionQc[1])){			$nomRegion1 = $listeRegionQc[1];			$listeHotelRegion2 = $em->getRepository('MyAppGlobalBundle:Hebergements')->getRecupListeHotelPourSuggestionGauche($listeRegionQc[1]->getRegionId()->getId());			$tab2 = array();			foreach($listeHotelRegion2 as $tst){				array_push($tab2, $tst->getId());			}			shuffle($tab2);			$listehebergementLeft2 = $em->getRepository('MyAppGlobalBundle:Chambres')->getTest($tab2);                         if($listehebergementLeft2 != null){                            $listehebergementLeft2 = $listehebergementLeft2[0];                        }		}		else			$nomRegion1 = $listehebergementLeft2 = null;		if(isset($listeRegionQc[2])){			$nomRegion2 = $listeRegionQc[2];			$listeHotelRegion3 = $em->getRepository('MyAppGlobalBundle:Hebergements')->getRecupListeHotelPourSuggestionGauche($listeRegionQc[2]->getRegionId()->getId());			$tab3 = array();			foreach($listeHotelRegion3 as $tst){				array_push($tab3, $tst->getId());			}			shuffle($tab3);			$listehebergementLeft3 = $em->getRepository('MyAppGlobalBundle:Chambres')->getTest($tab3);                         if($listehebergementLeft3 != null){                            $listehebergementLeft3 = $listehebergementLeft3[0];                        }		}		else			$nomRegion2 = $listehebergementLeft3 = null;		//Formulaire de recherche map intéractive		$search = new Formu_province_region();		$form = $this->container->get('form.factory')->create(new GoogleForm(), $search);		//Nos suggestions pour le bas de page		$listeSuggestion = $regionCat;		for($i = 0; $i < 3; $i++){			shuffle($listeSuggestion);		}		if(isset($listeSuggestion[0])){			$regionSugg1 = $listeSuggestion[0];			$tri1 = $em->getRepository('MyAppGlobalBundle:Hebergements')->getRecupListeHotelPourSuggestionBasPage($listeSuggestion[0]->getRegionId()->getId(), $idCategorie[0]['id']);                        $tab1 = array();			foreach($tri1 as $tst){				array_push($tab1, $tst->getId());			}			shuffle($tab1);			$listeSuggestion1 = $em->getRepository('MyAppGlobalBundle:Chambres')->getTest($tab1);		}		if(isset($listeRegionQc[1])){			$regionSugg2 = $listeSuggestion[1];			$tri2 = $em->getRepository('MyAppGlobalBundle:Hebergements')->getRecupListeHotelPourSuggestionBasPage($listeSuggestion[1]->getRegionId()->getId(), $idCategorie[0]['id']);			$tab2 = array();			foreach($tri2 as $tst){				array_push($tab2, $tst->getId());			}			shuffle($tab2);			$listeSuggestion2 = $em->getRepository('MyAppGlobalBundle:Chambres')->getTest($tab2);		}		if(isset($listeRegionQc[2])){			$regionSugg3 = $listeSuggestion[2];			$tri3 = $em->getRepository('MyAppGlobalBundle:Hebergements')->getRecupListeHotelPourSuggestionBasPage($listeSuggestion[2]->getRegionId()->getId(), $idCategorie[0]['id']);			$tab3 = array();			foreach($tri3 as $tst){				array_push($tab3, $tst->getId());			}			shuffle($tab3);			$listeSuggestion3 = $em->getRepository('MyAppGlobalBundle:Chambres')->getTest($tab3);		}		if(isset($listeRegionQc[3])){			$regionSugg4 = $listeSuggestion[3];			$tri4 = $em->getRepository('MyAppGlobalBundle:Hebergements')->getRecupListeHotelPourSuggestionBasPage($listeSuggestion[3]->getRegionId()->getId(), $idCategorie[0]['id']);			$tab4 = array();			foreach($tri4 as $tst){				array_push($tab4, $tst->getId());			}			shuffle($tab4);			$listeSuggestion4 = $em->getRepository('MyAppGlobalBundle:Chambres')->getTest($tab4);		}		//Moteur de recherche		$listClient = $em->getRepository('MyAppGlobalBundle:Utilisateur')->getAutocompletionPortail();		//Moteur de recherche		$listClient = $em->getRepository('MyAppGlobalBundle:Utilisateur')->getAutocompletionPortail();				$retourEngine = $this->getRechercheMoteurDeRecherche();          		if($retourEngine[0] == "form")		{                    $formEngine = $retourEngine[1];		}		if($retourEngine[0] == "request")		{                    //Retourne vers la fiche client                    return $retourEngine[1];		}                elseif($retourEngine[0] == "multiple")                {                                           //retourne vers la vue pour afficher tous les résultats de la recherche                    return $this->getSimuleGoogleSearch($retourEngine);                }	                 //Site map		                $this->getValideUrlSiteMap($em, array('/hebergements_'.strtolower($idCategorie[0]['repertoire_fr']).'_province_'.strtolower($regionCat[0]->getProvinceId()->getRepertoireFr()).'.html','/accommodation_'.strtolower($idCategorie[0]['repertoire_en']).'_province_'.strtolower($regionCat[0]->getProvinceId()->getRepertoireEn()).'.html'));		//affiche image du Québec en saison		$controDefault = new DefaultController();		$saison = $controDefault->getSaisonQuebec();		//traitement formulaire reservation en ligne		$reservationEnLignePays = $controDefault->getReservationEnLignePays($em);                //Contrôle si on a un texte d'accueil                if($txtCatProv != null){                    $textAccueilFr = html_entity_decode($txtCatProv[0]->getTexteFr());                    $textAccueilEn = html_entity_decode($txtCatProv[0]->getTexteEn());                    $metaDescriptionTitle = $txtCatProv[0];                }                //empêche les donblons des images pour les colonnes du bas                $tabImages = $this->eviteDoublonImage($idCategorie);                //Liste des régiond pour la réservation                $fullListReservation = new DestinationController;                $reservationRegionAjax = $fullListReservation->hydrateDropDownListRegionReservation($em);                //Liste des villes pour la réservation                $reservationVilleAjax = $fullListReservation->hydrateDropDownListVilleReservation($em);		//Préparation de la view hebergementType.html.twig		return $this->render('MyAppGlobalBundle:Hebergement:hebergementTypeProvince.html.twig',				array(						'regionCat' 				=> $regionCat, 										'insection' 				=> "inSection",						'urlhebergement' 			=> '_hebergement',						'form' 					=> $form->createView(),						'regionQcFooter'			=> (new AttraitsactivityController)->getListeFooterRegion($em)[0],						'regionOnFooter'			=> (new AttraitsactivityController)->getListeFooterRegion($em)[1],						'regionNbFooter'			=> (new AttraitsactivityController)->getListeFooterRegion($em)[2],						'texte_accueilfr'			=> $textAccueilFr,						'texte_accueilen'			=> $textAccueilEn,						'hebergement'				=> true,						'views'					=> $name,						'menuHebergement'			=> true,						'displayregion1' 			=> $nomRegion0,	// Nos suggestions colonne de gauche r1						'displayregion2' 			=> $nomRegion1,	// " " r2						'displayregion3' 			=> $nomRegion2,	// " " r3						'qcleft1'                               => $listehebergementLeft1,	// Liste des hôtels pour la région 1						'qcleft2' 				=> $listehebergementLeft2,	// " " région 2						'qcleft3' 				=> $listehebergementLeft3,	// " " région 3						'clientAleatoire'			=> $clientAleatoire,						'formEngine'				=> $formEngine->createView(),						'listeClient'				=> $listClient,						'googledfp1'				=> "GR_HEBERGEMENT_01",						'googledfp2'				=> "GR_HEBERGEMENT_02",                                                'googledfp3'                            => "GR_HEBERGEMENT_03",						'hebergementCateProvince'               => true,						'regionSugg1'				=> $regionSugg1,						'listeSuggestion1'			=> $listeSuggestion1,						'numbListeSugg1'			=> count($listeSuggestion1),						'regionSugg2'				=> $regionSugg2,						'listeSuggestion2'			=> $listeSuggestion2,						'numbListeSugg2'			=> count($listeSuggestion2),						'regionSugg3'				=> $regionSugg3,						'listeSuggestion3'			=> $listeSuggestion3,						'numbListeSugg3'			=> count($listeSuggestion3),						'regionSugg4'				=> $regionSugg4,						'listeSuggestion4'			=> $listeSuggestion4,						'numbListeSugg4'			=> count($listeSuggestion4),						'valideSuggBottom1'			=> $listeSuggestion1[0],						'valideSuggBottom2'			=> $listeSuggestion2[0],						'valideSuggBottom3'			=> $listeSuggestion3[0],						'valideSuggBottom4'			=> $listeSuggestion4[0],						'valideSuggLeft1'			=> $listehebergementLeft1,						'valideSuggLeft2'			=> $listehebergementLeft2,						'valideSuggLeft3'			=> $listehebergementLeft3,						'saison'				=> $saison,						'reservationRegionAjax'                 => $reservationRegionAjax,						'reservationVilleAjax'                  => $reservationVilleAjax,						'reservationPays'			=> $reservationEnLignePays[0],						'reservationProvince'                   => $reservationEnLignePays[1],                                                'idcategorie'                           => $idCategorie[0]["id"],                                                'metahebergementenfant'                 => $metaDescriptionTitle,                                                'imageColBas1'                          => $tabImages[0],                                                'imageColBas2'                          => $tabImages[1],                                                'imageColBas3'                          => $tabImages[2],                                                'imageColBas4'                          => $tabImages[3],				));	}		/**	 * Classement de la liste du style d'hébergement par choix	 */	public function classementListeAction()	{		$numberPaginate = 10; // nombre de client afficher pour la pagination		$request = $this->container->get('request');		if($request->isXmlHttpRequest())		{			$nomRegion = $nomCategorie = $classement = $style = $region = $page = '';			$classement = $request->request->get('classement');			$region = $request->request->get('region');			$style = $request->request->get('style');			$page = $request->request->get('page');			$displaypage = $request->request->get('displaypage');			$total = $request->request->get('total');             			($classement != null)? $classement : $classement = "";			$em = $this->getDoctrine()->getEntityManager();			//Contrôle s'il existe une variable $page et on s'assure qu'elle ne devienne pas superieure au nombre max de page			$page = (new ControleDataSecureController)->getValideEntierPagination($page, $displaypage);			if($classement != ''){				//Recherche par ajax avec le critère de tri				$list = $em->getRepository('MyAppGlobalBundle:Hebergements')->getAllCustomerByRegionAndCategoryFiltreChoix($style, $region, $classement, $page, $numberPaginate);                                //On regarde la langue                                $lang = $this->container->get('session')->getLocale();                                //Si on un résultat pour l'affichage demandé                                if($list != null and $lang != null){                                    if($lang == "fr"){                                        $nomRegion = $list[0]->getRegionId()->getRepertoireFr();                                        $categorie = $list[0]->getCategorieHebergementId()[0]->getRepertoireFr();                                    }else{                                        $nomRegion = $list[0]->getRegionId()->getRepertoireEn();                                        $nomCategorie = $list[0]->getCategorieHebergementId()[0]->getRepertoireEn();                                    }                                                         }                                     return $this->render('MyAppGlobalBundle:Hebergement:ListeTypeHebergementRegion.xml.twig',                                    array(	                                                   "style" 		=> $style,                                                    "region" 		=> $region,                                                    'listclient'         => $list,                                                    "page" 		=> $page,                                                   "total" 		=> $total,                                                   "displaypage"        => $displaypage,                                                   "nomRegion"          => $nomRegion,                                                   "nomCategorie"       => $nomCategorie,                                                   "ordre"              => $classement,				));			}		}	}		/**	 * Détail le type d'hébergement avec la région choisi	 */	public function styleHebergementRegionAction($name, $region, $page, $ordre)	{		$numberPaginate = 10; // nombre de client afficher pour la pagination		$textAccueilFr = $textAccueilEn = $metaDescriptionTitle = $nomCategorie = $nomRegion = $reservationRegionAjax = $reservationVilleAjax = $suggestion1 = $suggestion2 = $suggestion3 = $suggestion4 = "";		//On valide le nom et la province de la catégorie choisie		$name = (new ControleDataSecureController)->getCleanNameGeography($name, "name");		$nomRegion = (new ControleDataSecureController)->getCleanNameGeography($region, "region");                //valide que la vairable ordre est soit vide ou est un entier.                (is_numeric($ordre) == true)? $ordre = $ordre : $ordre = 0 ;		//Gestionnaire des entités		$em = $this->getDoctrine()->getEntityManager();        		//On recherche l'id de la catégorie		$idCategorie = $em->getRepository('MyAppGlobalBundle:Categories_hebergements')->getRechercheIdCategorieHebergement($name);		//Recherche l'id de la region par son nom		$idRegion = $em->getRepository('MyAppGlobalBundle:Regions')->getNameSearchRegion($nomRegion);                 //On recherche le titre, meta et le texte d'accueil		$txtCatReg = $em->getRepository('MyAppGlobalBundle:Texte_region_categorie')->getRechercheTexteAccueil($idRegion[0]->getId(), $idCategorie[0]['id']);		//Récupère tous les clients de cette région qui sont de ce type de catégorie d'hébergement		$listeclientHeb = $em->getRepository('MyAppGlobalBundle:Hebergements')->getAllCustomerByRegionAndCategory($idCategorie[0]['id'], $idRegion[0]->getId());		//Pagination		$total = sizeof($listeclientHeb);		//On divise le nombre total de client par le nombre que l'on souhaite afficher.		$displaypage = ceil($total/$numberPaginate);		//Contrôle s'il existe une variable $page et on s'assure qu'elle ne devienne pas superieure au nombre max de page		$page = (new ControleDataSecureController)->getValideEntierPagination($page, $displaypage);                //Résultat de recherche pour la pagination                if(is_numeric($ordre) == true and $ordre == 0){                      //Récupère 10 résultats pour l'affichage sans critère de tri                    $pagination = $em->getRepository('MyAppGlobalBundle:Hebergements')->getAllCustomerByRegionAndCategoryPagination($idCategorie[0]['id'], $idRegion[0]->getId(), $page, $numberPaginate);                    shuffle($pagination);                }else{                     //Récupère 10 résultats pour l'affichage avec critère de tri                    $pagination = $em->getRepository('MyAppGlobalBundle:Hebergements')->getAllCustomerByRegionAndCategoryFiltreChoix($idCategorie[0]['id'], $idRegion[0]->getId(), $ordre, $page, $numberPaginate);                                }                //Formulaire de recherche map intéractive		$search = new Formu_province_region();		$form = $this->container->get('form.factory')->create(new GoogleForm(), $search);		//Client aléatoire		if(count($listeclientHeb) > 1){			$index = array_rand($listeclientHeb, 1);			$clientAleatoire = $listeclientHeb[$index];		}else{			$clientAleatoire = $listeclientHeb[0];		}                $lang = $this->container->get('session')->getLocale();                if($lang != null and $clientAleatoire  != null){                    if($lang == "fr"){                         $nomRegion = $clientAleatoire->getRegionId()->getRepertoireFr();                        $nomCategorie = $idCategorie[0]['repertoire_fr'];                       }else{                         $nomRegion = $clientAleatoire->getRegionId()->getRepertoireEn();                        $nomCategorie = $idCategorie[0]['repertoire_en'];                    }                } 		//Moteur de recherche		$listClient = $em->getRepository('MyAppGlobalBundle:Utilisateur')->getAutocompletionPortail();				$retourEngine = $this->getRechercheMoteurDeRecherche();          		if($retourEngine[0] == "form")		{                    $formEngine = $retourEngine[1];		}		if($retourEngine[0] == "request")		{                    //Retourne vers la fiche client                    return $retourEngine[1];		}                elseif($retourEngine[0] == "multiple")                {                                           //retourne vers la vue pour afficher tous les résultats de la recherche                    return $this->getSimuleGoogleSearch($retourEngine);                }                //		if(sizeof($listeclientHeb) >= 4)		{			//On déclare un tableau pour stocker les id de région			$tab = [];			foreach($listeclientHeb as $ts)			{				array_push($tab, $ts->getId());			}			shuffle($tab);			//On récupère aléatoirement 4 id de client			$tabloIdClientSug = array_rand($tab, 4);			$tab = []; //On vide la tableau des id client qui ne sert plus			//stocke dans un tableau les clients			foreach($tabloIdClientSug as $tx){				array_push($tab, $listeclientHeb[$tx]);			}			$suggestion1 = $tab[0];			$suggestion2 = $tab[1];			$suggestion3 = $tab[2];			$suggestion4 = $tab[3];		}		elseif(sizeof($listeclientHeb) == 3){			//On déclare un tableau pour stocker les id des régions			$tab = [];			foreach($listeclientHeb as $ts)			{				array_push($tab, $ts->getId());			}			shuffle($tab);			//On récupère aléatoirement 3 id de client			$tabloIdClientSug = array_rand($tab, 3);			$tab = []; //On vide la tableau des id client qui ne sert plus			//stocke dans un tableau les clients			foreach($tabloIdClientSug as $tx){				array_push($tab, $listeclientHeb[$tx]);			}			$suggestion1 = $tab[0];			$suggestion2 = $tab[1];			$suggestion3 = $tab[2];		}		elseif(sizeof($listeclientHeb) == 2){			//On déclare un tableau pour stocker les id des régions			$tab = [];			foreach($listeclientHeb as $ts)			{				array_push($tab, $ts->getId());			}			shuffle($tab);			//On récupère aléatoirement 2 id des clients			$tabloIdClientSug = array_rand($tab, 2);			$tab = []; //On vide la tableau des id client qui ne sert plus			//stocke dans un tableau les clients			foreach($tabloIdClientSug as $tx){				array_push($tab, $listeclientHeb[$tx]);			}			$suggestion1 = $tab[0];			$suggestion2 = $tab[1];		}		elseif(sizeof($listeclientHeb) == 1){			//On déclare un tableau pour stocker les id des régions			$tab = [];			foreach($listeclientHeb as $ts)			{				array_push($tab, $ts->getId());			}			$suggestion1 = $listeclientHeb[0];		}                  //Site map		                $this->getValideUrlSiteMap($em, array('/hebergements_'.strtolower($idCategorie[0]['repertoire_fr']).'_region_'.strtolower($idRegion[0]->getRepertoireFr()).'.html','/accommodation_'.strtolower($idCategorie[0]['repertoire_en']).'_region_'.strtolower($idRegion[0]->getRepertoireEn()).'.html'));		//affiche image du Québec en saison		$controDefault = new DefaultController();		$saison = $controDefault->getSaisonQuebec();		//traitement formulaire reservation en ligne		$reservationEnLignePays = $controDefault->getReservationEnLignePays($em);		//Liste des villes de la région grouper par ville		$listeclientHebGroupBy = $em->getRepository('MyAppGlobalBundle:Hebergements')->getAllCustomerByRegionAndCategoryGrouperParVille($idCategorie[0]['id'], $idRegion[0]->getId());                 //Contrôle si on a un texte d'accueil                if($txtCatReg != null){                    $textAccueilFr = html_entity_decode($txtCatReg[0]->getTexteFr());                    $textAccueilEn = html_entity_decode($txtCatReg[0]->getTexteEn());                    $metaDescriptionTitle = $txtCatReg[0];                }                 //empêche les donblons des images pour les colonnes du bas                $tabImages = $this->eviteDoublonImage($idCategorie);                  //Liste des régiond pour la réservation                $fullListReservation = new DestinationController;                $reservationRegionAjax = $fullListReservation->hydrateDropDownListRegionReservation($em);                //Liste des villes pour la réservation                $reservationVilleAjax = $fullListReservation->hydrateDropDownListVilleReservation($em);                //Préparation de la view hebergementType.html.twig		return $this->render('MyAppGlobalBundle:Hebergement:hebergementTypeRegion.html.twig',				array(										'insection' 			=> "inSection",						'urlhebergement' 		=> '_hebergement',						'form' 				=> $form->createView(),						'regionQcFooter'		=> (new AttraitsactivityController)->getListeFooterRegion($em)[0],						'regionOnFooter'		=> (new AttraitsactivityController)->getListeFooterRegion($em)[1],						'regionNbFooter'		=> (new AttraitsactivityController)->getListeFooterRegion($em)[2],						'texte_accueilfr'		=> $textAccueilFr,						'texte_accueilen'		=> $textAccueilEn,						'hebergement'			=> true,						'menuHebergement'		=> true,						'views'				=> $name,						'clientAleatoire'		=> $clientAleatoire,						'listclient'			=> $pagination,						'formEngine'			=> $formEngine->createView(),						'listeClient'			=> $listClient,						'suggestion1'			=> $suggestion1,						'suggestion2'			=> $suggestion2,						'suggestion3'			=> $suggestion3,						'suggestion4'			=> $suggestion4,						'displaypage'			=> $displaypage,						'page'				=> $page,						'googledfp1'			=> "GR_HEBERGEMENT_01",						'googledfp2'			=> "GR_HEBERGEMENT_02",                                                'googledfp3'			=> "GR_HEBERGEMENT_03",						'total'				=> $total,						'hebergementCateRegion'         => true,						'listeVille'			=> $listeclientHeb,						'saison'			=> $saison,						'reservationRegionAjax'         => $reservationRegionAjax,						'reservationVilleAjax'          => $reservationVilleAjax,						'reservationPays'		=> $reservationEnLignePays[0],						'reservationProvince'           => $reservationEnLignePays[1],						'listeFiltreGauche'		=> $listeclientHebGroupBy,						'style'				=> $idCategorie[0]['id'],						'region'			=> $clientAleatoire->getRegionId()->getId(),                                                'nomRegion'                     => $nomRegion,                                                'nomCategorie'                  => $nomCategorie,                                                'ordre'                         => $ordre,                                                'metahebergementenfant'         => $metaDescriptionTitle,                                                'imageColBas1'                  => $tabImages[0],                                                'imageColBas2'                  => $tabImages[1],                                                'imageColBas3'                  => $tabImages[2],                                                'imageColBas4'                  => $tabImages[3],				));	}		/**	 * Détail le type d'hébergement avec la ville choisi	 */	public function styleHebergementVilleAction($name, $ville, $page)	{		$numberPaginate = 10; // nombre de client afficher pour la pagination		$reservationRegionAjax = $reservationVilleAjax = $suggestion1 = $suggestion2 = $suggestion3 = $suggestion4 = "";		//On valide le nom et la province de la catégorie choisie                $validation = new ControleDataSecureController();		$name = $validation->getCleanNameGeography($name, "name");		$nomVille = $validation->getCleanNameGeography($ville, "name");		//Gestionnaire des entités		$em = $this->getDoctrine()->getEntityManager();		//On recherche l'id de la catégorie		$idCategorie = $em->getRepository('MyAppGlobalBundle:Categories_hebergements')->getRechercheIdCategorieHebergement($name);		//Recherche l'id de la ville par son nom		$idVille = $em->getRepository('MyAppGlobalBundle:Villes')->getSearchTown($nomVille);		//Récupère tous les clients de cette ville qui sont de ce type de catégorie d'hébergement		$listeclientHeb = $em->getRepository('MyAppGlobalBundle:Hebergements')->getAllCustomerByVilleAndCategory($idCategorie[0]['id'], $idVille[0]->getId());		//Pagination		$total = sizeof($listeclientHeb);		//On divise le nombre total de client par le nombre que l'on souhaite afficher.		$displaypage = ceil($total/$numberPaginate);		//Contrôle s'il existe une variable $page et on s'assure qu'elle ne devienne pas superieure au nombre max de page		$page = $validation->getValideEntierPagination($page, $displaypage);		//Récupère 10 résultats pour l'affichage		$pagination = $em->getRepository('MyAppGlobalBundle:Hebergements')->getAllCustomerByVilleAndCategoryPagination($idCategorie[0]['id'], $idVille[0]->getId(), $page, $numberPaginate);		shuffle($pagination);                //Formulaire de recherche map intéractive		$search = new Formu_province_region();		$form = $this->container->get('form.factory')->create(new GoogleForm(), $search);		//Client aléatoire		if(count($listeclientHeb) > 1){			$index = array_rand($listeclientHeb, 1);			$clientAleatoire = $listeclientHeb[$index];		}else{			$clientAleatoire = $listeclientHeb[0];		}		//Moteur de recherche		$listClient = $em->getRepository('MyAppGlobalBundle:Utilisateur')->getAutocompletionPortail();				$retourEngine = $this->getRechercheMoteurDeRecherche();          		if($retourEngine[0] == "form")		{                    $formEngine = $retourEngine[1];		}		if($retourEngine[0] == "request")		{                    //Retourne vers la fiche client                    return $retourEngine[1];		}                elseif($retourEngine[0] == "multiple")                {                                           //retourne vers la vue pour afficher tous les résultats de la recherche                    return $this->getSimuleGoogleSearch($retourEngine);                }                //		if(sizeof($listeclientHeb) >= 4)		{			//On déclare un tableau pour stocker les id de région			$tab = [];			foreach($listeclientHeb as $ts)			{				array_push($tab, $ts->getId());			}			shuffle($tab);			//On récupère aléatoirement 4 id de client			$tabloIdClientSug = array_rand($tab, 4);			$tab = []; //On vide le tableau des id client qui ne sert plus			//stocke dans un tableau les clients			foreach($tabloIdClientSug as $tx){				array_push($tab, $listeclientHeb[$tx]);			}			$suggestion1 = $tab[0];			$suggestion2 = $tab[1];			$suggestion3 = $tab[2];			$suggestion4 = $tab[3];		}		elseif(sizeof($listeclientHeb) == 3){			//On déclare un tableau pour stocker les id des régions			$tab = [];			foreach($listeclientHeb as $ts)			{				array_push($tab, $ts->getId());			}			shuffle($tab);			//On récupère aléatoirement 3 id de client			$tabloIdClientSug = array_rand($tab, 3);			$tab = []; //On vide la tableau des id client qui ne sert plus			//stocke dans un tableau les clients			foreach($tabloIdClientSug as $tx){				array_push($tab, $listeclientHeb[$tx]);			}			$suggestion1 = $tab[0];			$suggestion2 = $tab[1];			$suggestion3 = $tab[2];		}		elseif(sizeof($listeclientHeb) == 2){			//On déclare un tableau pour stocker les id des régions			$tab = [];			foreach($listeclientHeb as $ts)			{				array_push($tab, $ts->getId());			}			shuffle($tab);			//On récupère aléatoirement 2 id des clients			$tabloIdClientSug = array_rand($tab, 2);			$tab = []; //On vide la tableau des id client qui ne sert plus			//stocke dans un tableau les clients			foreach($tabloIdClientSug as $tx){				array_push($tab, $listeclientHeb[$tx]);			}			$suggestion1 = $tab[0];			$suggestion2 = $tab[1];		}		elseif(sizeof($listeclientHeb) == 1){			//On déclare un tableau pour stocker les id des régions			$tab = [];			foreach($listeclientHeb as $ts)			{				array_push($tab, $ts->getId());			}			$suggestion1 = $listeclientHeb[0];		}		                 //Site map		                $this->getValideUrlSiteMap($em, array('/hebergements_'.strtolower($idCategorie[0]['repertoire_fr']).'_ville_'.strtolower($idVille[0]->getRepertoireFr()).'.html','/accommodation_'.strtolower($idCategorie[0]['repertoire_en']).'_city_'.strtolower($idVille[0]->getRepertoireEn()).'.html'));		//affiche image du Québec en saison		$controDefault = new DefaultController();		$saison = $controDefault->getSaisonQuebec();		//traitement formulaire reservation en ligne		$reservationEnLignePays = $controDefault->getReservationEnLignePays($em);                //empêche les donblons des images pour les colonnes du bas                $tabImages = $this->eviteDoublonImage($idCategorie);                  //Liste des régiond pour la réservation                $fullListReservation = new DestinationController;                $reservationRegionAjax = $fullListReservation->hydrateDropDownListRegionReservation($em);                //Liste des villes pour la réservation                $reservationVilleAjax = $fullListReservation->hydrateDropDownListVilleReservation($em);		//Préparation de la view hebergementType.html.twig		return $this->render('MyAppGlobalBundle:Hebergement:hebergementTypeVille.html.twig',                    array(                                'insection' 			=> "inSection",                                'urlhebergement' 		=> '_hebergement',                                'form' 				=> $form->createView(),                                'regionQcFooter'		=> (new AttraitsactivityController)->getListeFooterRegion($em)[0],                                'regionOnFooter'		=> (new AttraitsactivityController)->getListeFooterRegion($em)[1],                                'regionNbFooter'		=> (new AttraitsactivityController)->getListeFooterRegion($em)[2],                                'texte_accueilfr'		=> html_entity_decode($idVille[0]->getTexteFr()),                                'texte_accueilen'		=> html_entity_decode($idVille[0]->getTexteEn()),                                'hebergement'			=> true,                                'menuHebergement'		=> true,                                'views'				=> $name,                                'clientAleatoire'		=> $clientAleatoire,                                'listclient'			=> $pagination,                                'formEngine'			=> $formEngine->createView(),                                'listeClient'			=> $listClient,                                'suggestion1'			=> $suggestion1,                                'suggestion2'			=> $suggestion2,                                'suggestion3'			=> $suggestion3,                                'suggestion4'			=> $suggestion4,                                'displaypage'			=> $displaypage,                                'page'				=> $page,                                'googledfp1'			=> "GR_HEBERGEMENT_01",                                'googledfp2'			=> "GR_HEBERGEMENT_02",                                'googledfp3'			=> "GR_HEBERGEMENT_03",                                'total'				=> $total,                                'hebergementCateVille'          => true,                                'saison'			=> $saison,                                'reservationRegionAjax'         => $reservationRegionAjax,                                'reservationVilleAjax'          => $reservationVilleAjax,                                'reservationPays'		=> $reservationEnLignePays[0],                                'reservationProvince'           => $reservationEnLignePays[1],                                'metahebergementtypeville'      => $clientAleatoire,                                'imageColBas1'                  => $tabImages[0],                                'imageColBas2'                  => $tabImages[1],                                'imageColBas3'                  => $tabImages[2],                                'imageColBas4'                  => $tabImages[3],                                'style'				=> $idCategorie[0]['id'],		));	}		/**	 * Affiche la ville choisie avec ses types d'hébergements disponibles 	 * 	 */	public function villeHebergementAction($name)	{		$insoliteclient = $villageclient = $campingclient = $hotelclient = $etablissementclient = $residenceclient = $centreclient = $giteclient = $aubergeclient = $reservationRegionAjax = $reservationVilleAjax = $valideSuggLeft1 = $valideSuggLeft2 = $valideSuggLeft3 = $listehebergementLeft1 = $listehebergementLeft2 = $listehebergementLeft3 = "";		//Contrôle le nom de la région passé		$name = (new ControleDataSecureController)->getCleanNameGeography($name, "name");		//Gestionnaire des entités		$em = $this->getDoctrine()->getEntityManager();		//Récupère l'id de la ville avec son nom		$idVille = $em->getRepository('MyAppGlobalBundle:Villes')->getInfosVille($name);		//Formulaire de recherche map intéractive		$search = new Formu_province_region();		$form = $this->container->get('form.factory')->create(new GoogleForm(), $search);		//On cherche les régions du Qc qui ont des hébergements approuvés		$listeRegionQc = $em->getRepository('MyAppGlobalBundle:Hebergements')->getAfficheRegionsCoteClient($idVille[0]->getRegionId()->getProvinceEtatId()->getId());		//On brasse le tableau qui va nous servir pour afficher les 3 régions pour nos suggestions sur la gauche		shuffle($listeRegionQc);		//Listes des suggestions pour la colonne de gauche		$suggestion = $this->genereListeSuggestionColonneGauche($listeRegionQc, $em);		if(isset($suggestion[0][0]) and isset($suggestion[0][1]))		{			$listehebergementLeft1 = $suggestion[0][0];			$valideSuggLeft1 = $suggestion[0][1];		}		if(isset($suggestion[1][0]) and isset($suggestion[1][1]))		{			$listehebergementLeft2 = $suggestion[1][0];			$valideSuggLeft2 = $suggestion[1][1];		}		if(isset($suggestion[2][0]) and isset($suggestion[2][1]))		{			$listehebergementLeft3 = $suggestion[2][0];			$valideSuggLeft3 = $suggestion[2][1];		}	                //Prépare un client pour chaque type d'hébergement (photo catégorie avec son nom d'établissement)				$numbCat = $em->getRepository('MyAppGlobalBundle:Categories_hebergements')->getChoiceCategoryHebergement();                		                //On retourne les provinces non vides                               $tabTemp = $tabloFinal = $tabUnitaire = [];                //Retourne les catégories d'hébergements                $tabCategorieHeb = [7,3,5,4,2,10,6,8,9];                //Bucle les catégories pour préparer les tableaux de la vue                foreach($tabCategorieHeb as $key ){                     $tempHebergement = $em->getRepository('MyAppGlobalBundle:Hebergements')->getAfficheUnClientParCategorieHebergementVille($key, $idVille[0]->getId());                    if($tempHebergement != null){                        shuffle($tempHebergement);                        $tempHebergement[ array_rand($tempHebergement, 1) ];                                                     array_push($tabTemp, $tempHebergement);                        $unitaire = $tempHebergement[ array_rand($tempHebergement, 1) ];                                                     array_push($tabUnitaire, $unitaire);                    }                }    		$numbCat = $em->getRepository('MyAppGlobalBundle:Categories_hebergements')->getChoiceCategoryHebergement();			if(isset($tabUnitaire[4]) != null){					$aubergeclient = $tabUnitaire[4];		}		if(isset($tabUnitaire[1]) != null){			$giteclient = $tabUnitaire[1];		}		if(isset($tabUnitaire[3]) != null){			$centreclient = $tabUnitaire[3];		}		if(isset($tabUnitaire[2]) != null){			$residenceclient = $tabUnitaire[2];		}		                if(isset($tabUnitaire[6]) != null){                        $etablissementclient = $tabUnitaire[6];                }               		if(isset($tabUnitaire[0]) != null){			$hotelclient = $tabUnitaire[0];		}		if(isset($tabUnitaire[7]) != null){			$campingclient = $tabUnitaire[7];		}		if(isset($tabUnitaire[8]) != null){			$villageclient = $tabUnitaire[8];		}                if(isset($tabUnitaire[5]) != null){                        $insoliteclient = $tabUnitaire[5];                }              		//Récupère un client pour afficher dans la grande photo payante		$tableau = HebergementController::getValideTableauClient($tabTemp);		//Moteur de recherche		$listClient = $em->getRepository('MyAppGlobalBundle:Utilisateur')->getAutocompletionPortail();				$retourEngine = $this->getRechercheMoteurDeRecherche();          		if($retourEngine[0] == "form")		{                    $formEngine = $retourEngine[1];		}		if($retourEngine[0] == "request")		{                    //Retourne vers la fiche client                    return $retourEngine[1];		}                elseif($retourEngine[0] == "multiple")                {                                           //retourne vers la vue pour afficher tous les résultats de la recherche                    return $this->getSimuleGoogleSearch($retourEngine);                }		//Site map                $this->generePersistSiteMap2('/hebergements_ville_', '/accommodation_city_', $idVille[0], $em);                //Affiche l'image du Québec en saison		$controDefault = new DefaultController();		$saison = $controDefault->getSaisonQuebec();		//traitement formulaire reservation en ligne		$reservationEnLignePays = $controDefault->getReservationEnLignePays($em);                 //Liste des régiond pour la réservation                $fullListReservation = new DestinationController;                $reservationRegionAjax = $fullListReservation->hydrateDropDownListRegionReservation($em);                //Liste des villes pour la réservation                $reservationVilleAjax = $fullListReservation->hydrateDropDownListVilleReservation($em);		//Préparation de la view hebergementIndex.html.twig		return $this->render('MyAppGlobalBundle:Hebergement:hebergementVille.html.twig',				array(						'views'			 		=> $name,						'insection' 				=> "inSection",						'hebergement' 				=> 'valid',						'urlhebergement' 			=> '_hebergement',						'form' 					=> $form->createView(),						'qcleft1' 				=> $listehebergementLeft1,	// Liste des hôtels pour la région 1						'qcleft2' 				=> $listehebergementLeft2,	// " " région 2						'qcleft3' 				=> $listehebergementLeft3,	// " " région 3						'clientAleatoire'			=> $tableau,						'hebergementnoeudariane'                => $idVille,						'menuHebergement'			=> true,						'regionQcFooter'			=> (new AttraitsactivityController)->getListeFooterRegion($em)[0],						'regionOnFooter'			=> (new AttraitsactivityController)->getListeFooterRegion($em)[1],						'regionNbFooter'			=> (new AttraitsactivityController)->getListeFooterRegion($em)[2],						'hebergement'				=> true,						'formEngine'				=> $formEngine->createView(),						'listeClient'				=> $listClient,						'googledfp1'				=> "GR_HEBERGEMENT_01",						'googledfp2'				=> "GR_HEBERGEMENT_02",                                                'googledfp3'                            => "GR_HEBERGEMENT_03",						'numbCat'				=> $numbCat,						'auberge'				=> $aubergeclient,						'gite'					=> $giteclient,						'centreVacance'				=> $centreclient,						'residence'				=> $residenceclient,						'etablissement'				=> $etablissementclient,						'hotel'					=> $hotelclient,						'camping'				=> $campingclient,                                                'insolite'                              => $insoliteclient,						'village'				=> $villageclient,						'hebergementVille'			=> true,						'valideSuggLeft1H'			=> $valideSuggLeft1,						'valideSuggLeft2H'			=> $valideSuggLeft2,						'valideSuggLeft3H'			=> $valideSuggLeft3,						'saison'				=> $saison,						'reservationRegionAjax'                 => $reservationRegionAjax,						'reservationVilleAjax'                  => $reservationVilleAjax,						'reservationPays'			=> $reservationEnLignePays[0],						'reservationProvince'                   => $reservationEnLignePays[1],                                                'texteintrofr'                          => html_entity_decode($idVille[0]->getTexteFr()),                                                'texteintroen'                          => html_entity_decode($idVille[0]->getTexteEn()),                                                'metahebergementville'                  => true,				));	}			/*############################################################################################################*/	//		MINIS SITES DES CLIENTS	/*############################################################################################################*/	        	/**         * Méthode pour générer et persister le site map          */        public function generePersistSiteMap2($sectionFr, $sectionEn, $client, $em)        {                //On récupère la liste des urls                       $this->getValideUrlSiteMap($em, array($sectionFr.strtolower($client->getRepertoireFr()).'.html', $sectionEn.strtolower($client->getRepertoireEn()).'.html'));                       }                       	/**	 * Affiche les forfaits pour le mini site	 */	public function infoForfaitAction($name, $index)	{		$index = '#'.$index;		$reservationRegionAjax = $reservationVilleAjax = $restaurant = $categorie = $soinsExiste = $tablo = "";		//Néttoie le nom		$name = (new ControleDataSecureController)->getCleanNameGeography($name, "name");		//Gestionnaire des entités		$em = $this->getDoctrine()->getEntityManager();		//On récupère les info du client avec le nom du répertoire		$client = $em->getRepository('MyAppGlobalBundle:Attraits')->getNameAttrait($name);		if($client == null)		{			$client = $em->getRepository('MyAppGlobalBundle:Hebergements')->getNameHebergement($name);			//On récupère le restaurant 		//	$restaurant = $em->getRepository('MyAppGlobalBundle:Attraits')->getHebergementByAttrait($client[0]->getId());		}		if($client != null)		{                        $categorie = $client[0]->getCategorieHebergementId()[0];		}		//Récupère les informations complémentaires de cet attrait		$infoComplementaire = $em->getRepository('MyAppGlobalBundle:Attraits')->getInfoComplementaire($client[0]->getId());		//Recherche les forfaits du client		$listForfait = $em->getRepository('MyAppGlobalBundle:Forfaits_clients')->getListeTousLesForfaits($client[0]->getId());		if($listForfait != null)		{			$tablo = [$listForfait[array_rand($listForfait, 1)]];		}		//Formulaire de réservation en ligne.		$reservationOnline = new Reservation_Online();		$form = $this->container->get('form.factory')->create(new ReservationOnlineForm(), $reservationOnline);		//On regarde s'il existe des soints de santé		if($restaurant != null and $restaurant[0]->getSoinsSanteId()[0]->getNomFr()!= "Aucun soin de santé")                $soinsExiste = $restaurant[0]->getSoinsSanteId()[0]->getId();		//Site map                $this->generePersistSiteMap2('/forfaits_promotions_', '/packages_promotions_', $client[0], $em);		//Récupère les types de chambres et les chambres si le client en possède.		$chambre = $em->getRepository('MyAppGlobalBundle:Chambres')->getChambreEtTypeDeEtablissement($client[0]->getId());		$controDefault = new DefaultController();		$saison = $controDefault->getSaisonQuebec();		//traitement formulaire reservation en ligne		$reservationEnLignePays = $controDefault->getReservationEnLignePays($em);                //Liste des régiond pour la réservation                $fullListReservation = new DestinationController;                $reservationRegionAjax = $fullListReservation->hydrateDropDownListRegionReservation($em);                //Liste des villes pour la réservation                $reservationVilleAjax = $fullListReservation->hydrateDropDownListVilleReservation($em);		//Préparation de la view MiniSiteTemplate.html.twig		return $this->render('MyAppGlobalBundle:Hebergement:MiniSiteTemplate.html.twig',				array(						'insection' 			=> "inSection",						'hebergement' 			=> 'valid',						'urlhebergement' 		=> '_hebergement',						'views' 			=> $name,						'hidden' 			=> 'invisiblity',						'client'			=> $client,						'menuForfait'			=> "minisite",						'infoComplementaire'		=> $infoComplementaire, 						'restaurantDirection'		=> $restaurant,						'forfait'			=> $listForfait,						'forfaitAleatoire'		=> $tablo, 									'regionQcFooter'		=> (new AttraitsactivityController)->getListeFooterRegion($em)[0],						'regionOnFooter'		=> (new AttraitsactivityController)->getListeFooterRegion($em)[1],						'regionNbFooter'		=> (new AttraitsactivityController)->getListeFooterRegion($em)[2],						'index'				=> $index,						'categorieHebergement'		=> $categorie,						'form'				=> $form->createView(),						'soinsExiste'			=> $soinsExiste,						'googledfp1'			=> "GR_FORFAIT_01",						'googledfp2'			=> "GR_FORFAIT_02",                                                'googledfp3'			=> "GR_FORFAIT_03",						'chambre'			=> $chambre,						'saison'			=> $saison,						'reservationRegionAjax' 	=> $reservationRegionAjax,						'reservationVilleAjax'		=> $reservationVilleAjax,						'reservationPays'		=> $reservationEnLignePays[0],						'reservationProvince'		=> $reservationEnLignePays[1],                                                'dateToday'                     => date('m/d/Y'),					));	}		/**	 * Calcule la distance entre la cible et les activités	 */	private static function calculDistance($em, $client, $nomAction, $page, $displayPage)	{		$listeGps = $numb = "";		$testlistclientAttrait = $em->getRepository('MyAppGlobalBundle:Attraits')->getPreTraitementPourGpsPOurAttraits($client[0]->getId());			if($client[0]->getLatitude() != null or $client[0]->getLatitude() != 0 or $client[0]->getLongitude() != null or $client[0]->getLongitude() != 0)			{				$tabGps = [];				foreach($testlistclientAttrait as $gps)				{					//rayon de la terre					$r = 6366;					$lat1 = deg2rad($client[0]->getLatitude());					$lat2 = deg2rad($gps['latitude']);					$lon1 = deg2rad($client[0]->getLongitude());					$lon2 = deg2rad($gps['longitude']);					//calcul précis					$dp = 2 * asin(sqrt(pow (sin(($lat1-$lat2)/2) , 2) + cos($lat1)*cos($lat2)* pow( sin(($lon1-$lon2)/2) , 2)));					//sortie en km					$d = $dp * $r;					//On arrondit la valeur et on garde les id qui ont une distance de 50 km 					if(floor($d) <= 50)					{						array_push($tabGps, $gps['id']);					}				}				if($nomAction == "fluxrss") //recherche les nouveaux attraits pour les flux rss				{					$tab = [];					foreach($testlistclientAttrait as $ts)					{						array_push($tab, $ts['id']);					}					if(count($tab) > 1)					{						$index = array_rand($tab, 1);						$numb = $tab[$index];					}					else					{   						$numb = $testlistclientAttrait[0]['id'];					}					$listeGps = $em->getRepository('MyAppGlobalBundle:Attraits')->getListeGpsFluxRss($numb, date('Y m d'));				}				elseif($nomAction != "presentation")				{					$listeGps = $em->getRepository('MyAppGlobalBundle:Attraits')->getListeGps($page, $displayPage, $tabGps);				}				else				{						$tab = [];					foreach($testlistclientAttrait as $ts)					{						array_push($tab, $ts['id']);					}					if(count($tab) > 1)					{							$index = array_rand($tab, 1);						$numb = $tab[$index];					}					else 					{                                            if($testlistclientAttrait != null){						$numb = $testlistclientAttrait[0]['id'];                                            }					}                                        /*if($numb != null){                                            $listeGps = $em->getRepository('MyAppGlobalBundle:Clients')->getUnAttraitPourMiniSitePresentation($numb);                                        }*/				}			}		return $listeGps;	}		/**	 * Présentation des informations du client pour le mini site.	 */	public function  infoclientAction($name)	{		$restaurant = $critere = $reservationPays = $reservationProvince = $chambreSansCategorie = $reservationRegionAjax = $reservationVilleAjax = $categorie = $imageCorpo = $soinsExiste = "";		//Néttoie le nom.		$name = (new ControleDataSecureController)->getCleanNameGeography($name, "name");		//Gestionnaire des entités		$em = $this->getDoctrine()->getEntityManager();		//Recherche de l'établissement		$client = $em->getRepository('MyAppGlobalBundle:Hebergements')->getNameHebergement($name);		                //la categorie de l'hébergement pour dans le fil Ariane                $categorie = $client[0]->getCategorieHebergementId()[0];		//Récupère les informations complémentaires de cet attrait		$infoComplementaire = $em->getRepository('MyAppGlobalBundle:Attraits')->getInfoComplementaire($client[0]->getId());		//Récupère les types de chambres et les chambres si le client en possède.		$chambre = $em->getRepository('MyAppGlobalBundle:Chambres')->getChambreEtTypeDeEtablissement($client[0]->getId());		//Retourne le nombre de chambre de l'établissement'		$nbChambre = $tab = [];		if($chambre != null){			foreach($chambre as $tx)			{                            array_push($tab, $tx->getId());			}                        if($tab != null){                            //Retourne les chambres qui ont pas de catégorie                            $chambreSansCategorie = $em->getRepository('MyAppGlobalBundle:Chambres')->getChambreEtTypeDeEtablissementSansCategorie($client[0]->getId(), $tab);                        }		}		//fusionne les tableaux des chambres		if($chambreSansCategorie != null){			$tabloChambre2 = array_merge($chambre, $chambreSansCategorie);			$tabordre = [];			foreach($tabloChambre2 as $key){				array_push($tabordre, $key->getOrdreAffichage());			}			sort($tabordre);			$tabloChambre = $em->getRepository("MyAppGlobalBundle:Chambres")->getChambreClientTrier($client[0]->getId(), $tabordre);			}else{			$tabloChambre = $chambre;		}		//retourne le nombre de chambre		foreach($tabloChambre as $tw){			array_push($nbChambre, $tw->getQuantite());		}				//Récupère les devises et les autres informations sur l'établissement.		$devise = $em->getRepository('MyAppGlobalBundle:Hebergements')->getDeviseHebergement($client[0]->getId());                //si le résultat des devises est vide                if($devise == null){                    $devise = $em->getRepository("MyAppGlobalBundle:Hebergements")->getRetourneDevise($client[0]->getId());                }                //Récupère s'il existe le restaurant        //        $restaurant = $em->getRepository('MyAppGlobalBundle:Attraits')->getHebergementByAttrait($client[0]->getId());                //Recherche le dernier forfait ajouter par le client pour l'afficher en tête de liste                $forfait = $em->getRepository('MyAppGlobalBundle:Forfaits_clients')->getListeTousLesForfaits($client[0]->getId());                //Retourne les informations pour les corporatifs                $corporatif = $em->getRepository('MyAppGlobalBundle:Hebergements_salles_corporatives')->getListSalleCorporativeActiveDuClient($client[0]->getId());                //On stoke dans un tableau le nombre de salle corporative                $tabSalleCorpo = [];                if($corporatif != null){                        foreach($corporatif as $ts){                                array_push($tabSalleCorpo, $ts->getId());                        }                }                        //Si on a plus qu'une salle corporative on affiche un corpo aleatoire                if(sizeof($corporatif) > 1)                {                        $indexCorpo = array_rand($corporatif, 1);                        $corpo = $corporatif[$indexCorpo];                }                else                {	//Si le client ne possède pas ou n'a pas encore renseigné la section corporative                        $corpo = null;                }		//Récupère les id des style des hébergements                $tabStyle = [];                        foreach($client[0]->getStyleHebergementId() as $ts)                {                        array_push($tabStyle, $ts->getId());                }                if($tabStyle != null){                    //Récupère pour les critères semblables à cet établissement.                    $critere = $em->getRepository('MyAppGlobalBundle:Hebergements')->getCritereEtablissement($client[0]->getVilleId()->getId(), $tabStyle, $client[0]->getId());//On brasse et on récupère 6 clients aléatoires.                                 shuffle($critere);                                        $nbCritere = count($critere);                                        if($nbCritere >= 2)                    {                                               $quatreCritere = array_rand($critere, $nbCritere);                                  $tempCritere = [];                        foreach($quatreCritere as $val){                            array_push($tempCritere, $critere[$val]->getId());                        }                        $critere = null;                        $critere = $em->getRepository("MyAppGlobalBundle:Hebergements")->getListeClientPropositionMoteurRecherche($tempCritere);                    }                       elseif($nbCritere == 1){                        $tempCritere = $critere;                        $critere = null;                        $critere = $em->getRepository("MyAppGlobalBundle:Hebergements")->getListeClientPropositionMoteurRecherche($tempCritere[0]->getId());                    }                }		//Formulaire de réservation en ligne.		$reservationOnline = new Reservation_Online();		$form = $this->container->get('form.factory')->create(new ReservationOnlineForm(), $reservationOnline);		//On récupère une image de la galerie corporative pour l'afficher		if($corporatif != null){			$tabloImg = [];			foreach($corporatif as $salle)			{				foreach($salle->getGalerieCorpo() as $img)				{					array_push($tabloImg, $img);					$tabloImg = array_values(array_filter($tabloImg));					if($tabloImg != null){						$imageCorpo = $tabloImg[0];					}				}			}		}		if($restaurant != null)		{			if($restaurant[0]->getSoinsSanteId()[0] != null){				//On regarde s'il existe des soints de santé				if($restaurant[0]->getSoinsSanteId()[0]->getId() != 126)					$soinsExiste = $restaurant[0]->getSoinsSanteId()[0]->getId();			}		}		//Site map                 $this->generePersistSiteMap2('/accueil_', '/accueil_', $client[0], $em);               		$listeGps = self::calculDistance($em, $client, "presentation", "", "");		$controDefault = new DefaultController();		$saison = $controDefault->getSaisonQuebec();		//traitement formulaire reservation en ligne		$reservationEnLignePays = $controDefault->getReservationEnLignePays($em);		if($reservationEnLignePays != null){			$reservationPays = $reservationEnLignePays[0];			$reservationProvince = $reservationEnLignePays[1];		}                //Liste des régiond pour la réservation                $fullListReservation = new DestinationController;                $reservationRegionAjax = $fullListReservation->hydrateDropDownListRegionReservation($em);                //Liste des villes pour la réservation                $reservationVilleAjax = $fullListReservation->hydrateDropDownListVilleReservation($em);		//Préparation de la view MiniSiteTemplate.html.twig.		return $this->render('MyAppGlobalBundle:Hebergement:MiniSiteTemplate.html.twig',                        array(                                'insection' 				=> "inSection",                                'hebergement' 				=> 'valid',                                'urlhebergement' 			=> '_hebergement',                                'views' 				=> ucfirst($name),                                'hidden' 				=> 'invisiblity',                                'form' 					=> $form->createView(),                                'menuPresentation'			=> "minisite",                                'client'				=> $client,                                'devise' 				=> $devise,                                'cache'					=> true,                                'critere'				=> $critere,                                'restaurantDirection'                   => $restaurant,                                'chambre'				=> $tabloChambre,                                'forfait'				=> $forfait,                                'nbChambre'				=> array_sum($nbChambre),                                'salleCorporatif'			=> count($tabSalleCorpo),                                'aleatoireCorpo'			=> $corpo,                                'regionQcFooter'			=> (new AttraitsactivityController)->getListeFooterRegion($em)[0],                                'regionOnFooter'			=> (new AttraitsactivityController)->getListeFooterRegion($em)[1],                                'regionNbFooter'			=> (new AttraitsactivityController)->getListeFooterRegion($em)[2],                                'categorieHebergement'                  => $categorie,                                'infoComplementaire'                    => $infoComplementaire,                                'imageCorpo'				=> $imageCorpo,                                'soinsExiste'				=> $soinsExiste,                                'listeGps'				=> $listeGps,                                'googledfp1'				=> "GR_HEBERGEMENT_01",                                'googledfp2'				=> "GR_HEBERGEMENT_02",                                'googledfp3'				=> "GR_HEBERGEMENT_03",                                'metas'					=> true,                                'saison'				=> $saison,                                'reservationRegionAjax'                 => $reservationRegionAjax,                                'reservationVilleAjax'                  => $reservationVilleAjax,                                'reservationPays'			=> $reservationPays,                                'reservationProvince'                   => $reservationProvince,                                'textefr'				=> html_entity_decode($client[0]->getTexteDescriptionFr()),                                'texteen'				=> html_entity_decode($client[0]->getTexteDescriptionEn()),                        ));	}		/**	 * Affiche les informations des chambres de l'établissement pour le mini site	 */	public function infochambreAction($name)	{		$chambreAleatoire = $reservationRegionAjax = $reservationVilleAjax = $chambre = $restaurant = $categorie = $soinsExiste = "";		//Néttoie le nom		$name = (new ControleDataSecureController)->getCleanNameGeography($name, "nomRestaurant");		//Gestionnaire des entités		$em = $this->getDoctrine()->getEntityManager();		//On récupère les infos du client avec le nom du répertoire		$client = $em->getRepository('MyAppGlobalBundle:Hebergements')->getNameHebergement($name);		if($client != null)		{			$categorie = $client[0]->getCategorieHebergementId()[0];		}		//On récupère le restaurant 	//	$restaurant = $em->getRepository('MyAppGlobalBundle:Attraits')->getHebergementByAttrait($client[0]->getId());		//Récupère les types de chambres et les chambres si le client en possède.		$chambre = $em->getRepository('MyAppGlobalBundle:Chambres')->getChambreEtTypeDeEtablissement($client[0]->getId());		$concatChambre = $tab = $tabId = [];		//Stoke dans un tableau les id des chambres qui ont une catégorie		foreach($chambre as $th){			array_push($tabId, $th->getId());		}		//Liste des chambres sans catégorie		$chambreSansCategorie = $em->getRepository('MyAppGlobalBundle:Chambres')->getChambreEtTypeDeEtablissementSansCategorie($client[0]->getId(), $tabId);		if($chambreSansCategorie != null){			//Assemble les deux listes de chambre			$tabloChambre2 = array_merge($chambre, $chambreSansCategorie);			$tabordre = [];			foreach($tabloChambre2 as $key){				array_push($tabordre, $key->getOrdreAffichage());			}			sort($tabordre);			$tabloChambre = $em->getRepository("MyAppGlobalBundle:Chambres")->getChambreClientTrier($client[0]->getId(), $tabordre);		}else{			$tabloChambre = $chambre;		}		//On récupère une chambre aléatoire		foreach($tabloChambre as $ts)		{			array_push($tab, $ts->getId());		}		if(count($tabloChambre) > 1)		{			$index = array_rand($tab, 1);			$chambreAleatoire = $tabloChambre[$index];		}elseif(count($tabloChambre) == 1){			$chambreAleatoire = $tabloChambre[0];		}                                		//Récupère les informations complémentaires de cet attrait		$infoComplementaire = $em->getRepository('MyAppGlobalBundle:Attraits')->getInfoComplementaire($client[0]->getId());		//Formulaire de réservation en ligne.		$reservationOnline = new Reservation_Online();		$form = $this->container->get('form.factory')->create(new ReservationOnlineForm(), $reservationOnline);		//On regarde s'il existe des soints de santé		if($restaurant != null)		{			if($restaurant[0]->getSoinsSanteId()[0] != null){				if($restaurant[0]->getSoinsSanteId()[0]->getNomFr()!= "Aucun soin de santé")					$soinsExiste = $restaurant[0]->getSoinsSanteId()[0]->getId();			}		}		//Site map                $this->generePersistSiteMap2('/chambres_tarifs_', '/rooms_rates_', $client[0], $em);   		//Recherche les forfaits du client		$listForfait = $em->getRepository('MyAppGlobalBundle:Forfaits_clients')->getListeTousLesForfaits($client[0]->getId());		$controDefault = new DefaultController();		$saison = $controDefault->getSaisonQuebec();		//traitement formulaire reservation en ligne		$reservationEnLignePays = $controDefault->getReservationEnLignePays($em);                //Liste des régiond pour la réservation                $fullListReservation = new DestinationController;                $reservationRegionAjax = $fullListReservation->hydrateDropDownListRegionReservation($em);                //Liste des villes pour la réservation                $reservationVilleAjax = $fullListReservation->hydrateDropDownListVilleReservation($em);		//Préparation de la view MiniSiteTemplate.html.twig		return $this->render('MyAppGlobalBundle:Hebergement:MiniSiteTemplate.html.twig',				array(						'insection' 				=> "inSection",						'hebergement' 				=> 'valid',						'urlhebergement' 			=> '_hebergement',						'views' 				=> $name,						'hidden' 				=> 'invisiblity',						'client'				=> $client,						'menuChambre'				=> "minisite",						'infoComplementaire'                    => $infoComplementaire, 						'restaurantDirection'                   => $restaurant,						'chambre'				=> $tabloChambre,						'chambreAleatoire'			=> $chambreAleatoire,						'regionQcFooter'			=> (new AttraitsactivityController)->getListeFooterRegion($em)[0],						'regionOnFooter'			=> (new AttraitsactivityController)->getListeFooterRegion($em)[1],						'regionNbFooter'			=> (new AttraitsactivityController)->getListeFooterRegion($em)[2],						'categorieHebergement'                  => $categorie,						'form'					=> $form->createView(),						'soinsExiste'				=> $soinsExiste,						'googledfp1'				=> "GR_HEBERGEMENT_01",						'googledfp2'				=> "GR_HEBERGEMENT_02",                                                'googledfp3'				=> "GR_HEBERGEMENT_03",						'forfait'				=> $listForfait,						'saison'				=> $saison,						'reservationRegionAjax'                 => $reservationRegionAjax,						'reservationVilleAjax'                  => $reservationVilleAjax,						'reservationPays'			=> $reservationEnLignePays[0],						'reservationProvince'                   => $reservationEnLignePays[1],						'datetoday'				=> new \DateTime("now"),                                                                                    				));	} 		/**	 * Affiche la section restaurant pour le mini site.	 */	public function infoRestaurantAction($name)	{			$reservationRegionAjax = $reservationVilleAjax = $categorie = $soinsExiste = "";		//On valide le nom en argument		$name = (new ControleDataSecureController)->getCleanNameGeography($name, "name");		//Gestionnaire des entités		$em = $this->getDoctrine()->getEntityManager();		//On récupère les info du client avec le nom du repertoire		$client = $em->getRepository('MyAppGlobalBundle:Attraits')->getNameAttrait($name);		//On récupère une categorie d'hébergement si le client possède un hébergement		if($client[0]->getHebergementId() != null)		{			$categorie = $client[0]->getHebergementId()->getCategorieHebergementId()[0];		}		//Récupère les informations complémentaires de cet attrait		$infoComplementaire = $em->getRepository('MyAppGlobalBundle:Attraits')->getInfoComplementaire($client[0]->getId());		//Compte le nombre de mode de paiement		if($infoComplementaire != null)			$nbMP = count($infoComplementaire[0]->getPaiementId());		else 			$nbMP = null;		//Compte ses spécialitées culinaires		if($infoComplementaire != null)		{			$typeCuisine = []; //On stocke dans un tableau les types de cuisines			foreach($infoComplementaire as $tr)			{				array_push($typeCuisine, $tr->getCuisineId());			}			$nbCuisine = count($typeCuisine);		}		else 			$nbCuisine = null;		//S'il existe un ou des forfaits gastronomiques on les récupèrent		$forfaitGastronomique = $em->getRepository("MyAppGlobalBundle:Forfaits_clients")->getForfaitsGastronomiques($client[0]->getId());		//Formulaire de réservation en ligne.		$reservationOnline = new Reservation_Online();		$form = $this->container->get('form.factory')->create(new ReservationOnlineForm(), $reservationOnline);		//On regarde s'il existe des soints de santé		if($client[0]->getHebergementId()->getId() != null){			$soinsExiste = $em->getRepository('MyAppGlobalBundle:Attraits')->getRechercheLesSoinsMiniSite($client[0]->GetHebergementId()->getId());		}else{			$soinsExiste = $em->getRepository('MyAppGlobalBundle:Attraits')->getRechercheLesSoinsMiniSite($client[0]->getId());		}		//Site map                $this->generePersistSiteMap2('/restaurant_', '/restaurant_', $client[0], $em); 		//Récupère les types de chambres et les chambres si le client en possède.		$chambre = $em->getRepository('MyAppGlobalBundle:Chambres')->getChambreEtTypeDeEtablissement($client[0]->getHebergementId()->getId());		//Recherche les forfaits du client		$listForfait = $em->getRepository('MyAppGlobalBundle:Forfaits_clients')->getListeTousLesForfaits($client[0]->getId());		if($listForfait == null){			$listForfait = $em->getRepository('MyAppGlobalBundle:Forfaits_clients')->getListeTousLesForfaits($client[0]->getHebergementId()->getId());		}		$controDefault = new DefaultController();		$saison = $controDefault->getSaisonQuebec();		//traitement formulaire reservation en ligne		$reservationEnLignePays = $controDefault->getReservationEnLignePays($em);                //Liste des régiond pour la réservation                $fullListReservation = new DestinationController;                $reservationRegionAjax = $fullListReservation->hydrateDropDownListRegionReservation($em);                //Liste des villes pour la réservation                $reservationVilleAjax = $fullListReservation->hydrateDropDownListVilleReservation($em);		//Préparation de la view MiniSiteTemplate.html.twig		return $this->render('MyAppGlobalBundle:Hebergement:MiniSiteTemplate.html.twig',				array(							'insection' 				=> "inSection",						'hebergement' 				=> 'valid',						'urlhebergement' 			=> '_hebergement', 					  	'views' 				=> $name,					  	'hidden' 				=> 'invisiblity',					  	'form' 					=> $form->createView(),						'client'				=> $client,						'infoComplementaire'                    => $infoComplementaire,						'nbMP'					=> $nbMP,						'nbCuisine'				=> $nbCuisine,						'menuRestaurant'			=> "minisite",						'regionQcFooter'			=> (new AttraitsactivityController)->getListeFooterRegion($em)[0],						'regionOnFooter'			=> (new AttraitsactivityController)->getListeFooterRegion($em)[1],						'regionNbFooter'			=> (new AttraitsactivityController)->getListeFooterRegion($em)[2],						'categorieHebergement'                  => $categorie,						'forfaitGastronomique'                  => $forfaitGastronomique,						'soinsExiste'				=> $soinsExiste,						'googledfp1'				=> "GR_RESTAURANT_01",						'googledfp2'				=> "GR_RESTAURANT_02",                                                'googledfp3'				=> "GR_RESTAURANT_03",						'chambre'				=> $chambre,						'forfait'				=> $listForfait,						'saison'				=> $saison,						'reservationRegionAjax'                 => $reservationRegionAjax,						'reservationVilleAjax'                  => $reservationVilleAjax,						'reservationPays'			=> $reservationEnLignePays[0],						'reservationProvince'                   => $reservationEnLignePays[1],				));	}		/**	 * Affiche les informations sur les activités et services pour le mini site.	 */	public function infoactiviteAction($name, $page)	{		$total = $displaypage = $listeGps = $reservationRegionAjax = $reservationVilleAjax = $restaurant = $categorie = $soinsExiste = "";		$numberPaginate = 10;		//Néttoie le nom		$name = (new ControleDataSecureController)->getCleanNameGeography($name, "nomRestaurant");		//Gestionnaire des entités		$em = $this->getDoctrine()->getEntityManager();		//On récupère les infos du client avec le nom du répertoire		//$client = $em->getRepository('MyAppGlobalBundle:Attraits')->getNameAttrait($name);		//if($client == null)		//{                $client = $em->getRepository('MyAppGlobalBundle:Hebergements')->getNameHebergement($name);                //On récupère le restaurant           //      $restaurant = $em->getRepository('MyAppGlobalBundle:Attraits')->getHebergementByAttrait($client[0]->getId());		//}		if($client != null )		{			$categorie = $client[0]->getCategorieHebergementId()[0];		}			//Récupère les informations complémentaires de cet hébergement		$services = $em->getRepository('MyAppGlobalBundle:Hebergements')->getServiceHebergement($client[0]->getId());		//Récupère les informations complémentaires de cet attrait		$infoComplementaire = $em->getRepository('MyAppGlobalBundle:Attraits')->getInfoComplementaire($client[0]->getId());		//On récupère les activités		//$activites = $em->getRepository('MyAppGlobalBundle:Hebergements')->getActivitesHebergement($client[0]->getId());		//Formulaire de réservation en ligne.		$reservationOnline = new Reservation_Online();		$form = $this->container->get('form.factory')->create(new ReservationOnlineForm(), $reservationOnline);		//On regarde s'il existe des soints de santé		if($restaurant != null and $restaurant[0]->getSoinsSanteId()[0] != null)		{                    if($restaurant[0]->getSoinsSanteId()[0]->getNomFr()!= "Aucun soin de santé")			$soinsExiste = $restaurant[0]->getSoinsSanteId()[0]->getId();		}	                //Récupère les distances des activités de cet hébergement                $distance = $em->getRepository('MyAppGlobalBundle:Distances')->getTriLesDistancesParNomFrASC($client[0]->getId());                //on néttoie les distances des chaines et on les range par ordre croissant en surrpimant de leur doublon                 $tab = [];                $tabsearch = ["km", "m"];                foreach($distance as $key){                    array_push($tab, trim(str_ireplace($tabsearch, '', $key->getDistance())));                }                  $tabUnique = array_unique($tab);                sort($tabUnique);                                $tabEmpty = $tabDistance = [];                       for($i = 0; $i < count($tabUnique); $i++)                {                                   $distanceTrier = $em->getRepository("MyAppGlobalBundle:Distances")->getRechercheLesDistancesDuClient($tabUnique[$i], $client[0]->getId());                                    array_push($tabEmpty, $distanceTrier);                }                  foreach($tabEmpty as $key) //Regroupe tout dans un tableau une seule dimension                {                    foreach($key as $val)                    {                        array_push($tabDistance, $val);                    }                }		//Site map                $this->generePersistSiteMap2('/activites_services_', '/activities_services_', $client[0], $em);		//Récupère les types de chambres et les chambres si le client en possède.		$chambre = $em->getRepository('MyAppGlobalBundle:Chambres')->getChambreEtTypeDeEtablissement($client[0]->getId());		//Recherche les forfaits du client		$listForfait = $em->getRepository('MyAppGlobalBundle:Forfaits_clients')->getListeTousLesForfaits($client[0]->getId());		//Récupère le nombre de client approuvés		$listeAttraitApprouve = $em->getRepository('MyAppGlobalBundle:Attraits')->getCountListeGps();		if($listeAttraitApprouve[0]['nbActif'] != 0){                    //Contrôle la pagination                    $total = $listeAttraitApprouve[0]['nbActif'];                    //Arrondit à l'entier supérieur                    $displaypage = ceil($total/$numberPaginate);                    $page = (new ControleDataSecureController)->getValideEntierPagination($page, $displaypage);                    //Liste des activités                    $listeGps = self::calculDistance($em, $client, "activite", $page, $numberPaginate);                }		//Retourne l'affichage 		//$hebergement = $em->getRepository('MyAppGlobalBundle:Hebergements')->getAdminHebergement($page, $numberPaginate);		$controDefault = new DefaultController();		$saison = $controDefault->getSaisonQuebec();		//traitement formulaire reservation en ligne		$reservationEnLignePays = $controDefault->getReservationEnLignePays($em);                //Liste des régiond pour la réservation                $fullListReservation = new DestinationController;                $reservationRegionAjax = $fullListReservation->hydrateDropDownListRegionReservation($em);                //Liste des villes pour la réservation                $reservationVilleAjax = $fullListReservation->hydrateDropDownListVilleReservation($em);		//Préparation de la view MiniSiteTemplate.html.twig		return $this->render('MyAppGlobalBundle:Hebergement:MiniSiteTemplate.html.twig',                    array(                            'insection' 			=> "inSection",                            'hebergement' 			=> 'valid',                            'urlhebergement' 			=> '_hebergement',                            'views' 				=> $name,                            'hidden' 				=> 'invisiblity',                            'client'				=> $client,                            'menuService'			=> "minisite",                            'services'				=> $services,                             //'activites'			=> $activites,                            'restaurantDirection'               => $restaurant,                            'regionQcFooter'			=> (new AttraitsactivityController)->getListeFooterRegion($em)[0],                            'regionOnFooter'			=> (new AttraitsactivityController)->getListeFooterRegion($em)[1],                            'regionNbFooter'			=> (new AttraitsactivityController)->getListeFooterRegion($em)[2],                            'categorieHebergement'              => $categorie,                            'infoComplementaire'                => $infoComplementaire,                            'form'                              => $form->createView(),                            'soinsExiste'			=> $soinsExiste,                            'distance'				=> $tabDistance,                            'listeGps'				=> $listeGps,                            'googledfp1'			=> "GR_ATTRAIT_01",                            'googledfp2'			=> "GR_ATTRAIT_02",                            'googledfp3'			=> "GR_ATTRAIT_03",                            'chambre'				=> $chambre,                            'forfait'				=> $listForfait,                            'page'				=> $page,                            'displaypage'			=> $displaypage,                            'total'				=> $total,                            'saison'				=> $saison,                            'reservationRegionAjax'             => $reservationRegionAjax,                            'reservationVilleAjax'              => $reservationVilleAjax,                            'reservationPays'			=> $reservationEnLignePays[0],                            'reservationProvince'               => $reservationEnLignePays[1],                    ));	}		/**	 * Affiche les informations sur le corporatif et évenements spéciaux pour le mini site.	 */	public function infocorporatifAction($name)	{		$reservationRegionAjax = $reservationVilleAjax = $restaurant = $forfait = $categorie = $soinsExiste = "";		//Nettoyage le nom		$name = (new ControleDataSecureController)->getCleanNameGeography($name, "nomRestaurant");		//Gestionnaire des entités		$em = $this->getDoctrine()->getEntityManager();		//traitement formulaire reservation en ligne		$controDefault = new DefaultController();		$saison = $controDefault->getSaisonQuebec();		//traitement formulaire reservation en ligne		$reservationEnLignePays = $controDefault->getReservationEnLignePays($em);		//On récupère les info du client avec le nom du répertoire		$client = $em->getRepository('MyAppGlobalBundle:Hebergements')->getNameHebergement($name);		if($client != null)		{			$categorie = $client[0]->getCategorieHebergementId()[0];//On récupère la première catégorie d'hébergement		}		//Récupère les types de chambres et les chambres si le client en possède.		$chambre = $em->getRepository('MyAppGlobalBundle:Chambres')->getChambreEtTypeDeEtablissement($client[0]->getId());		//Recherche les forfaits du client		$listForfait = $em->getRepository('MyAppGlobalBundle:Forfaits_clients')->getListeTousLesForfaits($client[0]->getId());		//On récupère le restaurant 	//	$restaurant = $em->getRepository('MyAppGlobalBundle:Attraits')->getHebergementByAttrait($client[0]->getId());		//On regarde s'il existe des soints de santé		if($restaurant != null and $restaurant[0]->getSoinsSanteId()[0]->getNomFr()!= "Aucun soin de santé")			$soinsExiste = $restaurant[0]->getSoinsSanteId()[0]->getId();		//On récupère les documents corporatifs		$corpo = $em->getRepository('MyAppGlobalBundle:Hebergements_salles_corporatives')->getListSalleCorporativeActiveDuClient($client[0]->getId());		$tablo = [];		//On stocke dans un tableau les documents des listes de salles fr 		foreach($corpo as $ts)		{			array_push($tablo, $ts->getFichierListeSallesFr());			array_push($tablo, $ts->getFichierListeSallesEn());			array_push($tablo, $ts->getFichierPlanSallesFr());			array_push($tablo, $ts->getFichierPlanSallesEn());			$tablo = array_values(array_filter($tablo));		}		//Retourne si le client à des forfaits affaires		$forfaitAffaire = $em->getRepository('MyAppGlobalBundle:Forfaits_clients')->getListeForfaitsAffaires($client[0]->getId());		//Recherche les chambre de cet établissement		$chambre = $em->getRepository('MyAppGlobalBundle:Chambres')->getRetourneChambreCorpo($client[0]->getId());		$tab = [];		foreach($chambre as $ts){			array_push($tab, $ts->getQuantite());		}                //Liste des régiond pour la réservation                $fullListReservation = new DestinationController;                $reservationRegionAjax = $fullListReservation->hydrateDropDownListRegionReservation($em);                //Liste des villes pour la réservation                $reservationVilleAjax = $fullListReservation->hydrateDropDownListVilleReservation($em);		//Récupère les informations complémentaires de cet attrait		$infoComplementaire = $em->getRepository('MyAppGlobalBundle:Attraits')->getInfoComplementaire($client[0]->getId());		//TRAITEMENT D'ENVOIE POUR LA DEMANDE D'INFORMATION		$lang = $this->container->get('session')->getLocale();		if($lang == "fr"){			$form = $this->container->get('form.factory')->create(new DemandeInformationType());		}else{			$form = $this->container->get('form.factory')->create(new DemandeInformationEnType());		}		// On récupère la requête.		$request = $this->get('request');		// On vérifie qu'elle est de type « POST ».		if( $request->getMethod() == 'POST' )		{			// On fait le lien Requête <-> Formulaire.			$form->bindRequest($request);			//Transmet le formulaire à la méthode d'envoie du courriel			$sender = $form->getData();                        $message = self::getEnvoyerEmail($sender, $client);		   	if($message == "confirmation")		   	{			    return $this->render('MyAppGlobalBundle:Hebergement:MiniSiteTemplate.html.twig',			    		array(			    				'insection' 				=> "inSection",			    				'hebergement' 				=> 'valid',			    				'urlhebergement' 			=> '_hebergement',			    				'views' 				=> $name,			    				'hidden' 				=> 'invisiblity',			    				'client'				=> $client,			    				'menuCorporatif'			=> "minisite",			    				'infoComplementaire'                    => $infoComplementaire,			    				'restaurantDirection'                   => $restaurant,			    				'corpo'					=> $corpo,			    				'forfaitAffaire'			=> $forfaitAffaire,			    				'nbSalle'				=> sizeof($corpo),			    				'nbChambre'				=> array_sum($tab),			    				'regionQcFooter'			=> (new AttraitsactivityController)->getListeFooterRegion($em)[0],							'regionOnFooter'                        => (new AttraitsactivityController)->getListeFooterRegion($em)[1],							'regionNbFooter'                        => (new AttraitsactivityController)->getListeFooterRegion($em)[2],			    				'categorieHebergement'                  => $categorie,			    				'tablo_doc'				=> $tablo,			    				'form'					=> $form->createView(),			    				'messageEnvoye'				=> true,			    				'nomClientfr'				=> $client[0]->getNomFr(),			    				'soinsExiste'				=> $soinsExiste,			    				'googledfp1'				=> "GR_CORPORATIF_01",			    				'googledfp2'				=> "GR_CORPORATIF_02",                                                        'googledfp3'				=> "GR_CORPORATIF_03",			    				'chambre'				=> $chambre,			    				'forfait'				=> $listForfait,			    				'dateToday'				=> date('Y-m-d'),			    				'saison'				=> $saison,			    				'reservationRegionAjax'                 => $reservationRegionAjax,			    				'reservationVilleAjax'                  => $reservationVilleAjax,			    				'reservationPays'			=> $reservationEnLignePays[0],			    				'reservationProvince'                   => $reservationEnLignePays[1],			    		));		   	}  		}		//Site map                $this->generePersistSiteMap2('/corporatif_evenement_', '/corporate_event_', $client[0], $em);		//Préparation de la view MiniSiteTemplate.html.twig		return $this->render('MyAppGlobalBundle:Hebergement:MiniSiteTemplate.html.twig',				array(						'insection' 				=> "inSection",						'hebergement' 				=> 'valid',						'urlhebergement' 			=> '_hebergement',						'views' 				=> $name,						'hidden' 				=> 'invisiblity',						'client'				=> $client,						'menuCorporatif'			=> "minisite",						'infoComplementaire'                    => $infoComplementaire, 						'restaurantDirection'                   => $restaurant,						'corpo'					=> $corpo,						'forfaitAffaire'			=> $forfaitAffaire,						'nbSalle'				=> sizeof($corpo),						'nbChambre'				=> array_sum($tab),						'regionQcFooter'			=> (new AttraitsactivityController)->getListeFooterRegion($em)[0],						'regionOnFooter'			=> (new AttraitsactivityController)->getListeFooterRegion($em)[1],						'regionNbFooter'			=> (new AttraitsactivityController)->getListeFooterRegion($em)[2],						'categorieHebergement'                  => $categorie,						'tablo_doc'				=> $tablo,						'form'					=> $form->createView(),						'soinsExiste'				=> $soinsExiste,						'googledfp1'				=> "GR_CORPORATIF_01",						'googledfp3'				=> "GR_CORPORATIF_02",                                                'googledfp2'				=> "GR_CORPORATIF_03",						'chambre'				=> $chambre,						'forfait'				=> $listForfait,						'saison'				=> $saison,						'reservationRegionAjax'                 => $reservationRegionAjax,						'reservationVilleAjax'                  => $reservationVilleAjax,						'reservationPays'			=> $reservationEnLignePays[0],						'reservationProvince'                   => $reservationEnLignePays[1],				));	}		/**	 * Affiche la galerie photo pour le mini site	 */	public function infogaleryAction( $name)	{		$reservationRegionAjax = $reservationVilleAjax = $restaurant = $categorie = $soinsExiste = "";		//Néttoie le nom		$name = (new ControleDataSecureController)->getCleanNameGeography($name, "nomRestaurant");		//Gestionnaire des entités		$em = $this->getDoctrine()->getEntityManager();		//On récupère les infos du client avec le nom du répertoire		//$client = $em->getRepository('MyAppGlobalBundle:Attraits')->getNameAttrait($name);		//if($client == null)		//{			$client = $em->getRepository('MyAppGlobalBundle:Hebergements')->getNameHebergement($name);			//On récupère le restaurant 		//	$restaurant = $em->getRepository('MyAppGlobalBundle:Attraits')->getHebergementByAttrait($client[0]->getId());		//}		if($client != null)		{			$categorie = $client[0]->getCategorieHebergementId()[0];		}		//$galery = $em->getRepository('MyAppGlobalBundle:Galery')->getRechercheGaleriePhotoHebergement($client[0]->getId());				//Récupère les informations complémentaires de cet attrait		$infoComplementaire = $em->getRepository('MyAppGlobalBundle:Attraits')->getInfoComplementaire($client[0]->getId());		//Formulaire de réservation en ligne.		$reservationOnline = new Reservation_Online();		$form = $this->container->get('form.factory')->create(new ReservationOnlineForm(), $reservationOnline);		//On regarde s'il existe des soints de santé		if($restaurant != null and $restaurant[0]->getSoinsSanteId()[0]->getNomFr()!= "Aucun soin de santé")			$soinsExiste = $restaurant[0]->getSoinsSanteId()[0]->getId();		//Site map                $this->generePersistSiteMap2('/galerie_photo_', '/photo_gallery_', $client[0], $em);		//Récupère les types de chambres et les chambres si le client en possède.		$chambre = $em->getRepository('MyAppGlobalBundle:Chambres')->getChambreEtTypeDeEtablissement($client[0]->getId());		//Recherche les forfaits du client		$listForfait = $em->getRepository('MyAppGlobalBundle:Forfaits_clients')->getListeTousLesForfaits($client[0]->getId());		$controDefault = new DefaultController();		$saison = $controDefault->getSaisonQuebec();		//traitement formulaire reservation en ligne		$reservationEnLignePays = $controDefault->getReservationEnLignePays($em);                //Liste des régiond pour la réservation                $fullListReservation = new DestinationController;                $reservationRegionAjax = $fullListReservation->hydrateDropDownListRegionReservation($em);                //Liste des villes pour la réservation                $reservationVilleAjax = $fullListReservation->hydrateDropDownListVilleReservation($em);		//Préparation de la view MiniSiteTemplate.html.twig		return $this->render('MyAppGlobalBundle:Hebergement:MiniSiteTemplate.html.twig',				array(						'insection' 				=> "inSection",						'hebergement' 				=> 'valid',						'urlhebergement' 			=> '_hebergement',						'views' 				=> $name,						'hidden' 				=> 'invisiblity',						'client'                                => $client,						'menuGalerie'				=> "minisite",						'infoComplementaire'                    => $infoComplementaire, 						'restaurantDirection'                   => $restaurant,						//'galery'				=> $galery,						'regionQcFooter'			=> (new AttraitsactivityController)->getListeFooterRegion($em)[0],						'regionOnFooter'			=> (new AttraitsactivityController)->getListeFooterRegion($em)[1],						'regionNbFooter'			=> (new AttraitsactivityController)->getListeFooterRegion($em)[2],						'categorieHebergement'                  => $categorie,						'form'					=> $form->createView(),						'soinsExiste'				=> $soinsExiste,						'googledfp1'				=> "GR_HEBERGEMENT_01",						'googledfp2'				=> "GR_HEBERGEMENT_02",                                                'googledfp3'				=> "GR_HEBERGEMENT_03",						'chambre'				=> $chambre,						'forfait'				=> $listForfait,						'saison'				=> $saison,						'reservationRegionAjax'                 => $reservationRegionAjax,						'reservationVilleAjax'                  => $reservationVilleAjax,						'reservationPays'			=> $reservationEnLignePays[0],						'reservationProvince'                   => $reservationEnLignePays[1],				));	}		/**	 * Affiche le centre de santé et spa pour le mini site.	 */	public function infosoinAction($name)	{		$reservationRegionAjax = $reservationVilleAjax = $restaurant = $categorie = $soinsExiste = "";		//Néttoie le nom		$name = (new ControleDataSecureController)->getCleanNameGeography($name, "nomRestaurant");		//Gestionnaire des entités		$em = $this->getDoctrine()->getEntityManager();		//On récupère les info du client avec le nom du répertoire		$client = $em->getRepository('MyAppGlobalBundle:Attraits')->getNameAttrait($name);		//Attrait		if($client != null)		{			//Recherche les forfaits santé du client			$listeForfaitSante = $em->getRepository('MyAppGlobalBundle:Forfaits_clients')->getListeForfaitsSoinsSanteSansHebergement($client[0]->getId());			//Liste des soins 			$listeSoin = $em->getRepository('MyAppGlobalBundle:Attraits')->getRechercheLesSoinsMiniSite($client[0]->getId());						//On regarde si un hébergement existe			if($client[0]->getHebergementId() != null)			{				$test = $em->getRepository('MyAppGlobalBundle:Hebergements')->getAfficheUnClientHebergement($client[0]->getHebergementId()->getId());				//On récupère la première catégorie d'hébergement (fil d'ariane)				if($test != null)				{					$categorie = $test[0]->getCategorieHebergementId()[0];				}			}			//Liste des autre forfaits autre que les soins de santé			$listeForfait = $em->getRepository('MyAppGlobalBundle:Forfaits_clients')->getListeTousLesForfaits($client[0]->getId());				}		//Hébergement		if($client == null)		{			$client = $em->getRepository('MyAppGlobalBundle:Hebergements')->getNameHebergement($name);			//On récupère le restaurant 			$restaurant = $em->getRepository('MyAppGlobalBundle:Attraits')->getHebergementByAttrait($client[0]->getId());			$listeSoin = $restaurant;							//On récupère la première catégorie d'hébergement (fil d'ariane)			if($client != null)			{				$categorie = $client[0]->getCategorieHebergementId()[0];			}			$etablissement = $em->getRepository('MyAppGlobalBundle:Hebergements')->getAfficheUnClientHebergement($client[0]->getId());			//On récupère la première catégorie d'hébergement (fil d'ariane)			if($etablissement != null)			{				$categorie = $etablissement[0]->getCategorieHebergementId()[0];			}			//Recherche les forfaits santé du client			$listeForfaitSante = $em->getRepository('MyAppGlobalBundle:Forfaits_clients')->getListeForfaitsSoinsSanteAvecHebergement($client[0]->getId());			//Liste des autre forfaits autre que les soins de santé			$listeForfait = $em->getRepository('MyAppGlobalBundle:Forfaits_clients')->getListeTousLesForfaits($client[0]->getId());		}			//Récupère les informations complémentaires de cet attrait		$infoComplementaire = $em->getRepository('MyAppGlobalBundle:Attraits')->getInfoComplementaire($client[0]->getId());		//On regarde s'il existe des soints de santé		if($restaurant != null)		{			if($restaurant[0]->getSoinsSanteId()[0]->getNomFr()!= "Aucun soin de santé")				$soinsExiste = $restaurant[0]->getSoinsSanteId()[0]->getId();		}		//SITE MAP                $this->generePersistSiteMap2('/centre_sante_', '/health_center_', $client[0], $em);		//Récupère les types de chambres et les chambres si le client en possède.		$chambre = $em->getRepository('MyAppGlobalBundle:Chambres')->getChambreEtTypeDeEtablissement($client[0]->getId());		//Tri les soins de santé par catégorie de type de soin.		$tabIdSoin = [];		foreach($listeSoin as $ts)		{			foreach($ts->getSoinsSanteId() as $tx)			{				array_push($tabIdSoin, $tx->getId());			}		}		$enleveAucunSoin = array_values($tabIdSoin);		$tabIdSoin = [];		foreach($enleveAucunSoin as $tr)		{			if($tr != 126)				array_push($tabIdSoin, $tr);		}		$soinSante = $em->getRepository('MyAppGlobalBundle:Soins_sante')->getListTypeSoinPourMinisite($tabIdSoin);		//On tri les soins par types		$tabMassotherapie = [];		$tabHydrotherapie = [];		$tabSoinsCorporel = [];		$tabSoinEsthetique = [];		$tabServiceComplementaire = [];		$tabServiceSpeciaux = [];		$tabThermotherapie = [];		foreach($soinSante as $tr)		{			foreach($tr as $ty)			{				if($ty->getTypesSoinsSanteId()->getId() == 1)				{					array_push($tabMassotherapie, $ty);				}				if($ty->getTypesSoinsSanteId()->getId() == 2)				{					array_push($tabHydrotherapie, $ty);				}				if($ty->getTypesSoinsSanteId()->getId() == 3)				{					array_push($tabSoinsCorporel, $ty);				}				if($ty->getTypesSoinsSanteId()->getId() == 4)				{					array_push($tabSoinEsthetique, $ty);				}				if($ty->getTypesSoinsSanteId()->getId() == 5)				{					array_push($tabServiceComplementaire, $ty);				}				if($ty->getTypesSoinsSanteId()->getId() == 6)				{					array_push($tabServiceSpeciaux, $ty);				}				if($ty->getTypesSoinsSanteId()->getId() == 7)				{					array_push($tabThermotherapie, $ty);				}				}		}		$controDefault = new DefaultController();		$saison = $controDefault->getSaisonQuebec();		//traitement formulaire reservation en ligne		$reservationEnLignePays = $controDefault->getReservationEnLignePays($em);		//Formulaire de réservation en ligne.		$reservationOnline = new Reservation_Online();		$form = $this->container->get('form.factory')->create(new ReservationOnlineForm(), $reservationOnline);                //Liste des régiond pour la réservation                $fullListReservation = new DestinationController;                $reservationRegionAjax = $fullListReservation->hydrateDropDownListRegionReservation($em);                //Liste des villes pour la réservation                $reservationVilleAjax = $fullListReservation->hydrateDropDownListVilleReservation($em);		//Préparation de la view MiniSiteTemplate.html.twig		return $this->render('MyAppGlobalBundle:Hebergement:MiniSiteTemplate.html.twig',				array(						'insection' 				=> "inSection",						'hebergement' 				=> 'valid',						'urlhebergement' 			=> '_hebergement',						'views' 				=> $name,						'hidden' 				=> 'invisiblity',						'client'				=> $client,						'menuSoinSante'				=> "minisite",						'infoComplementaire'                    => $infoComplementaire, 						'restaurantDirection'                   => $restaurant,						'regionQcFooter'			=> (new AttraitsactivityController)->getListeFooterRegion($em)[0],						'regionOnFooter'			=> (new AttraitsactivityController)->getListeFooterRegion($em)[1],						'regionNbFooter'			=> (new AttraitsactivityController)->getListeFooterRegion($em)[2],						'categorieHebergement'                  => $categorie,						'forfait'				=> $listeForfait,						'menuCentreSante'			=> true,						'soinsExiste'				=> $soinsExiste,						'googledfp1'				=> "GR_SANTE_01",						'googledfp2'				=> "GR_SANTE_02",                                                'googledfp3'				=> "GR_SANTE_03",						'chambre'				=> $chambre,						'listeForfaitSante'			=> $listeForfaitSante,						'masso'					=> $tabMassotherapie, 						'hydro'					=> $tabHydrotherapie, 						'soincorpo'				=> $tabSoinsCorporel, 						'soinesthe'				=> $tabSoinEsthetique, 						'servicecomple'				=> $tabServiceComplementaire, 						'servicespec'				=> $tabServiceSpeciaux, 						'thermo'				=> $tabThermotherapie,						'form'					=> $form->createView(),						'soinsExiste'				=> true,						'saison'				=> $saison,						'reservationRegionAjax'                 => $reservationRegionAjax,						'reservationVilleAjax'                  => $reservationVilleAjax,						'reservationPays'			=> $reservationEnLignePays[0],						'reservationProvince'                   => $reservationEnLignePays[1],						'listeSoin'				=> $listeSoin,				));	}			/**	 * Affiche le formulaire de reservation en ligne pour le mini site.	 */	public function inforeservationAction($name)	{		$reservationRegionAjax = $reservationVilleAjax = $saison = $restaurant = $categorie = $soinsExiste = "";		//Néttoie le nom		$name = (new ControleDataSecureController)->getCleanNameGeography($name, "nomRestaurant");		//Gestionnaire des entités		$em = $this->getDoctrine()->getEntityManager();		$controDefault = new DefaultController();		$saison = $controDefault->getSaisonQuebec();		//traitement formulaire reservation en ligne		$reservationEnLignePays = $controDefault->getReservationEnLignePays($em);		//On récupère les info du client avec le nom du répertoire		//$client = $em->getRepository('MyAppGlobalBundle:Attraits')->getNameAttrait($name);		//if($client == null)		//{			$client = $em->getRepository('MyAppGlobalBundle:Hebergements')->getNameHebergement($name);			//On récupère le restaurant 		//	$restaurant = $em->getRepository('MyAppGlobalBundle:Attraits')->getHebergementByAttrait($client[0]->getId());		//}		if($client != null)		{			$categorie = $client[0]->getCategorieHebergementId()[0];		}		//Récupère les types de chambres et les chambres si le client en possède.		$chambre = $em->getRepository('MyAppGlobalBundle:Chambres')->getChambreEtTypeDeEtablissement($client[0]->getId());		//Recherche les forfaits du client		$listForfait = $em->getRepository('MyAppGlobalBundle:Forfaits_clients')->getListeTousLesForfaits($client[0]->getId());		//On regarde s'il existe des soints de santé                		if($restaurant != null and $restaurant[0]->getSoinsSanteId()[0] != null)                {                    if($restaurant[0]->getSoinsSanteId()[0]->getNomFr()!= "Aucun soin de santé")                    {			$soinsExiste = $restaurant[0]->getSoinsSanteId()[0]->getId();                    }                }                //Liste des régiond pour la réservation                $fullListReservation = new DestinationController;                $reservationRegionAjax = $fullListReservation->hydrateDropDownListRegionReservation($em);                //Liste des villes pour la réservation                $reservationVilleAjax = $fullListReservation->hydrateDropDownListVilleReservation($em);                $lang = $this->container->get('session')->getLocale();		//Formulaire de réservation en ligne.		$reservationOnline = new Reservation_Online();		$formGlobal = $this->container->get('form.factory')->create(new ReservationOnlineForm(), $reservationOnline);		//Formulaire de demande d'information/réservation Global réservation		$form = $this->createForm(new Formulaire_information_reservation_global_type());		// On récupère la requête.		$request = $this->get('request');		// On vérifie qu'elle est de type « POST ».		if( $request->getMethod() == 'POST' )		{			// On fait le lien Requête <-> Formulaire.			$form->bindRequest($request);			//Transmet le formulaire à la méthode d'envoie du courriel			$sender = $form->getData();			$message = self::getEnvoyerEmailAGlobal($sender, $client, $lang);			if($message == "confirmation")			{				return $this->render('MyAppGlobalBundle:Hebergement:MiniSiteTemplate.html.twig',						array(								'insection' 				=> "inSection",								'hebergement' 				=> 'valid',								'urlhebergement' 			=> '_hebergement',								'views' 				=> $name,								'hidden' 				=> 'invisiblity',								'client'				=> $client,								'menuReservation'			=> "minisite",								'restaurantDirection'                   => $restaurant,								'regionQcFooter'			=> (new AttraitsactivityController)->getListeFooterRegion($em)[0],								'regionOnFooter'			=> (new AttraitsactivityController)->getListeFooterRegion($em)[1],								'regionNbFooter'			=> (new AttraitsactivityController)->getListeFooterRegion($em)[2],								'categorieHebergement'                  => $categorie,								'form'					=> $form->createView(),								'formGlobal'				=> $formGlobal->createView(),								'messageEnvoye'				=> true,								'nomClientfr'				=> $client[0]->getNomFr(),								'soinsExiste'				=> $soinsExiste,								'emailGlobalReservation'                => "reservation@global-reservation.com",		                                                                'googledfp1'				=> "GR_HEBERGEMENT_01",								'googledfp2'				=> "GR_HEBERGEMENT_02",                                                                'googledfp3'				=> "GR_HEBERGEMENT_03",								'chambre'				=> $chambre,								'forfait'				=> $listForfait,								'saison'				=> $saison,								'reservationRegionAjax'                 => $reservationRegionAjax,								'reservationVilleAjax'                  => $reservationVilleAjax,								'reservationPays'			=> $reservationEnLignePays[0],								'reservationProvince'                   => $reservationEnLignePays[1],   						));			}			 		}		//Récupère les informations complémentaires de cet attrait		$infoComplementaire = $em->getRepository('MyAppGlobalBundle:Attraits')->getInfoComplementaire($client[0]->getId());		//Site map                $this->generePersistSiteMap2('/information_reservation_', '/information_booking_', $client[0], $em);		//Préparation de la view MiniSiteTemplate.html.twig		return $this->render('MyAppGlobalBundle:Hebergement:MiniSiteTemplate.html.twig',				array(						'insection' 				=> "inSection",						'hebergement' 				=> 'valid',						'urlhebergement' 			=> '_hebergement',						'views' 				=> $name,						'hidden' 				=> 'invisiblity',						'client'				=> $client,						'menuReservation'                       => "minisite",						'infoComplementaire'                    => $infoComplementaire, 						'restaurantDirection'                   => $restaurant,						'regionQcFooter'			=> (new AttraitsactivityController)->getListeFooterRegion($em)[0],						'regionOnFooter'			=> (new AttraitsactivityController)->getListeFooterRegion($em)[1],						'regionNbFooter'			=> (new AttraitsactivityController)->getListeFooterRegion($em)[2],						'categorieHebergement'                  => $categorie,						'formGlobal'				=> $formGlobal->createView(),						'form'					=> $form->createView(),						'soinsExiste'				=> $soinsExiste,						'emailGlobalReservation'                => "reservation@global-reservation.com",						'googledfp1'				=> "GR_HEBERGEMENT_01",						'googledfp2'				=> "GR_HEBERGEMENT_02",                                                'googledfp3'				=> "GR_HEBERGEMENT_03",						'chambre'				=> $chambre,						'forfait'				=> $listForfait,						'saison'				=> $saison,						'reservationRegionAjax'                 => $reservationRegionAjax,						'reservationVilleAjax'                  => $reservationVilleAjax,						'reservationPays'			=> $reservationEnLignePays[0],						'reservationProvince'                   => $reservationEnLignePays[1],				));	}		/**	 * Affiche les directions routières pour le mini site	 */	public function infoDirectionRoutiereAction($name)	{			$textedirectionen = $textedirectionfr = $reservationRegionAjax = $reservationVilleAjax = $restaurant = $categorie = $soinsExiste = "";		//Néttoie le nom		$name = (new ControleDataSecureController)->getCleanNameGeography($name, "name");		//Gestionnaire des entités		$em = $this->getDoctrine()->getEntityManager();		//On récupère les info du client avec le nom du répertoire		//$client = $em->getRepository('MyAppGlobalBundle:Attraits')->getNameAttrait($name);		//if($client == null)		//{			$client = $em->getRepository('MyAppGlobalBundle:Hebergements')->getNameHebergement($name);			//On récupère le restaurant 		//	$restaurant = $em->getRepository('MyAppGlobalBundle:Attraits')->getHebergementByAttrait($client[0]->getId());		//}		if($client != null)		{			$categorie = $client[0]->getCategorieHebergementId()[0];		}		//Récupère les informations complémentaires de cet attrait		$infoComplementaire = $em->getRepository('MyAppGlobalBundle:Attraits')->getInfoComplementaire($client[0]->getId());		//On regarde s'il existe des soints de santé		if(!empty($restaurant) and $restaurant[0]->getSoinsSanteId()[0]->getNomFr()!= "Aucun soin de santé")			$soinsExiste = $restaurant[0]->getSoinsSanteId()[0]->getId();		//Site map                $this->generePersistSiteMap2('/directions_routieres_', '/driving_directions_', $client[0], $em);		//Récupère les types de chambres et les chambres si le client en possède.		$chambre = $em->getRepository('MyAppGlobalBundle:Chambres')->getChambreEtTypeDeEtablissement($client[0]->getId());		//Recherche les forfaits du client		$listForfait = $em->getRepository('MyAppGlobalBundle:Forfaits_clients')->getListeTousLesForfaits($client[0]->getId());		//Récupère la saison du qc en saison		$controDefault = new DefaultController();		$saison = $controDefault->getSaisonQuebec();		//traitement formulaire reservation en ligne		$reservationEnLignePays = $controDefault->getReservationEnLignePays($em);                if($client[0]->getDescriptionHebergementFr() != null){                    $textedirectionfr = html_entity_decode($client[0]->getDescriptionHebergementFr()->getTexteDirectionRoutierePersoFr());                }                if($client[0]->getDescriptionHebergementEn() != null){                    $textedirectionen = html_entity_decode($client[0]->getDescriptionHebergementEn()->getTexteDirectionRoutierePersoEn());                  }                //Liste des régiond pour la réservation                $fullListReservation = new DestinationController;                $reservationRegionAjax = $fullListReservation->hydrateDropDownListRegionReservation($em);                //Liste des villes pour la réservation                $reservationVilleAjax = $fullListReservation->hydrateDropDownListVilleReservation($em);		//Préparation de la view MiniSiteTemplate.html.twig		return $this->render('MyAppGlobalBundle:Hebergement:MiniSiteTemplate.html.twig',				array(						'insection' 				=> "inSection",						'hebergement' 				=> 'valid',						'urlhebergement' 			=> '_hebergement',						'views' 				=> $name,						'hidden' 				=> 'invisiblity',						'client'				=> $client,						'menuDirectionRoutiere'                 => "minisite",						'infoComplementaire'                    => $infoComplementaire, 						'restaurantDirection'                   => $restaurant,						'regionQcFooter'			=> (new AttraitsactivityController)->getListeFooterRegion($em)[0],						'regionOnFooter'			=> (new AttraitsactivityController)->getListeFooterRegion($em)[1],						'regionNbFooter'			=> (new AttraitsactivityController)->getListeFooterRegion($em)[2],						'categorieHebergement'                  => $categorie,						'soinsExiste'				=> $soinsExiste,						'googledfp1'				=> "GR_HEBERGEMENT_01",						'googledfp2'				=> "GR_HEBERGEMENT_02",                                                'googledfp3'				=> "GR_HEBERGEMENT_03",						'chambre'				=> $chambre,						'forfait'				 => $listForfait,						'saison'				=> $saison,						'reservationRegionAjax'                 => $reservationRegionAjax,						'reservationVilleAjax'                  => $reservationVilleAjax,						'reservationPays'			=> $reservationEnLignePays[0],						'reservationProvince'                   => $reservationEnLignePays[1],						'txtRoutierFr'				=> $textedirectionfr,						'txtRoutierEn'				=> $textedirectionen,				));	}		/**	 * Méthode pour le traitement d'envoie des courriels à Global réservation 	 */	private function getEnvoyerEmailAGlobal($name, $client, $lang)	{		//Variable du formulaire de soumission pour la demande d'information.		$prenom = $name['prenom'];		$nom = $name['nom'];		$email = $name['courriel'];		$telephone = $name['telephone'];		$datebegin = $name['date_arrive'];		$dateend = $name['date_depart'];		$adresse = $name['adresse'];		$ville = $name['ville'];		$province = $name['province'];		$codePostal = $name['code_postal'];		$pays = $name['pays'];		$telecopieur = $name['telecopieur'];		$nbChambre = $name['nombre_chambre'];		$demandeSpecifique = $name['demande_specifique'];		$nbPersonne = $name['nombre_adulte'];		$nbEnfant = $name['nombre_enfant'];		$ageEnfant = $name['age_enfant'];		$chambreFumeur = $name['chambre_fumeur'];		//Création du message		$message = \Swift_Message::newInstance()                                                    ->setSubject("Demande " .$client[0]->getNomFr())                                                    ->setContentType('text/html')                                                    ->setFrom($email)                                                    ->setTo("reservation@global-reservation.com")                                                    //->setReplyTo('"Global-reservation" <reservation@global-reservation.com>')                                                    ->setBody(                                                        $this->renderView(                                                            'MyAppGlobalBundle:Hebergement:body_emailReservation.html.twig',                                                            array('nom'    			=> ucfirst($nom),                                                                  'prenom' 			=> ucfirst($prenom),                                                                  'email'                       => $email,                                                                  'telephone' 			=> $telephone,                                                                  'datebegin' 			=> $datebegin,                                                                  'dateend'   			=> $dateend,                                                                  'adresse'                     => $adresse,                                                                  'ville'			=> $ville,                                                                  'province' 			=> $province,                                                                  'codepostal'			=> $codePostal,                                                                  'pays'                        => $pays,                                                                  'telecopieur'                 => $telecopieur,                                                                  'demandespecifique'           => $demandeSpecifique,                                                                  'nbChambre'			=> $nbChambre,                                                                  'nbEnfant'                    => $nbEnfant,                                                                  'ageEnfant'                   => $ageEnfant,                                                                  'nbPersonne'			=> $nbPersonne,                                                                  'fumeur'                      => $chambreFumeur,                                                                  'lang'                        => $lang,                                                                  'etablissement'               => $client[0]->getNomFr(),                                                                  'dateNow'                     => new \DateTime("now"),                                                            )                                                        )                                                    );		//Envoie du message		$this->get('mailer')->send($message);		return "confirmation";	}		/**	 * Méthode pour le traitement d'envoie des courriels pour les clients corporatifs	 */	private function getEnvoyerEmail($name, $client)	{		//Variable du formulaire de soumission pour la demande d'information.		$optionsalle = $name['salle'];		$optionhebergement = $name['hebergement'];		$optionsallehebergement = $name['salle_hebergement'];		$prenom = $name['prenom'];		$nom = $name['nom'];		$email = $name['courriel'];		$telephone = $name['telephone'];		$datebegin = $name['date_arrivee'];		$dateend = $name['date_depart'];		$flexibleDate = $name['vos_dates_flexibles'];		$salleHebergement = $name['salle'];		$salleHebergement += $name['hebergement'];		$salleHebergement += $name['salle_hebergement'];		$entreprise = $name['nom_entreprise'];		$adresse = $name['adresse'];		$ville = $name['ville'];		$province = $name['province'];		$codePostal = $name['code_postal'];		$pays = $name['pays'];		$telecopieur = $name['telecopieur'];		$chambresimple = $name['simple'];		$chambresimpledouble = $name['simple_double'];		$chambredouble = $name['double'];		$chambresuite = $name['suite'];		$nbChambre = $name['nombre_chambre'];		$demandeSpecifique = $name['demandes_specifiques'];		$nomReunion = $name['nom_reunion'];		$nbPersonne = $name['nombre_personne'];		$typeEvent = $name['type_evenement'];		$dispositionSalle = $name['disposition_salle'];		$descriptionEquipement = $name['decrire_equipement'];			//Création du message			$message = \Swift_Message::newInstance()                                                                ->setSubject("Global-Réservation: demande d'information pour un corporatif / information request for a corporate")                                                                ->setContentType('text/html', 'utf-8')                                                                ->setFrom($email)                                                                ->setTo(array($client[0]->getEmailCorporatif(), "marketing@global-reservation.com"))                                                                ->setBody(                                                                    $this->renderView(                                                                        'MyAppGlobalBundle:Hebergement:body_email.html.twig',                                                                                array(	'nom'    			=> ucfirst($nom),                                                                                        'prenom' 			=> ucfirst($prenom),                                                                                        'email'				=> $email,                                                                                        'telephone' 			=> $telephone,                                                                                        'datebegin' 			=> $datebegin,                                                                                        'dateend'   			=> $dateend,                                                                                        'flexibledate'			=> $flexibleDate,                                                                                        'salle'  	    		=> $salleHebergement,                                                                                        'entreprise'    		=> $entreprise,                                                                                        'adresse'       		=> $adresse,                                                                                        'ville'				=> $ville,                                                                                        'province' 			=> $province,                                                                                        'codepostal'			=> $codePostal,                                                                                        'pays'				=> $pays,                                                                                        'telecopieur'   		=> $telecopieur,                                                                                        'chambresimple'			=> $chambresimple,                                                                                        'chambresimpledouble'           => $chambresimpledouble,                                                                                        'chambredouble'                 => $chambredouble,                                                                                        'chambresuite'                  => $chambresuite,                                                                                        'demandespecifique'             => $demandeSpecifique,                                                                                        'nbChambre'			=> $nbChambre,                                                                                        'reunion'			=> $nomReunion,                                                                                        'nbPersonne'                    => $nbPersonne,                                                                                        'typeEvent'			=> $typeEvent,                                                                                        'dispositionSalle' 		=> $dispositionSalle,                                                                                        'descriptionEquipement'         => $descriptionEquipement,                                                                                        'dateYear'                      => date("Y"),                                                                                        'salle'                         => $optionsalle,                                                                                        'hebergement'                   => $optionhebergement,                                                                                        'sallehebergement'		=> $optionsallehebergement,                                                                                )                                                                            )                                                                        );		//$message->embed(\Swift_Image::fromPath("../images/Bg-GR.png"));		//$message->attach(\Swift_Attachment::fromPath("Bg-GR.png"));		//Envoie du message	    $this->get('mailer')->send($message);		return "confirmation";	}			/**	 * Flux RSS	 */	public function infoRSSAction($name)	{		//Néttoie le nom		$name = (new ControleDataSecureController)->getCleanNameGeography($name, "name");		//Gestionnaire des entités		$em = $this->getDoctrine()->getEntityManager();		//On récupère les informations du client avec le nom du répertoire		$client = $em->getRepository('MyAppGlobalBundle:Hebergements')->getNameHebergement($name);		//Liste des activités		$listeGps = self::calculDistance($em, $client, "fluxrss", "", "");		//Préparation de la view FluxRss.html.twig		return $this->render('MyAppGlobalBundle:Hebergement:FluxRss.xml.twig',				array(						'client'				=> $client,						'listeGps'				=> $listeGps,						'datepubopen'				=> '<pubDate>',						'datepubclosed'				=> '</pubDate>',						'annneecopyright'			=> date('Y'),						'datecurrent'                           => date('m d Y'),						'nodexml'				=> '<?xml version="1.0" encoding="utf-8"?>',						'noderssopen'				=> '<rss xmlns:content="http://purl.org/rss/1.0/modules/content/" version="2.0">',						'nodechannelouverture'			=> '<channel>',						'nodetitlechannel'			=> '<title>Global-reservation.com</title>',						'nodelinkchannel'			=> '<link>http://www.global-reservation.com</link>',						'nodedescriptionchannel'		=> '<description>Réservation : l’incontournable en hébergement au Canada</description>',						'nodelangagefr'				=> '<language>fr-CA</language>',						'nodelangageen'				=> '<language>en-CA</language>',						'nodecopyright1'			=> '<copyright>Copyright © ',						'nodecopyright2'			=> ' Global réservation inc</copyright>',						'nodeitemopen'				=> '<item>',						'nodeitemtitleitemouverture'		=> '<title>',						'nodeitemtitleitemfermeture'		=> '</title>',						'nodelinkouverture'			=> '<link>',						'nodelinkfermeture'			=> '</link>',						'nodequidouverture'			=> '<quid>',						'nodequidfermeture'			=> '</quid>',						'nodeitemdescriptionopen'		=> '<description>',						'nodeitemdescriptionclose'		=> '</description>',						'nodeitempubdateopen'			=> '<pubDate>',						'nodeitempubdateclose'			=> '</pubdate>',						'nodeitemclose'				=> '</item>',						'nodechannelfermeture'			=> '</channel>',						'noderssclose'				=> '</rss>',		));			}	}