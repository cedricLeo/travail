%!PS-Adobe-3.1 EPSF-3.0
%ADO_DSC_Encoding: MacOS Roman
%%Title: chezBouquet.eps
%%Creator: Adobe Illustrator(R) 13.0
%%For: Louise Paquin
%%CreationDate: 1/26/12
%%BoundingBox: 0 0 239 74
%%HiResBoundingBox: 0 0 238.3326 73.2774
%%CropBox: 0 0 238.3326 73.2774
%%LanguageLevel: 2
%%DocumentData: Clean7Bit
%ADOBeginClientInjection: DocumentHeader "AI11EPS"
%%AI8_CreatorVersion: 13.0.2%AI9_PrintingDataBegin%ADO_BuildNumber: Adobe Illustrator(R) 13.0.2 x434 R agm 4.4379 ct 5.1039%ADO_ContainsXMP: MainFirst%AI7_Thumbnail: 128 40 8%%BeginData: 5862 Hex Bytes%0000330000660000990000CC0033000033330033660033990033CC0033FF%0066000066330066660066990066CC0066FF009900009933009966009999%0099CC0099FF00CC0000CC3300CC6600CC9900CCCC00CCFF00FF3300FF66%00FF9900FFCC3300003300333300663300993300CC3300FF333300333333%3333663333993333CC3333FF3366003366333366663366993366CC3366FF%3399003399333399663399993399CC3399FF33CC0033CC3333CC6633CC99%33CCCC33CCFF33FF0033FF3333FF6633FF9933FFCC33FFFF660000660033%6600666600996600CC6600FF6633006633336633666633996633CC6633FF%6666006666336666666666996666CC6666FF669900669933669966669999%6699CC6699FF66CC0066CC3366CC6666CC9966CCCC66CCFF66FF0066FF33%66FF6666FF9966FFCC66FFFF9900009900339900669900999900CC9900FF%9933009933339933669933999933CC9933FF996600996633996666996699%9966CC9966FF9999009999339999669999999999CC9999FF99CC0099CC33%99CC6699CC9999CCCC99CCFF99FF0099FF3399FF6699FF9999FFCC99FFFF%CC0000CC0033CC0066CC0099CC00CCCC00FFCC3300CC3333CC3366CC3399%CC33CCCC33FFCC6600CC6633CC6666CC6699CC66CCCC66FFCC9900CC9933%CC9966CC9999CC99CCCC99FFCCCC00CCCC33CCCC66CCCC99CCCCCCCCCCFF%CCFF00CCFF33CCFF66CCFF99CCFFCCCCFFFFFF0033FF0066FF0099FF00CC%FF3300FF3333FF3366FF3399FF33CCFF33FFFF6600FF6633FF6666FF6699%FF66CCFF66FFFF9900FF9933FF9966FF9999FF99CCFF99FFFFCC00FFCC33%FFCC66FFCC99FFCCCCFFCCFFFFFF33FFFF66FFFF99FFFFCC110000001100%000011111111220000002200000022222222440000004400000044444444%550000005500000055555555770000007700000077777777880000008800%000088888888AA000000AA000000AAAAAAAABB000000BB000000BBBBBBBB%DD000000DD000000DDDDDDDDEE000000EE000000EEEEEEEE0000000000FF%00FF0000FFFFFF0000FF00FFFFFF00FFFFFF%524C45FD0BFFCAC29393689369936FA0A0C9CAFD05FFA19A6F9399FD68FF%996F68936F936E93686F686F686F68936F9368999AFFA86F9AFD65FFC968%93A0CAFD04FFCAC9A09A6F996F936F999AC9FD04FF689AFD64FFC968A0FD%0FFFCFFD04FFCFFFA0696FFD64FF6FC3FD0FFF9AA0FD06FF99689AFD04FF%A8A8FD56FFA0FD06FF759AFD0EFFA76F75FD06FFA168689AFD04FFA87CFD%55FF759AFD06FF93A7FD0DFFCA6F6FFD06FFCA686F6FFFFFFF7DA7A77C7D%A7FFFF7DA7A8A87D7DA8FD49FFA093FD06FFCA6EFD0DFFA76F68FD06FFCA%686868CAFFFF7CA8A8A751CF52A87CA7527CFFA751FD49FFA76FA0FD06FF%A199FD0DFF9368C3FD04FFA89A686F75FFFFFFCF7CFFFFA8A7FF7DA77DA7%A8A8FF7CFD4AFF9A6FFD07FFC96FFD0CFF994499FD04FF756F6FA0A8FD05%FF7CA1A8A152FF7CA87C7DA8FF527DA8A8FD47FFC344A0FD07FFCA93CAFD%0AFFC3686FA1FFFFFFA16FCAFD09FF7CA7A8A7FFA8A8FF7CA7CFA77DA7A8%FD47FF6F6FCAFD08FF9ACFFD0AFF44686FFD05FF756FA8FFCFFD5BFF6F68%6FFD14FF756F68CAFD06FF6F6FA8FD5BFF9A6F68CAFD13FFA86E4499FD08%FF446EA8FD0AFFCFA7CFFD20FFA8C39AA09AA1A1C3CAFD17FFA8A06F996F%9AA8FD04FFCF7568446FCAFD13FF9A4469A1FD08FFA04499FD08FF9A936F%996F99A7FD08FFC36FC9FD05FFCA9999CAFD07FFCA9A6F93939A9993686F%6EFD05FFA099CAFD05FFA19999FD06FFC96F93939A6E93689AFD04FF9A6F%686F6899A0FD11FFCA44686FFD09FFA16844CAFD05FFA168696FCAFFFF75%6FA1FD04FFC975936869A8FFFFFFA09968696FFFFFFFCFFFFFCA6F6F68A0%A8FFFFCA686F68CAFFFFA099686F6FFFFFFFCAA06E6F68A0FD04FFA89968%99A8FFFFFF686F6FFD05FF6F6844CACAFD12FF756F44C9FD0AFF68699AFD%04FFA0686F9AFD05FF6F93FFFFFFCA9A9A686FA0FD04FFC9996F68CAFD05%FFA1689399FD05FF6E9368C9FFFFA1A06F6F6ECFFD04FFA0936899FD04FF%A19368C3FD04FFCA9368A0FD04FFCF6F4499FD13FFA768446FFD0AFFA86F%449AFFFFFFA0446F75FD06FF9968CAFD04FF6E6F6FFD06FF6F6899FD05FF%9A68699AFD05FF6F6968A1FD04FFA76F44A0FD05FFC9686FA0FFFFFFA168%44A0FD05FF99446FFD05FF9A4468A1FD13FF994468A1FD0AFFCA446F9AFF%FFFF6E6F6EFD07FF6E6FA1FFFFFF9A6F68CAFD05FF9A446FCAFD04FFA068%6FA0FD05FF996F689AFD05FF99686FFD06FF6F6F6FFD04FF6F6899FD05FF%A0686FA1FD05FF6E686FFD13FFA044446FFD0BFF764444A1FFFF9A6844A1%FD06FFA16844C9FFFFA16E4499FD05FFCA68686FFD04FFCA68686FFFFFFF%CFFFA068446FFFFFCFFFFFA04468A0FFCFFFFFFF9A6844A1FFFFFFA04468%A0FFFFFFA86F446FA1FFCFFFFFFF766844A1FD13FF446F6EFD0CFF6F446F%CFFFFF9A446FFD07FF99446FCFFFFF9A446FCAFD05FF756F68CFFD04FF75%6F6EFD05FFCA6F686FCAFD05FF6E6F6FFD06FF6F4499FD04FF6F6F689975%9A6F6F689ACAFD06FF6F4499FD07FFA1FD0BFF6E4444A1FD0BFFA044446F%FFFFFF6E6875FD06FFC944446FFFFFCA446875FD05FFA76E449AFD04FFA8%6F6899FD05FF9968689AFD05FF9A6844A1FD05FF9A4468A1FD04FF6F4468%6F9A6FA0A1FD08FFA0446FCAFD07FF75FD0AFF6F6844A1FF99A1FD08FFCA%446844CFFFFFFF7544A1FD06FF6E6F44CAFFFFA06844C9FD05FF75446FCA%FD04FFC9686FA0FD04FFA1686F6FFD06FF9A446FFD05FFCF68686FFD05FF%7568449AFD0CFF4468A1FD08FF6F9AFD08FF6F4444A1FFFF756EA8FD06FF%CA444444A1FD04FF764476FD05FF6E4444A0FFFFFFA04468A1FD04FF9A44%446FFD05FFA16844A0FFFFFFC9686844CAFD06FF6F446EFD05FF6E4444A1%FD05FFA1444444A1FD05FFA76ECAFFFF75449AFD0AFF6F75A1FD04FFC36E%446ECAFD04FF756FA0FD04FFA0444444C9FD06FF6E6FFFFFFFCA6E4444A1%FD04FFCA6E44A0FFFFCA9A446844C9FD06FF6E6F6EC9A7A0686F68A1FD07%FFA04468A1FFFFCA6F6F446FFD07FF9A446F449AA1CAA07544A0FFFFA76F%449A759AFD09FF9A6F4A756F6E446F9AFD07FFA06F4A756F6E446F75CFFD%07FFCF6E6F6F6F446E75CAFD06FFA06844FD046F6E44444475A8FD04FFA7%6869446F6E69446FFD09FF994468FD046F446E446F75FD06FF9A44684444%446E6FCAFFFFFF6F446844446FFD0BFFCAA0A1A0CAFD0BFFCAA0A1A0CAFD%0CFFA1A1A0CAFD0AFFCFA19AA1CFFFA1FFA1A1A0FD07FFA7CAFF99446FA1%FD0AFFCAA0A0A1FFCACAA8C9A0CAFD08FFA1A1A0C9CAFD05FFA7FFA1A1A7%FD4FFFC944686FFD7CFF6F6F68CFFD06FFA8FD74FFA1684499FD06FF7CA8%FD0EFFA7A7FD04FF7DCFFD5EFF9A446FCAFD04FFA87C7DA7CFFD0DFFCF51%FD04FFA7A8FD06FFCFFD57FF6E446FFD05FF7C7CA8A8A7FFA8A7A8FFFFA8%A7FD05FFA87CA7A8FFFFA8FFFFFF7DCFFF7D52FFA8FFA7A8FFFF7DCFFD4D%FFA76F44C9FD05FFA77CFFFFFFA87D7DA7FF7D7D7D7CFD05FF517D7C7DFF%7CA7FF7CA77DFF7C7CFFFF767DA7FF7CA752A8FD4CFFA0446FFD06FF7D52%7C7CA87CA7FFFFA751FFFF7C7DA77CA8A87CFFFF51A87CA7A87CA8FFFFA7%7CFFA87CCFFF51A7FFA751FD4CFF754475FD06FFA77CFFA8FF7CFFFFFF7D%7CFFFF7CA7A8A8A8FF52FFFF7CA77DA7FFA77C7DFF7CA1FFFF7CFFFF7CA8%FFA87CCFFD4BFF7544A1FD06FF7C7CFFFFA87C7CFFA8A851CFA87CA8FFFF%FFA851A8FF51FF52A7A8FFA87CFF7D7CFFA87CA8FF7C7CFFA752FD4CFF6F%6FCFFD06FFA87CA77CA8FF7C7CA7FFA87CA7A7FD05FF7CA17CA8FFA7A8A8%7CA7A7FFA87CA8FF7CFFFFFF7CA77CFD4DFF6F44FD09FFCFFD09FFA8FD07%FFA8FD07FFA8FFFFFFA8FD07FFA8FD4EFF6F6FFD7EFFC9A1FD38FFFF%%EndData
%ADOEndClientInjection: DocumentHeader "AI11EPS"
%%Pages: 1
%%DocumentNeededResources: 
%%DocumentSuppliedResources: procset Adobe_AGM_Image 1.0 0
%%+ procset Adobe_CoolType_Utility_T42 1.0 0
%%+ procset Adobe_CoolType_Utility_MAKEOCF 1.23 0
%%+ procset Adobe_CoolType_Core 2.31 0
%%+ procset Adobe_AGM_Core 2.0 0
%%+ procset Adobe_AGM_Utils 1.0 0
%%DocumentFonts: 
%%DocumentNeededFonts: 
%%DocumentNeededFeatures: 
%%DocumentSuppliedFeatures: 
%%DocumentProcessColors:  Cyan Magenta Yellow Black
%%DocumentCustomColors: 
%%CMYKCustomColor: 
%%RGBCustomColor: 
%%EndComments
                                                                                                                                                                                                                              
                                                                                                                                                                                                                                                         
                                                                                                                                                                                                                                                         
                                                                                                                                                                                                                                                         
                                                                                                                                                                                                                                                         
                                                                                                                                                                                                                                                         
%%BeginDefaults
%%ViewingOrientation: 1 0 0 1
%%EndDefaults
%%BeginProlog
%%BeginResource: procset Adobe_AGM_Utils 1.0 0
%%Version: 1.0 0
%%Copyright: Copyright(C)2000-2006 Adobe Systems, Inc. All Rights Reserved.
systemdict/setpacking known
{currentpacking	true setpacking}if
userdict/Adobe_AGM_Utils 73 dict dup begin put
/bdf
{bind def}bind def
/nd{null def}bdf
/xdf
{exch def}bdf
/ldf 
{load def}bdf
/ddf
{put}bdf	
/xddf
{3 -1 roll put}bdf	
/xpt
{exch put}bdf
/ndf
{
	exch dup where{
		pop pop pop
	}{
		xdf
	}ifelse
}def
/cdndf
{
	exch dup currentdict exch known{
		pop pop
	}{
		exch def
	}ifelse
}def
/gx
{get exec}bdf
/ps_level
	/languagelevel where{
		pop systemdict/languagelevel gx
	}{
		1
	}ifelse
def
/level2 
	ps_level 2 ge
def
/level3 
	ps_level 3 ge
def
/ps_version
	{version cvr}stopped{-1}if
def
/set_gvm
{currentglobal exch setglobal}bdf
/reset_gvm
{setglobal}bdf
/makereadonlyarray
{
	/packedarray where{pop packedarray
	}{
		array astore readonly}ifelse
}bdf
/map_reserved_ink_name
{
	dup type/stringtype eq{
		dup/Red eq{
			pop(_Red_)
		}{
			dup/Green eq{
				pop(_Green_)
			}{
				dup/Blue eq{
					pop(_Blue_)
				}{
					dup()cvn eq{
						pop(Process)
					}if
				}ifelse
			}ifelse
		}ifelse
	}if
}bdf
/AGMUTIL_GSTATE 22 dict def
/get_gstate
{
	AGMUTIL_GSTATE begin
	/AGMUTIL_GSTATE_clr_spc currentcolorspace def
	/AGMUTIL_GSTATE_clr_indx 0 def
	/AGMUTIL_GSTATE_clr_comps 12 array def
	mark currentcolor counttomark
		{AGMUTIL_GSTATE_clr_comps AGMUTIL_GSTATE_clr_indx 3 -1 roll put
		/AGMUTIL_GSTATE_clr_indx AGMUTIL_GSTATE_clr_indx 1 add def}repeat pop
	/AGMUTIL_GSTATE_fnt rootfont def
	/AGMUTIL_GSTATE_lw currentlinewidth def
	/AGMUTIL_GSTATE_lc currentlinecap def
	/AGMUTIL_GSTATE_lj currentlinejoin def
	/AGMUTIL_GSTATE_ml currentmiterlimit def
	currentdash/AGMUTIL_GSTATE_do xdf/AGMUTIL_GSTATE_da xdf
	/AGMUTIL_GSTATE_sa currentstrokeadjust def
	/AGMUTIL_GSTATE_clr_rnd currentcolorrendering def
	/AGMUTIL_GSTATE_op currentoverprint def
	/AGMUTIL_GSTATE_bg currentblackgeneration cvlit def
	/AGMUTIL_GSTATE_ucr currentundercolorremoval cvlit def
	currentcolortransfer cvlit/AGMUTIL_GSTATE_gy_xfer xdf cvlit/AGMUTIL_GSTATE_b_xfer xdf
		cvlit/AGMUTIL_GSTATE_g_xfer xdf cvlit/AGMUTIL_GSTATE_r_xfer xdf
	/AGMUTIL_GSTATE_ht currenthalftone def
	/AGMUTIL_GSTATE_flt currentflat def
	end
}def
/set_gstate
{
	AGMUTIL_GSTATE begin
	AGMUTIL_GSTATE_clr_spc setcolorspace
	AGMUTIL_GSTATE_clr_indx{AGMUTIL_GSTATE_clr_comps AGMUTIL_GSTATE_clr_indx 1 sub get
	/AGMUTIL_GSTATE_clr_indx AGMUTIL_GSTATE_clr_indx 1 sub def}repeat setcolor
	AGMUTIL_GSTATE_fnt setfont
	AGMUTIL_GSTATE_lw setlinewidth
	AGMUTIL_GSTATE_lc setlinecap
	AGMUTIL_GSTATE_lj setlinejoin
	AGMUTIL_GSTATE_ml setmiterlimit
	AGMUTIL_GSTATE_da AGMUTIL_GSTATE_do setdash
	AGMUTIL_GSTATE_sa setstrokeadjust
	AGMUTIL_GSTATE_clr_rnd setcolorrendering
	AGMUTIL_GSTATE_op setoverprint
	AGMUTIL_GSTATE_bg cvx setblackgeneration
	AGMUTIL_GSTATE_ucr cvx setundercolorremoval
	AGMUTIL_GSTATE_r_xfer cvx AGMUTIL_GSTATE_g_xfer cvx AGMUTIL_GSTATE_b_xfer cvx
		AGMUTIL_GSTATE_gy_xfer cvx setcolortransfer
	AGMUTIL_GSTATE_ht/HalftoneType get dup 9 eq exch 100 eq or
		{
		currenthalftone/HalftoneType get AGMUTIL_GSTATE_ht/HalftoneType get ne
			{
			 mark AGMUTIL_GSTATE_ht{sethalftone}stopped cleartomark
			}if
		}{
		AGMUTIL_GSTATE_ht sethalftone
		}ifelse
	AGMUTIL_GSTATE_flt setflat
	end
}def
/get_gstate_and_matrix
{
	AGMUTIL_GSTATE begin
	/AGMUTIL_GSTATE_ctm matrix currentmatrix def
	end
	get_gstate
}def
/set_gstate_and_matrix
{
	set_gstate
	AGMUTIL_GSTATE begin
	AGMUTIL_GSTATE_ctm setmatrix
	end
}def
/AGMUTIL_str256 256 string def
/AGMUTIL_src256 256 string def
/AGMUTIL_dst64 64 string def
/AGMUTIL_srcLen nd
/AGMUTIL_ndx nd
/AGMUTIL_cpd nd
/capture_cpd{
	//Adobe_AGM_Utils/AGMUTIL_cpd currentpagedevice ddf
}def
/thold_halftone
{
	level3
		{sethalftone currenthalftone}
		{
			dup/HalftoneType get 3 eq
			{
				sethalftone currenthalftone
			}{
				begin
				Width Height mul{
					Thresholds read{pop}if
				}repeat
				end
				currenthalftone
			}ifelse
		}ifelse
}def 
/rdcmntline
{
	currentfile AGMUTIL_str256 readline pop
	(%)anchorsearch{pop}if
}bdf
/filter_cmyk
{	
	dup type/filetype ne{
		exch()/SubFileDecode filter
	}{
		exch pop
	}
	ifelse
	[
	exch
	{
		AGMUTIL_src256 readstring pop
		dup length/AGMUTIL_srcLen exch def
		/AGMUTIL_ndx 0 def
		AGMCORE_plate_ndx 4 AGMUTIL_srcLen 1 sub{
			1 index exch get
			AGMUTIL_dst64 AGMUTIL_ndx 3 -1 roll put
			/AGMUTIL_ndx AGMUTIL_ndx 1 add def
		}for
		pop
		AGMUTIL_dst64 0 AGMUTIL_ndx getinterval
	}
	bind
	/exec cvx
	]cvx
}bdf
/filter_indexed_devn
{
	cvi Names length mul names_index add Lookup exch get
}bdf
/filter_devn
{	
	4 dict begin
	/srcStr xdf
	/dstStr xdf
	dup type/filetype ne{
		0()/SubFileDecode filter
	}if
	[
	exch
		[
			/devicen_colorspace_dict/AGMCORE_gget cvx/begin cvx
			currentdict/srcStr get/readstring cvx/pop cvx
			/dup cvx/length cvx 0/gt cvx[
				Adobe_AGM_Utils/AGMUTIL_ndx 0/ddf cvx
				names_index Names length currentdict/srcStr get length 1 sub{
					1/index cvx/exch cvx/get cvx
					currentdict/dstStr get/AGMUTIL_ndx/load cvx 3 -1/roll cvx/put cvx
					Adobe_AGM_Utils/AGMUTIL_ndx/AGMUTIL_ndx/load cvx 1/add cvx/ddf cvx
				}for
				currentdict/dstStr get 0/AGMUTIL_ndx/load cvx/getinterval cvx
			]cvx/if cvx
			/end cvx
		]cvx
		bind
		/exec cvx
	]cvx
	end
}bdf
/AGMUTIL_imagefile nd
/read_image_file
{
	AGMUTIL_imagefile 0 setfileposition
	10 dict begin
	/imageDict xdf
	/imbufLen Width BitsPerComponent mul 7 add 8 idiv def
	/imbufIdx 0 def
	/origDataSource imageDict/DataSource get def
	/origMultipleDataSources imageDict/MultipleDataSources get def
	/origDecode imageDict/Decode get def
	/dstDataStr imageDict/Width get colorSpaceElemCnt mul string def
	imageDict/MultipleDataSources known{MultipleDataSources}{false}ifelse
	{
		/imbufCnt imageDict/DataSource get length def
		/imbufs imbufCnt array def
		0 1 imbufCnt 1 sub{
			/imbufIdx xdf
			imbufs imbufIdx imbufLen string put
			imageDict/DataSource get imbufIdx[AGMUTIL_imagefile imbufs imbufIdx get/readstring cvx/pop cvx]cvx put
		}for
		DeviceN_PS2{
			imageDict begin
		 	/DataSource[DataSource/devn_sep_datasource cvx]cvx def
			/MultipleDataSources false def
			/Decode[0 1]def
			end
		}if
	}{
		/imbuf imbufLen string def
		Indexed_DeviceN level3 not and DeviceN_NoneName or{
			/srcDataStrs[imageDict begin
				currentdict/MultipleDataSources known{MultipleDataSources{DataSource length}{1}ifelse}{1}ifelse
				{
					Width Decode length 2 div mul cvi string
				}repeat
				end]def		
			imageDict begin
		 	/DataSource[AGMUTIL_imagefile Decode BitsPerComponent false 1/filter_indexed_devn load dstDataStr srcDataStrs devn_alt_datasource/exec cvx]cvx def
			/Decode[0 1]def
			end
		}{
			imageDict/DataSource[1 string dup 0 AGMUTIL_imagefile Decode length 2 idiv string/readstring cvx/pop cvx names_index/get cvx/put cvx]cvx put
			imageDict/Decode[0 1]put
		}ifelse
	}ifelse
	imageDict exch
	load exec
	imageDict/DataSource origDataSource put
	imageDict/MultipleDataSources origMultipleDataSources put
	imageDict/Decode origDecode put	
	end
}bdf
/write_image_file
{
	begin
	{(AGMUTIL_imagefile)(w+)file}stopped{
		false
	}{
		Adobe_AGM_Utils/AGMUTIL_imagefile xddf 
		2 dict begin
		/imbufLen Width BitsPerComponent mul 7 add 8 idiv def
		MultipleDataSources{DataSource 0 get}{DataSource}ifelse type/filetype eq{
			/imbuf imbufLen string def
		}if
		1 1 Height MultipleDataSources not{Decode length 2 idiv mul}if{
			pop
			MultipleDataSources{
			 	0 1 DataSource length 1 sub{
					DataSource type dup
					/arraytype eq{
						pop DataSource exch gx
					}{
						/filetype eq{
							DataSource exch get imbuf readstring pop
						}{
							DataSource exch get
						}ifelse
					}ifelse
					AGMUTIL_imagefile exch writestring
				}for
			}{
				DataSource type dup
				/arraytype eq{
					pop DataSource exec
				}{
					/filetype eq{
						DataSource imbuf readstring pop
					}{
						DataSource
					}ifelse
				}ifelse
				AGMUTIL_imagefile exch writestring
			}ifelse
		}for
		end
		true
	}ifelse
	end
}bdf
/close_image_file
{
	AGMUTIL_imagefile closefile(AGMUTIL_imagefile)deletefile
}def
statusdict/product known userdict/AGMP_current_show known not and{
	/pstr statusdict/product get def
	pstr(HP LaserJet 2200)eq 	
	pstr(HP LaserJet 4000 Series)eq or
	pstr(HP LaserJet 4050 Series )eq or
	pstr(HP LaserJet 8000 Series)eq or
	pstr(HP LaserJet 8100 Series)eq or
	pstr(HP LaserJet 8150 Series)eq or
	pstr(HP LaserJet 5000 Series)eq or
	pstr(HP LaserJet 5100 Series)eq or
	pstr(HP Color LaserJet 4500)eq or
	pstr(HP Color LaserJet 4600)eq or
	pstr(HP LaserJet 5Si)eq or
	pstr(HP LaserJet 1200 Series)eq or
	pstr(HP LaserJet 1300 Series)eq or
	pstr(HP LaserJet 4100 Series)eq or 
	{
 		userdict/AGMP_current_show/show load put
		userdict/show{
		 currentcolorspace 0 get
		 /Pattern eq
		 {false charpath f}
		 {AGMP_current_show}ifelse
		}put
	}if
	currentdict/pstr undef
}if
/consumeimagedata
{
	begin
	AGMIMG_init_common
	currentdict/MultipleDataSources known not
		{/MultipleDataSources false def}if
	MultipleDataSources
		{
		DataSource 0 get type
		dup/filetype eq
			{
			1 dict begin
			/flushbuffer Width cvi string def
			1 1 Height cvi
				{
				pop
				0 1 DataSource length 1 sub
					{
					DataSource exch get
					flushbuffer readstring pop pop
					}for
				}for
			end
			}if
		dup/arraytype eq exch/packedarraytype eq or DataSource 0 get xcheck and
			{
			Width Height mul cvi
				{
				0 1 DataSource length 1 sub
					{dup DataSource exch gx length exch 0 ne{pop}if}for
				dup 0 eq
					{pop exit}if
				sub dup 0 le
					{exit}if
				}loop
			pop
			}if		
		}
		{
		/DataSource load type 
		dup/filetype eq
			{
			1 dict begin
			/flushbuffer Width Decode length 2 idiv mul cvi string def
			1 1 Height{pop DataSource flushbuffer readstring pop pop}for
			end
			}if
		dup/arraytype eq exch/packedarraytype eq or/DataSource load xcheck and
			{
				Height Width BitsPerComponent mul 8 BitsPerComponent sub add 8 idiv Decode length 2 idiv mul mul
					{
					DataSource length dup 0 eq
						{pop exit}if
					sub dup 0 le
						{exit}if
					}loop
				pop
			}if
		}ifelse
	end
}bdf
/addprocs
{
	 2{/exec load}repeat
	 3 1 roll
	 [5 1 roll]bind cvx
}def
/modify_halftone_xfer
{
	currenthalftone dup length dict copy begin
	 currentdict 2 index known{
	 	1 index load dup length dict copy begin
		currentdict/TransferFunction known{
			/TransferFunction load
		}{
			currenttransfer
		}ifelse
		 addprocs/TransferFunction xdf 
		 currentdict end def
		currentdict end sethalftone
	}{
		currentdict/TransferFunction known{
			/TransferFunction load 
		}{
			currenttransfer
		}ifelse
		addprocs/TransferFunction xdf
		currentdict end sethalftone		
		pop
	}ifelse
}def
/clonearray
{
	dup xcheck exch
	dup length array exch
	Adobe_AGM_Core/AGMCORE_tmp -1 ddf 
	{
	Adobe_AGM_Core/AGMCORE_tmp 2 copy get 1 add ddf 
	dup type/dicttype eq
		{
			Adobe_AGM_Core/AGMCORE_tmp get
			exch
			clonedict
			Adobe_AGM_Core/AGMCORE_tmp 4 -1 roll ddf 
		}if
	dup type/arraytype eq
		{
			Adobe_AGM_Core/AGMCORE_tmp get exch
			clonearray
			Adobe_AGM_Core/AGMCORE_tmp 4 -1 roll ddf 
		}if
	exch dup
	Adobe_AGM_Core/AGMCORE_tmp get 4 -1 roll put
	}forall
	exch{cvx}if
}bdf
/clonedict
{
	dup length dict
	begin
	{
		dup type/dicttype eq
			{clonedict}if
		dup type/arraytype eq
			{clonearray}if
		def
	}forall
	currentdict
	end
}bdf
/DeviceN_PS2
{
	/currentcolorspace AGMCORE_gget 0 get/DeviceN eq level3 not and
}bdf
/Indexed_DeviceN
{
	/indexed_colorspace_dict AGMCORE_gget dup null ne{
		dup/CSDBase known{
			/CSDBase get/CSD get_res/Names known 
		}{
			pop false
		}ifelse
	}{
		pop false
	}ifelse
}bdf
/DeviceN_NoneName
{	
	/Names where{
		pop
		false Names
		{
			(None)eq or
		}forall
	}{
		false
	}ifelse
}bdf
/DeviceN_PS2_inRip_seps
{
	/AGMCORE_in_rip_sep where
	{
		pop dup type dup/arraytype eq exch/packedarraytype eq or
		{
			dup 0 get/DeviceN eq level3 not and AGMCORE_in_rip_sep and
			{
				/currentcolorspace exch AGMCORE_gput
				false
			}{
				true
			}ifelse
		}{
			true
		}ifelse
	}{
		true
	}ifelse
}bdf
/base_colorspace_type
{
	dup type/arraytype eq{0 get}if
}bdf
/currentdistillerparams where{pop currentdistillerparams/CoreDistVersion get 5000 lt}{true}ifelse
{
	/pdfmark_5{cleartomark}bind def
}{
	/pdfmark_5{pdfmark}bind def
}ifelse
/ReadBypdfmark_5
{
	currentfile exch 0 exch/SubFileDecode filter
	/currentdistillerparams where 
	{pop currentdistillerparams/CoreDistVersion get 5000 lt}{true}ifelse
	{flushfile cleartomark}
	{/PUT pdfmark}ifelse 	
}bdf
/xpdfm
{
	{
		dup 0 get/Label eq
		{
			aload length[exch 1 add 1 roll/PAGELABEL
		}{
			aload pop
			[{ThisPage}<<5 -2 roll>>/PUT
		}ifelse
		pdfmark_5
	}forall
}bdf
/ds{
	Adobe_AGM_Utils begin
}bdf
/dt{
	currentdict Adobe_AGM_Utils eq{
		end
	}if
}bdf
systemdict/setpacking known
{setpacking}if
%%EndResource
%%BeginResource: procset Adobe_AGM_Core 2.0 0
%%Version: 2.0 0
%%Copyright: Copyright(C)1997-2007 Adobe Systems, Inc. All Rights Reserved.
systemdict/setpacking known
{
	currentpacking
	true setpacking
}if
userdict/Adobe_AGM_Core 209 dict dup begin put
/Adobe_AGM_Core_Id/Adobe_AGM_Core_2.0_0 def
/AGMCORE_str256 256 string def
/AGMCORE_save nd
/AGMCORE_graphicsave nd
/AGMCORE_c 0 def
/AGMCORE_m 0 def
/AGMCORE_y 0 def
/AGMCORE_k 0 def
/AGMCORE_cmykbuf 4 array def
/AGMCORE_screen[currentscreen]cvx def
/AGMCORE_tmp 0 def
/AGMCORE_&setgray nd
/AGMCORE_&setcolor nd
/AGMCORE_&setcolorspace nd
/AGMCORE_&setcmykcolor nd
/AGMCORE_cyan_plate nd
/AGMCORE_magenta_plate nd
/AGMCORE_yellow_plate nd
/AGMCORE_black_plate nd
/AGMCORE_plate_ndx nd
/AGMCORE_get_ink_data nd
/AGMCORE_is_cmyk_sep nd
/AGMCORE_host_sep nd
/AGMCORE_avoid_L2_sep_space nd
/AGMCORE_distilling nd
/AGMCORE_composite_job nd
/AGMCORE_producing_seps nd
/AGMCORE_ps_level -1 def
/AGMCORE_ps_version -1 def
/AGMCORE_environ_ok nd
/AGMCORE_CSD_cache 0 dict def
/AGMCORE_currentoverprint false def
/AGMCORE_deltaX nd
/AGMCORE_deltaY nd
/AGMCORE_name nd
/AGMCORE_sep_special nd
/AGMCORE_err_strings 4 dict def
/AGMCORE_cur_err nd
/AGMCORE_current_spot_alias false def
/AGMCORE_inverting false def
/AGMCORE_feature_dictCount nd
/AGMCORE_feature_opCount nd
/AGMCORE_feature_ctm nd
/AGMCORE_ConvertToProcess false def
/AGMCORE_Default_CTM matrix def
/AGMCORE_Default_PageSize nd
/AGMCORE_Default_flatness nd
/AGMCORE_currentbg nd
/AGMCORE_currentucr nd
/AGMCORE_pattern_paint_type 0 def
/knockout_unitsq nd
currentglobal true setglobal
[/CSA/Gradient/Procedure]
{
	/Generic/Category findresource dup length dict copy/Category defineresource pop
}forall
setglobal
/AGMCORE_key_known
{
	where{
		/Adobe_AGM_Core_Id known
	}{
		false
	}ifelse
}ndf
/flushinput
{
	save
	2 dict begin
	/CompareBuffer 3 -1 roll def
	/readbuffer 256 string def
	mark
	{
	currentfile readbuffer{readline}stopped
		{cleartomark mark}
		{
		not
			{pop exit}
		if
		CompareBuffer eq
			{exit}
		if
		}ifelse
	}loop
	cleartomark
	end
	restore
}bdf
/getspotfunction
{
	AGMCORE_screen exch pop exch pop
	dup type/dicttype eq{
		dup/HalftoneType get 1 eq{
			/SpotFunction get
		}{
			dup/HalftoneType get 2 eq{
				/GraySpotFunction get
			}{
				pop
				{
					abs exch abs 2 copy add 1 gt{
						1 sub dup mul exch 1 sub dup mul add 1 sub
					}{
						dup mul exch dup mul add 1 exch sub
					}ifelse
				}bind
			}ifelse
		}ifelse
	}if
}def
/np
{newpath}bdf
/clp_npth
{clip np}def
/eoclp_npth
{eoclip np}def
/npth_clp
{np clip}def
/graphic_setup
{
	/AGMCORE_graphicsave save store
	concat
	0 setgray
	0 setlinecap
	0 setlinejoin
	1 setlinewidth
	[]0 setdash
	10 setmiterlimit
	np
	false setoverprint
	false setstrokeadjust
	//Adobe_AGM_Core/spot_alias gx
	/Adobe_AGM_Image where{
		pop
		Adobe_AGM_Image/spot_alias 2 copy known{
			gx
		}{
			pop pop
		}ifelse
	}if
	/sep_colorspace_dict null AGMCORE_gput
	100 dict begin
	/dictstackcount countdictstack def
	/showpage{}def
	mark
}def
/graphic_cleanup
{
	cleartomark
	dictstackcount 1 countdictstack 1 sub{end}for
	end
	AGMCORE_graphicsave restore
}def
/compose_error_msg
{
	grestoreall initgraphics	
	/Helvetica findfont 10 scalefont setfont
	/AGMCORE_deltaY 100 def
	/AGMCORE_deltaX 310 def
	clippath pathbbox np pop pop 36 add exch 36 add exch moveto
	0 AGMCORE_deltaY rlineto AGMCORE_deltaX 0 rlineto
	0 AGMCORE_deltaY neg rlineto AGMCORE_deltaX neg 0 rlineto closepath
	0 AGMCORE_&setgray
	gsave 1 AGMCORE_&setgray fill grestore 
	1 setlinewidth gsave stroke grestore
	currentpoint AGMCORE_deltaY 15 sub add exch 8 add exch moveto
	/AGMCORE_deltaY 12 def
	/AGMCORE_tmp 0 def
	AGMCORE_err_strings exch get
		{
		dup 32 eq
			{
			pop
			AGMCORE_str256 0 AGMCORE_tmp getinterval
			stringwidth pop currentpoint pop add AGMCORE_deltaX 28 add gt
				{
				currentpoint AGMCORE_deltaY sub exch pop
				clippath pathbbox pop pop pop 44 add exch moveto
				}if
			AGMCORE_str256 0 AGMCORE_tmp getinterval show( )show
			0 1 AGMCORE_str256 length 1 sub
				{
				AGMCORE_str256 exch 0 put
				}for
			/AGMCORE_tmp 0 def
			}{
				AGMCORE_str256 exch AGMCORE_tmp xpt
				/AGMCORE_tmp AGMCORE_tmp 1 add def
			}ifelse
		}forall
}bdf
/AGMCORE_CMYKDeviceNColorspaces[
	[/Separation/None/DeviceCMYK{0 0 0}]
	[/Separation(Black)/DeviceCMYK{0 0 0 4 -1 roll}bind]
	[/Separation(Yellow)/DeviceCMYK{0 0 3 -1 roll 0}bind]
	[/DeviceN[(Yellow)(Black)]/DeviceCMYK{0 0 4 2 roll}bind]
	[/Separation(Magenta)/DeviceCMYK{0 exch 0 0}bind]
	[/DeviceN[(Magenta)(Black)]/DeviceCMYK{0 3 1 roll 0 exch}bind]
	[/DeviceN[(Magenta)(Yellow)]/DeviceCMYK{0 3 1 roll 0}bind]
	[/DeviceN[(Magenta)(Yellow)(Black)]/DeviceCMYK{0 4 1 roll}bind]
	[/Separation(Cyan)/DeviceCMYK{0 0 0}]
	[/DeviceN[(Cyan)(Black)]/DeviceCMYK{0 0 3 -1 roll}bind]
	[/DeviceN[(Cyan)(Yellow)]/DeviceCMYK{0 exch 0}bind]
	[/DeviceN[(Cyan)(Yellow)(Black)]/DeviceCMYK{0 3 1 roll}bind]
	[/DeviceN[(Cyan)(Magenta)]/DeviceCMYK{0 0}]
	[/DeviceN[(Cyan)(Magenta)(Black)]/DeviceCMYK{0 exch}bind]
	[/DeviceN[(Cyan)(Magenta)(Yellow)]/DeviceCMYK{0}]
	[/DeviceCMYK]
]def
/ds{
	Adobe_AGM_Core begin
	/currentdistillerparams where
		{
		pop currentdistillerparams/CoreDistVersion get 5000 lt
			{<</DetectBlends false>>setdistillerparams}if
		}if	
	/AGMCORE_ps_version xdf
	/AGMCORE_ps_level xdf
	errordict/AGM_handleerror known not{
		errordict/AGM_handleerror errordict/handleerror get put
		errordict/handleerror{
			Adobe_AGM_Core begin
			$error/newerror get AGMCORE_cur_err null ne and{
				$error/newerror false put
				AGMCORE_cur_err compose_error_msg
			}if
			$error/newerror true put
			end
			errordict/AGM_handleerror get exec
			}bind put
		}if
	/AGMCORE_environ_ok 
		ps_level AGMCORE_ps_level ge
		ps_version AGMCORE_ps_version ge and 
		AGMCORE_ps_level -1 eq or
	def
	AGMCORE_environ_ok not
		{/AGMCORE_cur_err/AGMCORE_bad_environ def}if
	/AGMCORE_&setgray systemdict/setgray get def
	level2{
		/AGMCORE_&setcolor systemdict/setcolor get def
		/AGMCORE_&setcolorspace systemdict/setcolorspace get def
	}if
	/AGMCORE_currentbg currentblackgeneration def
	/AGMCORE_currentucr currentundercolorremoval def
	/AGMCORE_Default_flatness currentflat def
	/AGMCORE_distilling
		/product where{
			pop systemdict/setdistillerparams known product(Adobe PostScript Parser)ne and
		}{
			false
		}ifelse
	def
	/AGMCORE_GSTATE AGMCORE_key_known not{
		/AGMCORE_GSTATE 21 dict def
		/AGMCORE_tmpmatrix matrix def
		/AGMCORE_gstack 32 array def
		/AGMCORE_gstackptr 0 def
		/AGMCORE_gstacksaveptr 0 def
		/AGMCORE_gstackframekeys 14 def
		/AGMCORE_&gsave/gsave ldf
		/AGMCORE_&grestore/grestore ldf
		/AGMCORE_&grestoreall/grestoreall ldf
		/AGMCORE_&save/save ldf
		/AGMCORE_&setoverprint/setoverprint ldf
		/AGMCORE_gdictcopy{
			begin
			{def}forall
			end
		}def
		/AGMCORE_gput{
			AGMCORE_gstack AGMCORE_gstackptr get
			3 1 roll
			put
		}def
		/AGMCORE_gget{
			AGMCORE_gstack AGMCORE_gstackptr get
			exch
			get
		}def
		/gsave{
			AGMCORE_&gsave
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gstackptr 1 add
			dup 32 ge{limitcheck}if
			/AGMCORE_gstackptr exch store
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gdictcopy
		}def
		/grestore{
			AGMCORE_&grestore
			AGMCORE_gstackptr 1 sub
			dup AGMCORE_gstacksaveptr lt{1 add}if
			dup AGMCORE_gstack exch get dup/AGMCORE_currentoverprint known
				{/AGMCORE_currentoverprint get setoverprint}{pop}ifelse
			/AGMCORE_gstackptr exch store
		}def
		/grestoreall{
			AGMCORE_&grestoreall
			/AGMCORE_gstackptr AGMCORE_gstacksaveptr store 
		}def
		/save{
			AGMCORE_&save
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gstackptr 1 add
			dup 32 ge{limitcheck}if
			/AGMCORE_gstackptr exch store
			/AGMCORE_gstacksaveptr AGMCORE_gstackptr store
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gdictcopy
		}def
		/setoverprint{
			dup/AGMCORE_currentoverprint exch AGMCORE_gput AGMCORE_&setoverprint
		}def	
		0 1 AGMCORE_gstack length 1 sub{
				AGMCORE_gstack exch AGMCORE_gstackframekeys dict put
		}for
	}if
	level3/AGMCORE_&sysshfill AGMCORE_key_known not and
	{
		/AGMCORE_&sysshfill systemdict/shfill get def
		/AGMCORE_&sysmakepattern systemdict/makepattern get def
		/AGMCORE_&usrmakepattern/makepattern load def
	}if
	/currentcmykcolor[0 0 0 0]AGMCORE_gput
	/currentstrokeadjust false AGMCORE_gput
	/currentcolorspace[/DeviceGray]AGMCORE_gput
	/sep_tint 0 AGMCORE_gput
	/devicen_tints[0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0]AGMCORE_gput
	/sep_colorspace_dict null AGMCORE_gput
	/devicen_colorspace_dict null AGMCORE_gput
	/indexed_colorspace_dict null AGMCORE_gput
	/currentcolor_intent()AGMCORE_gput
	/customcolor_tint 1 AGMCORE_gput
	/absolute_colorimetric_crd null AGMCORE_gput
	/relative_colorimetric_crd null AGMCORE_gput
	/saturation_crd null AGMCORE_gput
	/perceptual_crd null AGMCORE_gput
	currentcolortransfer cvlit/AGMCore_gray_xfer xdf cvlit/AGMCore_b_xfer xdf
		 cvlit/AGMCore_g_xfer xdf cvlit/AGMCore_r_xfer xdf
	<<
	/MaxPatternItem currentsystemparams/MaxPatternCache get
	>>
	setuserparams
	end
}def
/ps
{
	/setcmykcolor where{
		pop
		Adobe_AGM_Core/AGMCORE_&setcmykcolor/setcmykcolor load put
	}if
	Adobe_AGM_Core begin
	/setcmykcolor
	{
		4 copy AGMCORE_cmykbuf astore/currentcmykcolor exch AGMCORE_gput
		1 sub 4 1 roll
		3{
			3 index add neg dup 0 lt{
				pop 0
			}if
			3 1 roll
		}repeat
		setrgbcolor pop
	}ndf
	/currentcmykcolor
	{
		/currentcmykcolor AGMCORE_gget aload pop
	}ndf
	/setoverprint
	{pop}ndf
	/currentoverprint
	{false}ndf
	/AGMCORE_cyan_plate 1 0 0 0 test_cmyk_color_plate def
	/AGMCORE_magenta_plate 0 1 0 0 test_cmyk_color_plate def
	/AGMCORE_yellow_plate 0 0 1 0 test_cmyk_color_plate def
	/AGMCORE_black_plate 0 0 0 1 test_cmyk_color_plate def
	/AGMCORE_plate_ndx 
		AGMCORE_cyan_plate{
			0
		}{
			AGMCORE_magenta_plate{
				1
			}{
				AGMCORE_yellow_plate{
					2
				}{
					AGMCORE_black_plate{
						3
					}{
						4
					}ifelse
				}ifelse
			}ifelse
		}ifelse
		def
	/AGMCORE_have_reported_unsupported_color_space false def
	/AGMCORE_report_unsupported_color_space
	{
		AGMCORE_have_reported_unsupported_color_space false eq
		{
			(Warning: Job contains content that cannot be separated with on-host methods. This content appears on the black plate, and knocks out all other plates.)==
			Adobe_AGM_Core/AGMCORE_have_reported_unsupported_color_space true ddf
		}if
	}def
	/AGMCORE_composite_job
		AGMCORE_cyan_plate AGMCORE_magenta_plate and AGMCORE_yellow_plate and AGMCORE_black_plate and def
	/AGMCORE_in_rip_sep
		/AGMCORE_in_rip_sep where{
			pop AGMCORE_in_rip_sep
		}{
			AGMCORE_distilling 
			{
				false
			}{
				userdict/Adobe_AGM_OnHost_Seps known{
					false
				}{
					level2{
						currentpagedevice/Separations 2 copy known{
							get
						}{
							pop pop false
						}ifelse
					}{
						false
					}ifelse
				}ifelse
			}ifelse
		}ifelse
	def
	/AGMCORE_producing_seps AGMCORE_composite_job not AGMCORE_in_rip_sep or def
	/AGMCORE_host_sep AGMCORE_producing_seps AGMCORE_in_rip_sep not and def
	/AGM_preserve_spots 
		/AGM_preserve_spots where{
			pop AGM_preserve_spots
		}{
			AGMCORE_distilling AGMCORE_producing_seps or
		}ifelse
	def
	/AGM_is_distiller_preserving_spotimages
	{
		currentdistillerparams/PreserveOverprintSettings known
		{
			currentdistillerparams/PreserveOverprintSettings get
				{
					currentdistillerparams/ColorConversionStrategy known
					{
						currentdistillerparams/ColorConversionStrategy get
						/sRGB ne
					}{
						true
					}ifelse
				}{
					false
				}ifelse
		}{
			false
		}ifelse
	}def
	/convert_spot_to_process where{pop}{
		/convert_spot_to_process
		{
			//Adobe_AGM_Core begin
			dup map_alias{
				/Name get exch pop
			}if
			dup dup(None)eq exch(All)eq or
				{
				pop false
				}{
				AGMCORE_host_sep
				{
					gsave
					1 0 0 0 setcmykcolor currentgray 1 exch sub
					0 1 0 0 setcmykcolor currentgray 1 exch sub
					0 0 1 0 setcmykcolor currentgray 1 exch sub
					0 0 0 1 setcmykcolor currentgray 1 exch sub
					add add add 0 eq
					{
						pop false
					}{
						false setoverprint
						current_spot_alias false set_spot_alias
						1 1 1 1 6 -1 roll findcmykcustomcolor 1 setcustomcolor
						set_spot_alias
						currentgray 1 ne
					}ifelse
					grestore
				}{
					AGMCORE_distilling
					{
						pop AGM_is_distiller_preserving_spotimages not
					}{
						//Adobe_AGM_Core/AGMCORE_name xddf
						false
						//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 0 eq
						AGMUTIL_cpd/OverrideSeparations known and
						{
							AGMUTIL_cpd/OverrideSeparations get
							{
								/HqnSpots/ProcSet resourcestatus
								{
									pop pop pop true
								}if
							}if
						}if					
						{
							AGMCORE_name/HqnSpots/ProcSet findresource/TestSpot gx not
						}{
							gsave
							[/Separation AGMCORE_name/DeviceGray{}]AGMCORE_&setcolorspace
							false
							AGMUTIL_cpd/SeparationColorNames 2 copy known
							{
								get
								{AGMCORE_name eq or}forall
								not
							}{
								pop pop pop true
							}ifelse
							grestore
						}ifelse
					}ifelse
				}ifelse
			}ifelse
			end
		}def
	}ifelse
	/convert_to_process where{pop}{
		/convert_to_process
		{
			dup length 0 eq
				{
				pop false
				}{
				AGMCORE_host_sep
				{
				dup true exch
					{
					dup(Cyan)eq exch
					dup(Magenta)eq 3 -1 roll or exch
					dup(Yellow)eq 3 -1 roll or exch
					dup(Black)eq 3 -1 roll or
						{pop}
						{convert_spot_to_process and}ifelse
					}
				forall
					{
					true exch
						{
						dup(Cyan)eq exch
						dup(Magenta)eq 3 -1 roll or exch
						dup(Yellow)eq 3 -1 roll or exch
						(Black)eq or and
						}forall
						not
					}{pop false}ifelse
				}{
				false exch
					{
					/PhotoshopDuotoneList where{pop false}{true}ifelse
						{
						dup(Cyan)eq exch
						dup(Magenta)eq 3 -1 roll or exch
						dup(Yellow)eq 3 -1 roll or exch
						dup(Black)eq 3 -1 roll or
						{pop}
						{convert_spot_to_process or}ifelse
						}
						{
						convert_spot_to_process or
						}
					ifelse
					}
				forall
				}ifelse
			}ifelse
		}def
	}ifelse	
	/AGMCORE_avoid_L2_sep_space 
		version cvr 2012 lt 
		level2 and 
		AGMCORE_producing_seps not and
	def
	/AGMCORE_is_cmyk_sep
		AGMCORE_cyan_plate AGMCORE_magenta_plate or AGMCORE_yellow_plate or AGMCORE_black_plate or
	def
	/AGM_avoid_0_cmyk where{
		pop AGM_avoid_0_cmyk
	}{
		AGM_preserve_spots 
		userdict/Adobe_AGM_OnHost_Seps known 
		userdict/Adobe_AGM_InRip_Seps known or
		not and
	}ifelse
	{
		/setcmykcolor[
			{
				4 copy add add add 0 eq currentoverprint and{
					pop 0.0005
				}if
			}/exec cvx
			/AGMCORE_&setcmykcolor load dup type/operatortype ne{
				/exec cvx
			}if
		]cvx def
	}if
	/AGMCORE_IsSeparationAProcessColor
		{
		dup(Cyan)eq exch dup(Magenta)eq exch dup(Yellow)eq exch(Black)eq or or or
		}def
	AGMCORE_host_sep{
		/setcolortransfer
		{
			AGMCORE_cyan_plate{
				pop pop pop
			}{
			 	AGMCORE_magenta_plate{
			 		4 3 roll pop pop pop
			 	}{
			 		AGMCORE_yellow_plate{
			 			4 2 roll pop pop pop
			 		}{
			 			4 1 roll pop pop pop
			 		}ifelse
			 	}ifelse
			}ifelse
			settransfer 
		}	
		def
		/AGMCORE_get_ink_data
			AGMCORE_cyan_plate{
				{pop pop pop}
			}{
			 	AGMCORE_magenta_plate{
			 		{4 3 roll pop pop pop}
			 	}{
			 		AGMCORE_yellow_plate{
			 			{4 2 roll pop pop pop}
			 		}{
			 			{4 1 roll pop pop pop}
			 		}ifelse
			 	}ifelse
			}ifelse
		def
		/AGMCORE_RemoveProcessColorNames
			{
			1 dict begin
			/filtername
				{
				dup/Cyan eq 1 index(Cyan)eq or
					{pop(_cyan_)}if
				dup/Magenta eq 1 index(Magenta)eq or
					{pop(_magenta_)}if
				dup/Yellow eq 1 index(Yellow)eq or
					{pop(_yellow_)}if
				dup/Black eq 1 index(Black)eq or
					{pop(_black_)}if
				}def
			dup type/arraytype eq
				{[exch{filtername}forall]}
				{filtername}ifelse
			end
			}def
		level3{
			/AGMCORE_IsCurrentColor
				{
				dup AGMCORE_IsSeparationAProcessColor
					{
					AGMCORE_plate_ndx 0 eq
						{dup(Cyan)eq exch/Cyan eq or}if
					AGMCORE_plate_ndx 1 eq
						{dup(Magenta)eq exch/Magenta eq or}if
					AGMCORE_plate_ndx 2 eq
						{dup(Yellow)eq exch/Yellow eq or}if
					AGMCORE_plate_ndx 3 eq
						{dup(Black)eq exch/Black eq or}if
					AGMCORE_plate_ndx 4 eq
						{pop false}if
					}{
					gsave
					false setoverprint
					current_spot_alias false set_spot_alias
					1 1 1 1 6 -1 roll findcmykcustomcolor 1 setcustomcolor
					set_spot_alias
					currentgray 1 ne
					grestore
					}ifelse
				}def
			/AGMCORE_filter_functiondatasource
				{	
				5 dict begin
				/data_in xdf
				data_in type/stringtype eq
					{
					/ncomp xdf
					/comp xdf
					/string_out data_in length ncomp idiv string def
					0 ncomp data_in length 1 sub
						{
						string_out exch dup ncomp idiv exch data_in exch ncomp getinterval comp get 255 exch sub put
						}for
					string_out
					}{
					string/string_in xdf
					/string_out 1 string def
					/component xdf
					[
					data_in string_in/readstring cvx
						[component/get cvx 255/exch cvx/sub cvx string_out/exch cvx 0/exch cvx/put cvx string_out]cvx
						[/pop cvx()]cvx/ifelse cvx
					]cvx/ReusableStreamDecode filter
				}ifelse
				end
				}def
			/AGMCORE_separateShadingFunction
				{
				2 dict begin
				/paint? xdf
				/channel xdf
				dup type/dicttype eq
					{
					begin
					FunctionType 0 eq
						{
						/DataSource channel Range length 2 idiv DataSource AGMCORE_filter_functiondatasource def
						currentdict/Decode known
							{/Decode Decode channel 2 mul 2 getinterval def}if
						paint? not
							{/Decode[1 1]def}if
						}if
					FunctionType 2 eq
						{
						paint?
							{
							/C0[C0 channel get 1 exch sub]def
							/C1[C1 channel get 1 exch sub]def
							}{
							/C0[1]def
							/C1[1]def
							}ifelse			
						}if
					FunctionType 3 eq
						{
						/Functions[Functions{channel paint? AGMCORE_separateShadingFunction}forall]def			
						}if
					currentdict/Range known
						{/Range[0 1]def}if
					currentdict
					end}{
					channel get 0 paint? AGMCORE_separateShadingFunction
					}ifelse
				end
				}def
			/AGMCORE_separateShading
				{
				3 -1 roll begin
				currentdict/Function known
					{
					currentdict/Background known
						{[1 index{Background 3 index get 1 exch sub}{1}ifelse]/Background xdf}if
					Function 3 1 roll AGMCORE_separateShadingFunction/Function xdf
					/ColorSpace[/DeviceGray]def
					}{
					ColorSpace dup type/arraytype eq{0 get}if/DeviceCMYK eq
						{
						/ColorSpace[/DeviceN[/_cyan_/_magenta_/_yellow_/_black_]/DeviceCMYK{}]def
						}{
						ColorSpace dup 1 get AGMCORE_RemoveProcessColorNames 1 exch put
						}ifelse
					ColorSpace 0 get/Separation eq
						{
							{
								[1/exch cvx/sub cvx]cvx
							}{
								[/pop cvx 1]cvx
							}ifelse
							ColorSpace 3 3 -1 roll put
							pop
						}{
							{
								[exch ColorSpace 1 get length 1 sub exch sub/index cvx 1/exch cvx/sub cvx ColorSpace 1 get length 1 add 1/roll cvx ColorSpace 1 get length{/pop cvx}repeat]cvx
							}{
								pop[ColorSpace 1 get length{/pop cvx}repeat cvx 1]cvx
							}ifelse
							ColorSpace 3 3 -1 roll bind put
						}ifelse
					ColorSpace 2/DeviceGray put																		
					}ifelse
				end
				}def
			/AGMCORE_separateShadingDict
				{
				dup/ColorSpace get
				dup type/arraytype ne
					{[exch]}if
				dup 0 get/DeviceCMYK eq
					{
					exch begin 
					currentdict
					AGMCORE_cyan_plate
						{0 true}if
					AGMCORE_magenta_plate
						{1 true}if
					AGMCORE_yellow_plate
						{2 true}if
					AGMCORE_black_plate
						{3 true}if
					AGMCORE_plate_ndx 4 eq
						{0 false}if		
					dup not currentoverprint and
						{/AGMCORE_ignoreshade true def}if
					AGMCORE_separateShading
					currentdict
					end exch
					}if
				dup 0 get/Separation eq
					{
					exch begin
					ColorSpace 1 get dup/None ne exch/All ne and
						{
						ColorSpace 1 get AGMCORE_IsCurrentColor AGMCORE_plate_ndx 4 lt and ColorSpace 1 get AGMCORE_IsSeparationAProcessColor not and
							{
							ColorSpace 2 get dup type/arraytype eq{0 get}if/DeviceCMYK eq 
								{
								/ColorSpace
									[
									/Separation
									ColorSpace 1 get
									/DeviceGray
										[
										ColorSpace 3 get/exec cvx
										4 AGMCORE_plate_ndx sub -1/roll cvx
										4 1/roll cvx
										3[/pop cvx]cvx/repeat cvx
										1/exch cvx/sub cvx
										]cvx									
									]def
								}{
								AGMCORE_report_unsupported_color_space
								AGMCORE_black_plate not
									{
									currentdict 0 false AGMCORE_separateShading
									}if
								}ifelse
							}{
							currentdict ColorSpace 1 get AGMCORE_IsCurrentColor
							0 exch 
							dup not currentoverprint and
								{/AGMCORE_ignoreshade true def}if
							AGMCORE_separateShading
							}ifelse	
						}if			
					currentdict
					end exch
					}if
				dup 0 get/DeviceN eq
					{
					exch begin
					ColorSpace 1 get convert_to_process
						{
						ColorSpace 2 get dup type/arraytype eq{0 get}if/DeviceCMYK eq 
							{
							/ColorSpace
								[
								/DeviceN
								ColorSpace 1 get
								/DeviceGray
									[
									ColorSpace 3 get/exec cvx
									4 AGMCORE_plate_ndx sub -1/roll cvx
									4 1/roll cvx
									3[/pop cvx]cvx/repeat cvx
									1/exch cvx/sub cvx
									]cvx									
								]def
							}{
							AGMCORE_report_unsupported_color_space
							AGMCORE_black_plate not
								{
								currentdict 0 false AGMCORE_separateShading
								/ColorSpace[/DeviceGray]def
								}if
							}ifelse
						}{
						currentdict
						false -1 ColorSpace 1 get
							{
							AGMCORE_IsCurrentColor
								{
								1 add
								exch pop true exch exit
								}if
							1 add
							}forall
						exch 
						dup not currentoverprint and
							{/AGMCORE_ignoreshade true def}if
						AGMCORE_separateShading
						}ifelse
					currentdict
					end exch
					}if
				dup 0 get dup/DeviceCMYK eq exch dup/Separation eq exch/DeviceN eq or or not
					{
					exch begin
					ColorSpace dup type/arraytype eq
						{0 get}if
					/DeviceGray ne
						{
						AGMCORE_report_unsupported_color_space
						AGMCORE_black_plate not
							{
							ColorSpace 0 get/CIEBasedA eq
								{
								/ColorSpace[/Separation/_ciebaseda_/DeviceGray{}]def
								}if
							ColorSpace 0 get dup/CIEBasedABC eq exch dup/CIEBasedDEF eq exch/DeviceRGB eq or or
								{
								/ColorSpace[/DeviceN[/_red_/_green_/_blue_]/DeviceRGB{}]def
								}if
							ColorSpace 0 get/CIEBasedDEFG eq
								{
								/ColorSpace[/DeviceN[/_cyan_/_magenta_/_yellow_/_black_]/DeviceCMYK{}]def
								}if
							currentdict 0 false AGMCORE_separateShading
							}if
						}if
					currentdict
					end exch
					}if
				pop
				dup/AGMCORE_ignoreshade known
					{
					begin
					/ColorSpace[/Separation(None)/DeviceGray{}]def
					currentdict end
					}if
				}def
			/shfill
				{
				AGMCORE_separateShadingDict 
				dup/AGMCORE_ignoreshade known
					{pop}
					{AGMCORE_&sysshfill}ifelse
				}def
			/makepattern
				{
				exch
				dup/PatternType get 2 eq
					{
					clonedict
					begin
					/Shading Shading AGMCORE_separateShadingDict def
					Shading/AGMCORE_ignoreshade known
					currentdict end exch
					{pop<</PatternType 1/PaintProc{pop}/BBox[0 0 1 1]/XStep 1/YStep 1/PaintType 1/TilingType 3>>}if
					exch AGMCORE_&sysmakepattern
					}{
					exch AGMCORE_&usrmakepattern
					}ifelse
				}def
		}if
	}if
	AGMCORE_in_rip_sep{
		/setcustomcolor
		{
			exch aload pop
			dup 7 1 roll inRip_spot_has_ink not	{
				4{4 index mul 4 1 roll}
				repeat
				/DeviceCMYK setcolorspace
				6 -2 roll pop pop
			}{
				//Adobe_AGM_Core begin
					/AGMCORE_k xdf/AGMCORE_y xdf/AGMCORE_m xdf/AGMCORE_c xdf
				end
				[/Separation 4 -1 roll/DeviceCMYK
				{dup AGMCORE_c mul exch dup AGMCORE_m mul exch dup AGMCORE_y mul exch AGMCORE_k mul}
				]
				setcolorspace
			}ifelse
			setcolor
		}ndf
		/setseparationgray
		{
			[/Separation(All)/DeviceGray{}]setcolorspace_opt
			1 exch sub setcolor
		}ndf
	}{
		/setseparationgray
		{
			AGMCORE_&setgray
		}ndf
	}ifelse
	/findcmykcustomcolor
	{
		5 makereadonlyarray
	}ndf
	/setcustomcolor
	{
		exch aload pop pop
		4{4 index mul 4 1 roll}repeat
		setcmykcolor pop
	}ndf
	/has_color
		/colorimage where{
			AGMCORE_producing_seps{
				pop true
			}{
				systemdict eq
			}ifelse
		}{
			false
		}ifelse
	def
	/map_index
	{
		1 index mul exch getinterval{255 div}forall
	}bdf
	/map_indexed_devn
	{
		Lookup Names length 3 -1 roll cvi map_index
	}bdf
	/n_color_components
	{
		base_colorspace_type
		dup/DeviceGray eq{
			pop 1
		}{
			/DeviceCMYK eq{
				4
			}{
				3
			}ifelse
		}ifelse
	}bdf
	level2{
		/mo/moveto ldf
		/li/lineto ldf
		/cv/curveto ldf
		/knockout_unitsq
		{
			1 setgray
			0 0 1 1 rectfill
		}def
		level2/setcolorspace AGMCORE_key_known not and{
			/AGMCORE_&&&setcolorspace/setcolorspace ldf
			/AGMCORE_ReplaceMappedColor
			{
				dup type dup/arraytype eq exch/packedarraytype eq or
				{
					/AGMCORE_SpotAliasAry2 where{
						begin
						dup 0 get dup/Separation eq
						{
							pop
							dup length array copy
							dup dup 1 get
							current_spot_alias
							{
								dup map_alias
								{
									false set_spot_alias
									dup 1 exch setsepcolorspace
									true set_spot_alias
									begin
									/sep_colorspace_dict currentdict AGMCORE_gput
									pop pop	pop
									[
										/Separation Name 
										CSA map_csa
										MappedCSA 
										/sep_colorspace_proc load
									]
									dup Name
									end
								}if
							}if
							map_reserved_ink_name 1 xpt
						}{
							/DeviceN eq 
							{
								dup length array copy
								dup dup 1 get[
									exch{
										current_spot_alias{
											dup map_alias{
												/Name get exch pop
											}if
										}if
										map_reserved_ink_name
									}forall 
								]1 xpt
							}if
						}ifelse
						end
					}if
				}if
			}def
			/setcolorspace
			{
				dup type dup/arraytype eq exch/packedarraytype eq or
				{
					dup 0 get/Indexed eq
					{
						AGMCORE_distilling
						{
							/PhotoshopDuotoneList where
							{
								pop false
							}{
								true
							}ifelse
						}{
							true
						}ifelse
						{
							aload pop 3 -1 roll
							AGMCORE_ReplaceMappedColor
							3 1 roll 4 array astore
						}if
					}{
						AGMCORE_ReplaceMappedColor
					}ifelse
				}if
				DeviceN_PS2_inRip_seps{AGMCORE_&&&setcolorspace}if
			}def
		}if	
	}{
		/adj
		{
			currentstrokeadjust{
				transform
				0.25 sub round 0.25 add exch
				0.25 sub round 0.25 add exch
				itransform
			}if
		}def
		/mo{
			adj moveto
		}def
		/li{
			adj lineto
		}def
		/cv{
			6 2 roll adj
			6 2 roll adj
			6 2 roll adj curveto
		}def
		/knockout_unitsq
		{
			1 setgray
			8 8 1[8 0 0 8 0 0]{<ffffffffffffffff>}image
		}def
		/currentstrokeadjust{
			/currentstrokeadjust AGMCORE_gget
		}def
		/setstrokeadjust{
			/currentstrokeadjust exch AGMCORE_gput
		}def
		/setcolorspace
		{
			/currentcolorspace exch AGMCORE_gput
		}def
		/currentcolorspace
		{
			/currentcolorspace AGMCORE_gget
		}def
		/setcolor_devicecolor
		{
			base_colorspace_type
			dup/DeviceGray eq{
				pop setgray
			}{
				/DeviceCMYK eq{
					setcmykcolor
				}{
					setrgbcolor
				}ifelse
			}ifelse
		}def
		/setcolor
		{
			currentcolorspace 0 get
			dup/DeviceGray ne{
				dup/DeviceCMYK ne{
					dup/DeviceRGB ne{
						dup/Separation eq{
							pop
							currentcolorspace 3 gx
							currentcolorspace 2 get
						}{
							dup/Indexed eq{
								pop
								currentcolorspace 3 get dup type/stringtype eq{
									currentcolorspace 1 get n_color_components
									3 -1 roll map_index
								}{
									exec
								}ifelse
								currentcolorspace 1 get
							}{
								/AGMCORE_cur_err/AGMCORE_invalid_color_space def
								AGMCORE_invalid_color_space
							}ifelse
						}ifelse
					}if
				}if
			}if
			setcolor_devicecolor
		}def
	}ifelse
	/sop/setoverprint ldf
	/lw/setlinewidth ldf
	/lc/setlinecap ldf
	/lj/setlinejoin ldf
	/ml/setmiterlimit ldf
	/dsh/setdash ldf
	/sadj/setstrokeadjust ldf
	/gry/setgray ldf
	/rgb/setrgbcolor ldf
	/cmyk[
		/currentcolorspace[/DeviceCMYK]/AGMCORE_gput cvx
		/setcmykcolor load dup type/operatortype ne{/exec cvx}if
	]cvx bdf
	level3 AGMCORE_host_sep not and{
		/nzopmsc{
			6 dict begin
			/kk exch def
			/yy exch def
			/mm exch def
			/cc exch def
			/sum 0 def
			cc 0 ne{/sum sum 2#1000 or def cc}if
			mm 0 ne{/sum sum 2#0100 or def mm}if
			yy 0 ne{/sum sum 2#0010 or def yy}if
			kk 0 ne{/sum sum 2#0001 or def kk}if
			AGMCORE_CMYKDeviceNColorspaces sum get setcolorspace
			sum 0 eq{0}if
			end
			setcolor
		}bdf
	}{
		/nzopmsc/cmyk ldf
	}ifelse
	/sep/setsepcolor ldf
	/devn/setdevicencolor ldf
	/idx/setindexedcolor ldf
	/colr/setcolor ldf
	/csacrd/set_csa_crd ldf
	/sepcs/setsepcolorspace ldf
	/devncs/setdevicencolorspace ldf
	/idxcs/setindexedcolorspace ldf
	/cp/closepath ldf
	/clp/clp_npth ldf
	/eclp/eoclp_npth ldf
	/f/fill ldf
	/ef/eofill ldf
	/@/stroke ldf
	/nclp/npth_clp ldf
	/gset/graphic_setup ldf
	/gcln/graphic_cleanup ldf
	/ct/concat ldf
	/cf/currentfile ldf
	/fl/filter ldf
	/rs/readstring ldf
	/AGMCORE_def_ht currenthalftone def
	/clonedict Adobe_AGM_Utils begin/clonedict load end def
	/clonearray Adobe_AGM_Utils begin/clonearray load end def
	currentdict{
		dup xcheck 1 index type dup/arraytype eq exch/packedarraytype eq or and{
			bind
		}if
		def
	}forall
	/getrampcolor
	{
		/indx exch def
		0 1 NumComp 1 sub
		{
			dup
			Samples exch get
			dup type/stringtype eq{indx get}if
			exch
			Scaling exch get aload pop
			3 1 roll
			mul add
		}for
		ColorSpaceFamily/Separation eq 
		{sep}
		{
			ColorSpaceFamily/DeviceN eq
			{devn}{setcolor}ifelse
		}ifelse
	}bdf
	/sssetbackground{
		aload pop 
		ColorSpaceFamily/Separation eq 
		{sep}
		{
			ColorSpaceFamily/DeviceN eq
			{devn}{setcolor}ifelse
		}ifelse	
	}bdf
	/RadialShade
	{
		40 dict begin
		/ColorSpaceFamily xdf
		/background xdf
		/ext1 xdf
		/ext0 xdf
		/BBox xdf
		/r2 xdf
		/c2y xdf
		/c2x xdf
		/r1 xdf
		/c1y xdf
		/c1x xdf
		/rampdict xdf
		/setinkoverprint where{pop/setinkoverprint{pop}def}if
		gsave
		BBox length 0 gt
		{
			np
			BBox 0 get BBox 1 get moveto
			BBox 2 get BBox 0 get sub 0 rlineto
			0 BBox 3 get BBox 1 get sub rlineto
			BBox 2 get BBox 0 get sub neg 0 rlineto
			closepath
			clip
			np
		}if
		c1x c2x eq
		{
			c1y c2y lt{/theta 90 def}{/theta 270 def}ifelse
		}{
			/slope c2y c1y sub c2x c1x sub div def
			/theta slope 1 atan def
			c2x c1x lt c2y c1y ge and{/theta theta 180 sub def}if
			c2x c1x lt c2y c1y lt and{/theta theta 180 add def}if
		}ifelse
		gsave
		clippath
		c1x c1y translate
		theta rotate
		-90 rotate
		{pathbbox}stopped
		{0 0 0 0}if
		/yMax xdf
		/xMax xdf
		/yMin xdf
		/xMin xdf
		grestore
		xMax xMin eq yMax yMin eq or
		{
			grestore
			end
		}{
			/max{2 copy gt{pop}{exch pop}ifelse}bdf
			/min{2 copy lt{pop}{exch pop}ifelse}bdf
			rampdict begin
			40 dict begin
			background length 0 gt{background sssetbackground gsave clippath fill grestore}if
			gsave
			c1x c1y translate
			theta rotate
			-90 rotate
			/c2y c1x c2x sub dup mul c1y c2y sub dup mul add sqrt def
			/c1y 0 def
			/c1x 0 def
			/c2x 0 def
			ext0
			{
				0 getrampcolor
				c2y r2 add r1 sub 0.0001 lt
				{
					c1x c1y r1 360 0 arcn
					pathbbox
					/aymax exch def
					/axmax exch def
					/aymin exch def
					/axmin exch def
					/bxMin xMin axmin min def
					/byMin yMin aymin min def
					/bxMax xMax axmax max def
					/byMax yMax aymax max def
					bxMin byMin moveto
					bxMax byMin lineto
					bxMax byMax lineto
					bxMin byMax lineto
					bxMin byMin lineto
					eofill
				}{
					c2y r1 add r2 le
					{
						c1x c1y r1 0 360 arc
						fill
					}
					{
						c2x c2y r2 0 360 arc fill
						r1 r2 eq
						{
							/p1x r1 neg def
							/p1y c1y def
							/p2x r1 def
							/p2y c1y def
							p1x p1y moveto p2x p2y lineto p2x yMin lineto p1x yMin lineto
							fill
						}{
							/AA r2 r1 sub c2y div def
							AA -1 eq
							{/theta 89.99 def}
							{/theta AA 1 AA dup mul sub sqrt div 1 atan def}
							ifelse
							/SS1 90 theta add dup sin exch cos div def
							/p1x r1 SS1 SS1 mul SS1 SS1 mul 1 add div sqrt mul neg def
							/p1y p1x SS1 div neg def
							/SS2 90 theta sub dup sin exch cos div def
							/p2x r1 SS2 SS2 mul SS2 SS2 mul 1 add div sqrt mul def
							/p2y p2x SS2 div neg def
							r1 r2 gt
							{
								/L1maxX p1x yMin p1y sub SS1 div add def
								/L2maxX p2x yMin p2y sub SS2 div add def
							}{
								/L1maxX 0 def
								/L2maxX 0 def
							}ifelse
							p1x p1y moveto p2x p2y lineto L2maxX L2maxX p2x sub SS2 mul p2y add lineto
							L1maxX L1maxX p1x sub SS1 mul p1y add lineto
							fill
						}ifelse
					}ifelse
				}ifelse
			}if
		c1x c2x sub dup mul
		c1y c2y sub dup mul
		add 0.5 exp
		0 dtransform
		dup mul exch dup mul add 0.5 exp 72 div
		0 72 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
		72 0 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
		1 index 1 index lt{exch}if pop
		/hires xdf
		hires mul
		/numpix xdf
		/numsteps NumSamples def
		/rampIndxInc 1 def
		/subsampling false def
		numpix 0 ne
		{
			NumSamples numpix div 0.5 gt
			{
				/numsteps numpix 2 div round cvi dup 1 le{pop 2}if def
				/rampIndxInc NumSamples 1 sub numsteps div def
				/subsampling true def
			}if
		}if
		/xInc c2x c1x sub numsteps div def
		/yInc c2y c1y sub numsteps div def
		/rInc r2 r1 sub numsteps div def
		/cx c1x def
		/cy c1y def
		/radius r1 def
		np
		xInc 0 eq yInc 0 eq rInc 0 eq and and
		{
			0 getrampcolor
			cx cy radius 0 360 arc
			stroke
			NumSamples 1 sub getrampcolor
			cx cy radius 72 hires div add 0 360 arc
			0 setlinewidth
			stroke
		}{
			0
			numsteps
			{
				dup
				subsampling{round cvi}if
				getrampcolor
				cx cy radius 0 360 arc
				/cx cx xInc add def
				/cy cy yInc add def
				/radius radius rInc add def
				cx cy radius 360 0 arcn
				eofill
				rampIndxInc add
			}repeat
			pop
		}ifelse
		ext1
		{
			c2y r2 add r1 lt
			{
				c2x c2y r2 0 360 arc
				fill
			}{
				c2y r1 add r2 sub 0.0001 le
				{
					c2x c2y r2 360 0 arcn
					pathbbox
					/aymax exch def
					/axmax exch def
					/aymin exch def
					/axmin exch def
					/bxMin xMin axmin min def
					/byMin yMin aymin min def
					/bxMax xMax axmax max def
					/byMax yMax aymax max def
					bxMin byMin moveto
					bxMax byMin lineto
					bxMax byMax lineto
					bxMin byMax lineto
					bxMin byMin lineto
					eofill
				}{
					c2x c2y r2 0 360 arc fill
					r1 r2 eq
					{
						/p1x r2 neg def
						/p1y c2y def
						/p2x r2 def
						/p2y c2y def
						p1x p1y moveto p2x p2y lineto p2x yMax lineto p1x yMax lineto
						fill
					}{
						/AA r2 r1 sub c2y div def
						AA -1 eq
						{/theta 89.99 def}
						{/theta AA 1 AA dup mul sub sqrt div 1 atan def}
						ifelse
						/SS1 90 theta add dup sin exch cos div def
						/p1x r2 SS1 SS1 mul SS1 SS1 mul 1 add div sqrt mul neg def
						/p1y c2y p1x SS1 div sub def
						/SS2 90 theta sub dup sin exch cos div def
						/p2x r2 SS2 SS2 mul SS2 SS2 mul 1 add div sqrt mul def
						/p2y c2y p2x SS2 div sub def
						r1 r2 lt
						{
							/L1maxX p1x yMax p1y sub SS1 div add def
							/L2maxX p2x yMax p2y sub SS2 div add def
						}{
							/L1maxX 0 def
							/L2maxX 0 def
						}ifelse
						p1x p1y moveto p2x p2y lineto L2maxX L2maxX p2x sub SS2 mul p2y add lineto
						L1maxX L1maxX p1x sub SS1 mul p1y add lineto
						fill
					}ifelse
				}ifelse
			}ifelse
		}if
		grestore
		grestore
		end
		end
		end
		}ifelse
	}bdf
	/GenStrips
	{
		40 dict begin
		/ColorSpaceFamily xdf
		/background xdf
		/ext1 xdf
		/ext0 xdf
		/BBox xdf
		/y2 xdf
		/x2 xdf
		/y1 xdf
		/x1 xdf
		/rampdict xdf
		/setinkoverprint where{pop/setinkoverprint{pop}def}if
		gsave
		BBox length 0 gt
		{
			np
			BBox 0 get BBox 1 get moveto
			BBox 2 get BBox 0 get sub 0 rlineto
			0 BBox 3 get BBox 1 get sub rlineto
			BBox 2 get BBox 0 get sub neg 0 rlineto
			closepath
			clip
			np
		}if
		x1 x2 eq
		{
			y1 y2 lt{/theta 90 def}{/theta 270 def}ifelse
		}{
			/slope y2 y1 sub x2 x1 sub div def
			/theta slope 1 atan def
			x2 x1 lt y2 y1 ge and{/theta theta 180 sub def}if
			x2 x1 lt y2 y1 lt and{/theta theta 180 add def}if
		}
		ifelse
		gsave
		clippath
		x1 y1 translate
		theta rotate
		{pathbbox}stopped
		{0 0 0 0}if
		/yMax exch def
		/xMax exch def
		/yMin exch def
		/xMin exch def
		grestore
		xMax xMin eq yMax yMin eq or
		{
			grestore
			end
		}{
			rampdict begin
			20 dict begin
			background length 0 gt{background sssetbackground gsave clippath fill grestore}if
			gsave
			x1 y1 translate
			theta rotate
			/xStart 0 def
			/xEnd x2 x1 sub dup mul y2 y1 sub dup mul add 0.5 exp def
			/ySpan yMax yMin sub def
			/numsteps NumSamples def
			/rampIndxInc 1 def
			/subsampling false def
			xStart 0 transform
			xEnd 0 transform
			3 -1 roll
			sub dup mul
			3 1 roll
			sub dup mul
			add 0.5 exp 72 div
			0 72 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
			72 0 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
			1 index 1 index lt{exch}if pop
			mul
			/numpix xdf
			numpix 0 ne
			{
				NumSamples numpix div 0.5 gt
				{
					/numsteps numpix 2 div round cvi dup 1 le{pop 2}if def
					/rampIndxInc NumSamples 1 sub numsteps div def
					/subsampling true def
				}if
			}if
			ext0
			{
				0 getrampcolor
				xMin xStart lt
				{
					xMin yMin xMin neg ySpan rectfill
				}if
			}if
			/xInc xEnd xStart sub numsteps div def
			/x xStart def
			0
			numsteps
			{
				dup
				subsampling{round cvi}if
				getrampcolor
				x yMin xInc ySpan rectfill
				/x x xInc add def
				rampIndxInc add
			}repeat
			pop
			ext1{
				xMax xEnd gt
				{
					xEnd yMin xMax xEnd sub ySpan rectfill
				}if
			}if
			grestore
			grestore
			end
			end
			end
		}ifelse
	}bdf
}def
/pt
{
	end
}def
/dt{
}def
/pgsv{
	//Adobe_AGM_Core/AGMCORE_save save put
}def
/pgrs{
	//Adobe_AGM_Core/AGMCORE_save get restore
}def
systemdict/findcolorrendering known{
	/findcolorrendering systemdict/findcolorrendering get def
}if
systemdict/setcolorrendering known{
	/setcolorrendering systemdict/setcolorrendering get def
}if
/test_cmyk_color_plate
{
	gsave
	setcmykcolor currentgray 1 ne
	grestore
}def
/inRip_spot_has_ink
{
	dup//Adobe_AGM_Core/AGMCORE_name xddf
	convert_spot_to_process not
}def
/map255_to_range
{
	1 index sub
	3 -1 roll 255 div mul add
}def
/set_csa_crd
{
	/sep_colorspace_dict null AGMCORE_gput
	begin
		CSA get_csa_by_name setcolorspace_opt
		set_crd
	end
}
def
/map_csa
{
	currentdict/MappedCSA known{MappedCSA null ne}{false}ifelse
	{pop}{get_csa_by_name/MappedCSA xdf}ifelse
}def
/setsepcolor
{
	/sep_colorspace_dict AGMCORE_gget begin
		dup/sep_tint exch AGMCORE_gput
		TintProc
	end
}def
/setdevicencolor
{
	/devicen_colorspace_dict AGMCORE_gget begin
		Names length copy
		Names length 1 sub -1 0
		{
			/devicen_tints AGMCORE_gget 3 1 roll xpt
		}for
		TintProc
	end
}def
/sep_colorspace_proc
{
	/AGMCORE_tmp exch store
	/sep_colorspace_dict AGMCORE_gget begin
	currentdict/Components known{
		Components aload pop 
		TintMethod/Lab eq{
			2{AGMCORE_tmp mul NComponents 1 roll}repeat
			LMax sub AGMCORE_tmp mul LMax add NComponents 1 roll
		}{
			TintMethod/Subtractive eq{
				NComponents{
					AGMCORE_tmp mul NComponents 1 roll
				}repeat
			}{
				NComponents{
					1 sub AGMCORE_tmp mul 1 add NComponents 1 roll
				}repeat
			}ifelse
		}ifelse
	}{
		ColorLookup AGMCORE_tmp ColorLookup length 1 sub mul round cvi get
		aload pop
	}ifelse
	end
}def
/sep_colorspace_gray_proc
{
	/AGMCORE_tmp exch store
	/sep_colorspace_dict AGMCORE_gget begin
	GrayLookup AGMCORE_tmp GrayLookup length 1 sub mul round cvi get
	end
}def
/sep_proc_name
{
	dup 0 get 
	dup/DeviceRGB eq exch/DeviceCMYK eq or level2 not and has_color not and{
		pop[/DeviceGray]
		/sep_colorspace_gray_proc
	}{
		/sep_colorspace_proc
	}ifelse
}def
/setsepcolorspace
{
	current_spot_alias{
		dup begin
			Name map_alias{
				exch pop
			}if
		end
	}if
	dup/sep_colorspace_dict exch AGMCORE_gput
	begin
	CSA map_csa
	/AGMCORE_sep_special Name dup()eq exch(All)eq or store
	AGMCORE_avoid_L2_sep_space{
		[/Indexed MappedCSA sep_proc_name 255 exch 
			{255 div}/exec cvx 3 -1 roll[4 1 roll load/exec cvx]cvx 
		]setcolorspace_opt
		/TintProc{
			255 mul round cvi setcolor
		}bdf
	}{
		MappedCSA 0 get/DeviceCMYK eq 
		currentdict/Components known and 
		AGMCORE_sep_special not and{
			/TintProc[
				Components aload pop Name findcmykcustomcolor 
				/exch cvx/setcustomcolor cvx
			]cvx bdf
		}{
 			AGMCORE_host_sep Name(All)eq and{
 				/TintProc{
					1 exch sub setseparationgray 
				}bdf
 			}{
				AGMCORE_in_rip_sep MappedCSA 0 get/DeviceCMYK eq and 
				AGMCORE_host_sep or
				Name()eq and{
					/TintProc[
						MappedCSA sep_proc_name exch 0 get/DeviceCMYK eq{
							cvx/setcmykcolor cvx
						}{
							cvx/setgray cvx
						}ifelse
					]cvx bdf
				}{
					AGMCORE_producing_seps MappedCSA 0 get dup/DeviceCMYK eq exch/DeviceGray eq or and AGMCORE_sep_special not and{
	 					/TintProc[
							/dup cvx
							MappedCSA sep_proc_name cvx exch
							0 get/DeviceGray eq{
								1/exch cvx/sub cvx 0 0 0 4 -1/roll cvx
							}if
							/Name cvx/findcmykcustomcolor cvx/exch cvx
							AGMCORE_host_sep{
								AGMCORE_is_cmyk_sep
								/Name cvx 
								/AGMCORE_IsSeparationAProcessColor load/exec cvx
								/not cvx/and cvx 
							}{
								Name inRip_spot_has_ink not
							}ifelse
							[
		 						/pop cvx 1
							]cvx/if cvx
							/setcustomcolor cvx
						]cvx bdf
 					}{
						/TintProc{setcolor}bdf
						[/Separation Name MappedCSA sep_proc_name load]setcolorspace_opt
					}ifelse
				}ifelse
			}ifelse
		}ifelse
	}ifelse
	set_crd
	setsepcolor
	end
}def
/additive_blend
{
 	3 dict begin
 	/numarrays xdf
 	/numcolors xdf
 	0 1 numcolors 1 sub
 		{
 		/c1 xdf
 		1
 		0 1 numarrays 1 sub
 			{
			1 exch add/index cvx
 			c1/get cvx/mul cvx
 			}for
 		numarrays 1 add 1/roll cvx 
 		}for
 	numarrays[/pop cvx]cvx/repeat cvx
 	end
}def
/subtractive_blend
{
	3 dict begin
	/numarrays xdf
	/numcolors xdf
	0 1 numcolors 1 sub
		{
		/c1 xdf
		1 1
		0 1 numarrays 1 sub
			{
			1 3 3 -1 roll add/index cvx 
			c1/get cvx/sub cvx/mul cvx
			}for
		/sub cvx
		numarrays 1 add 1/roll cvx
		}for
	numarrays[/pop cvx]cvx/repeat cvx
	end
}def
/exec_tint_transform
{
	/TintProc[
		/TintTransform cvx/setcolor cvx
	]cvx bdf
	MappedCSA setcolorspace_opt
}bdf
/devn_makecustomcolor
{
	2 dict begin
	/names_index xdf
	/Names xdf
	1 1 1 1 Names names_index get findcmykcustomcolor
	/devicen_tints AGMCORE_gget names_index get setcustomcolor
	Names length{pop}repeat
	end
}bdf
/setdevicencolorspace
{
	dup/AliasedColorants known{false}{true}ifelse 
	current_spot_alias and{
		7 dict begin
		/names_index 0 def
		dup/names_len exch/Names get length def
		/new_names names_len array def
		/new_LookupTables names_len array def
		/alias_cnt 0 def
		dup/Names get
		{
			dup map_alias{
				exch pop
				dup/ColorLookup known{
					dup begin
					new_LookupTables names_index ColorLookup put
					end
				}{
					dup/Components known{
						dup begin
						new_LookupTables names_index Components put
						end
					}{
						dup begin
						new_LookupTables names_index[null null null null]put
						end
					}ifelse
				}ifelse
				new_names names_index 3 -1 roll/Name get put
				/alias_cnt alias_cnt 1 add def 
			}{
				/name xdf				
				new_names names_index name put
				dup/LookupTables known{
					dup begin
					new_LookupTables names_index LookupTables names_index get put
					end
				}{
					dup begin
					new_LookupTables names_index[null null null null]put
					end
				}ifelse
			}ifelse
			/names_index names_index 1 add def 
		}forall
		alias_cnt 0 gt{
			/AliasedColorants true def
			/lut_entry_len new_LookupTables 0 get dup length 256 ge{0 get length}{length}ifelse def
			0 1 names_len 1 sub{
				/names_index xdf
				new_LookupTables names_index get dup length 256 ge{0 get length}{length}ifelse lut_entry_len ne{
					/AliasedColorants false def
					exit
				}{
					new_LookupTables names_index get 0 get null eq{
						dup/Names get names_index get/name xdf
						name(Cyan)eq name(Magenta)eq name(Yellow)eq name(Black)eq
						or or or not{
							/AliasedColorants false def
							exit
						}if
					}if
				}ifelse
			}for
			lut_entry_len 1 eq{
				/AliasedColorants false def
			}if
			AliasedColorants{
				dup begin
				/Names new_names def
				/LookupTables new_LookupTables def
				/AliasedColorants true def
				/NComponents lut_entry_len def
				/TintMethod NComponents 4 eq{/Subtractive}{/Additive}ifelse def
				/MappedCSA TintMethod/Additive eq{/DeviceRGB}{/DeviceCMYK}ifelse def
				currentdict/TTTablesIdx known not{
					/TTTablesIdx -1 def
				}if
				end
			}if
		}if
		end
	}if
	dup/devicen_colorspace_dict exch AGMCORE_gput
	begin
	currentdict/AliasedColorants known{
		AliasedColorants
	}{
		false
	}ifelse
	dup not{
		CSA map_csa
	}if
	/TintTransform load type/nulltype eq or{
		/TintTransform[
			0 1 Names length 1 sub
				{
				/TTTablesIdx TTTablesIdx 1 add def
				dup LookupTables exch get dup 0 get null eq
					{
					1 index
					Names exch get
					dup(Cyan)eq
						{
						pop exch
						LookupTables length exch sub
						/index cvx
						0 0 0
						}
						{
						dup(Magenta)eq
							{
							pop exch
							LookupTables length exch sub
							/index cvx
							0/exch cvx 0 0
							}{
							(Yellow)eq
								{
								exch
								LookupTables length exch sub
								/index cvx
								0 0 3 -1/roll cvx 0
								}{
								exch
								LookupTables length exch sub
								/index cvx
								0 0 0 4 -1/roll cvx
								}ifelse
							}ifelse
						}ifelse
					5 -1/roll cvx/astore cvx
					}{
					dup length 1 sub
					LookupTables length 4 -1 roll sub 1 add
					/index cvx/mul cvx/round cvx/cvi cvx/get cvx
					}ifelse
					Names length TTTablesIdx add 1 add 1/roll cvx
				}for
			Names length[/pop cvx]cvx/repeat cvx
			NComponents Names length
 			TintMethod/Subtractive eq
 				{
 				subtractive_blend
 				}{
 				additive_blend
 				}ifelse
		]cvx bdf
	}if
	AGMCORE_host_sep{
		Names convert_to_process{
			exec_tint_transform
		}
		{	
			currentdict/AliasedColorants known{
				AliasedColorants not
			}{
				false
			}ifelse
			5 dict begin
			/AvoidAliasedColorants xdf
			/painted? false def
			/names_index 0 def
			/names_len Names length def
			AvoidAliasedColorants{
				/currentspotalias current_spot_alias def
				false set_spot_alias
			}if
			Names{
				AGMCORE_is_cmyk_sep{
					dup(Cyan)eq AGMCORE_cyan_plate and exch
					dup(Magenta)eq AGMCORE_magenta_plate and exch
					dup(Yellow)eq AGMCORE_yellow_plate and exch
					(Black)eq AGMCORE_black_plate and or or or{
						/devicen_colorspace_dict AGMCORE_gget/TintProc[
							Names names_index/devn_makecustomcolor cvx
						]cvx ddf
						/painted? true def
					}if
					painted?{exit}if
				}{
					0 0 0 0 5 -1 roll findcmykcustomcolor 1 setcustomcolor currentgray 0 eq{
					/devicen_colorspace_dict AGMCORE_gget/TintProc[
						Names names_index/devn_makecustomcolor cvx
					]cvx ddf
					/painted? true def
					exit
					}if
				}ifelse
				/names_index names_index 1 add def
			}forall
			AvoidAliasedColorants{
				currentspotalias set_spot_alias
			}if
			painted?{
				/devicen_colorspace_dict AGMCORE_gget/names_index names_index put
			}{
				/devicen_colorspace_dict AGMCORE_gget/TintProc[
					names_len[/pop cvx]cvx/repeat cvx 1/setseparationgray cvx
 					0 0 0 0/setcmykcolor cvx
				]cvx ddf
			}ifelse
			end
		}ifelse
	}
	{
		AGMCORE_in_rip_sep{
			Names convert_to_process not
		}{
			level3
		}ifelse
		{
			[/DeviceN Names MappedCSA/TintTransform load]setcolorspace_opt
			/TintProc level3 not AGMCORE_in_rip_sep and{
				[
					Names/length cvx[/pop cvx]cvx/repeat cvx
				]cvx bdf
			}{
				{setcolor}bdf
			}ifelse
		}{
			exec_tint_transform
		}ifelse
	}ifelse
	set_crd
	/AliasedColorants false def
	end
}def
/setindexedcolorspace
{
	dup/indexed_colorspace_dict exch AGMCORE_gput
	begin
		currentdict/CSDBase known{
			CSDBase/CSD get_res begin
			currentdict/Names known{
				currentdict devncs
			}{
				1 currentdict sepcs
			}ifelse
			AGMCORE_host_sep{
				4 dict begin
				/compCnt/Names where{pop Names length}{1}ifelse def
				/NewLookup HiVal 1 add string def
				0 1 HiVal{
					/tableIndex xdf
					Lookup dup type/stringtype eq{
						compCnt tableIndex map_index
					}{
						exec
					}ifelse
					/Names where{
						pop setdevicencolor
					}{
						setsepcolor
					}ifelse
					currentgray
					tableIndex exch
					255 mul cvi 
					NewLookup 3 1 roll put
				}for
				[/Indexed currentcolorspace HiVal NewLookup]setcolorspace_opt
				end
			}{
				level3
				{
					currentdict/Names known{
						[/Indexed[/DeviceN Names MappedCSA/TintTransform load]HiVal Lookup]setcolorspace_opt
					}{
						[/Indexed[/Separation Name MappedCSA sep_proc_name load]HiVal Lookup]setcolorspace_opt
					}ifelse
				}{
				[/Indexed MappedCSA HiVal
					[
					currentdict/Names known{
						Lookup dup type/stringtype eq
							{/exch cvx CSDBase/CSD get_res/Names get length dup/mul cvx exch/getinterval cvx{255 div}/forall cvx}
							{/exec cvx}ifelse
							/TintTransform load/exec cvx
					}{
						Lookup dup type/stringtype eq
							{/exch cvx/get cvx 255/div cvx}
							{/exec cvx}ifelse
							CSDBase/CSD get_res/MappedCSA get sep_proc_name exch pop/load cvx/exec cvx
					}ifelse
					]cvx
				]setcolorspace_opt
				}ifelse
			}ifelse
			end
			set_crd
		}
		{
			CSA map_csa
			AGMCORE_host_sep level2 not and{
				0 0 0 0 setcmykcolor
			}{
				[/Indexed MappedCSA 
				level2 not has_color not and{
					dup 0 get dup/DeviceRGB eq exch/DeviceCMYK eq or{
						pop[/DeviceGray]
					}if
					HiVal GrayLookup
				}{
					HiVal 
					currentdict/RangeArray known{
						{
							/indexed_colorspace_dict AGMCORE_gget begin
							Lookup exch 
							dup HiVal gt{
								pop HiVal
							}if
							NComponents mul NComponents getinterval{}forall
							NComponents 1 sub -1 0{
								RangeArray exch 2 mul 2 getinterval aload pop map255_to_range
								NComponents 1 roll
							}for
							end
						}bind
					}{
						Lookup
					}ifelse
				}ifelse
				]setcolorspace_opt
				set_crd
			}ifelse
		}ifelse
	end
}def
/setindexedcolor
{
	AGMCORE_host_sep{
		/indexed_colorspace_dict AGMCORE_gget
		begin
		currentdict/CSDBase known{
			CSDBase/CSD get_res begin
			currentdict/Names known{
				map_indexed_devn
				devn
			}
			{
				Lookup 1 3 -1 roll map_index
				sep
			}ifelse
			end
		}{
			Lookup MappedCSA/DeviceCMYK eq{4}{1}ifelse 3 -1 roll
			map_index
			MappedCSA/DeviceCMYK eq{setcmykcolor}{setgray}ifelse
		}ifelse
		end
	}{
		level3 not AGMCORE_in_rip_sep and/indexed_colorspace_dict AGMCORE_gget/CSDBase known and{
			/indexed_colorspace_dict AGMCORE_gget/CSDBase get/CSD get_res begin
			map_indexed_devn
			devn
			end
		}
		{
			setcolor
		}ifelse
	}ifelse
}def
/ignoreimagedata
{
	currentoverprint not{
		gsave
		dup clonedict begin
		1 setgray
		/Decode[0 1]def
		/DataSource<FF>def
		/MultipleDataSources false def
		/BitsPerComponent 8 def
		currentdict end
		systemdict/image gx
		grestore
		}if
	consumeimagedata
}def
/add_res
{
	dup/CSD eq{
		pop 
		//Adobe_AGM_Core begin
		/AGMCORE_CSD_cache load 3 1 roll put
		end
	}{
		defineresource pop
	}ifelse
}def
/del_res
{
	{
		aload pop exch
		dup/CSD eq{
			pop 
			{//Adobe_AGM_Core/AGMCORE_CSD_cache get exch undef}forall
		}{
			exch
			{1 index undefineresource}forall
			pop
		}ifelse
	}forall
}def
/get_res
{
	dup/CSD eq{
		pop
		dup type dup/nametype eq exch/stringtype eq or{
			AGMCORE_CSD_cache exch get
		}if
	}{
		findresource
	}ifelse
}def
/get_csa_by_name
{
	dup type dup/nametype eq exch/stringtype eq or{
		/CSA get_res
	}if
}def
/paintproc_buf_init
{
	/count get 0 0 put
}def
/paintproc_buf_next
{
	dup/count get dup 0 get
	dup 3 1 roll
	1 add 0 xpt
	get				
}def
/cachepaintproc_compress
{
	5 dict begin
	currentfile exch 0 exch/SubFileDecode filter/ReadFilter exch def
	/ppdict 20 dict def
	/string_size 16000 def
	/readbuffer string_size string def
	currentglobal true setglobal 
	ppdict 1 array dup 0 1 put/count xpt
	setglobal
	/LZWFilter 
	{
		exch
		dup length 0 eq{
			pop
		}{
			ppdict dup length 1 sub 3 -1 roll put
		}ifelse
		{string_size}{0}ifelse string
	}/LZWEncode filter def
	{		
		ReadFilter readbuffer readstring
		exch LZWFilter exch writestring
		not{exit}if
	}loop
	LZWFilter closefile
	ppdict				
	end
}def
/cachepaintproc
{
	2 dict begin
	currentfile exch 0 exch/SubFileDecode filter/ReadFilter exch def
	/ppdict 20 dict def
	currentglobal true setglobal 
	ppdict 1 array dup 0 1 put/count xpt
	setglobal
	{
		ReadFilter 16000 string readstring exch
		ppdict dup length 1 sub 3 -1 roll put
		not{exit}if
	}loop
	ppdict dup dup length 1 sub()put					
	end	
}def
/make_pattern
{
	exch clonedict exch
	dup matrix currentmatrix matrix concatmatrix 0 0 3 2 roll itransform
	exch 3 index/XStep get 1 index exch 2 copy div cvi mul sub sub
	exch 3 index/YStep get 1 index exch 2 copy div cvi mul sub sub
	matrix translate exch matrix concatmatrix
			 1 index begin
		BBox 0 get XStep div cvi XStep mul/xshift exch neg def
		BBox 1 get YStep div cvi YStep mul/yshift exch neg def
		BBox 0 get xshift add
		BBox 1 get yshift add
		BBox 2 get xshift add
		BBox 3 get yshift add
		4 array astore
		/BBox exch def
		[xshift yshift/translate load null/exec load]dup
		3/PaintProc load put cvx/PaintProc exch def
		end
	gsave 0 setgray
	makepattern
	grestore
}def
/set_pattern
{
	dup/PatternType get 1 eq{
		dup/PaintType get 1 eq{
			currentoverprint sop[/DeviceGray]setcolorspace 0 setgray
		}if
	}if
	setpattern
}def
/setcolorspace_opt
{
	dup currentcolorspace eq{pop}{setcolorspace}ifelse
}def
/updatecolorrendering
{
	currentcolorrendering/RenderingIntent known{
		currentcolorrendering/RenderingIntent get
	}
	{
		Intent/AbsoluteColorimetric eq 
		{
			/absolute_colorimetric_crd AGMCORE_gget dup null eq
		}
		{
			Intent/RelativeColorimetric eq
			{
				/relative_colorimetric_crd AGMCORE_gget dup null eq
			}
			{
				Intent/Saturation eq
				{
					/saturation_crd AGMCORE_gget dup null eq
				}
				{
					/perceptual_crd AGMCORE_gget dup null eq
				}ifelse
			}ifelse
		}ifelse
		{
			pop null	
		}
		{
			/RenderingIntent known{null}{Intent}ifelse
		}ifelse
	}ifelse
	Intent ne{
		Intent/ColorRendering{findresource}stopped
		{
			pop pop systemdict/findcolorrendering known
			{
 				Intent findcolorrendering
 				{
 					/ColorRendering findresource true exch
 				}
 				{
 					/ColorRendering findresource
					product(Xerox Phaser 5400)ne
					exch
 				}ifelse
				dup Intent/AbsoluteColorimetric eq 
				{
					/absolute_colorimetric_crd exch AGMCORE_gput
				}
				{
					Intent/RelativeColorimetric eq
					{
						/relative_colorimetric_crd exch AGMCORE_gput
					}
					{
						Intent/Saturation eq
						{
							/saturation_crd exch AGMCORE_gput
						}
						{
							Intent/Perceptual eq
							{
								/perceptual_crd exch AGMCORE_gput
							}
							{
								pop
							}ifelse
						}ifelse
					}ifelse
				}ifelse
				1 index{exch}{pop}ifelse
			}
			{false}ifelse
		}
		{true}ifelse
		{
			dup begin
			currentdict/TransformPQR known{
				currentdict/TransformPQR get aload pop
				3{{}eq 3 1 roll}repeat or or
			}
			{true}ifelse
			currentdict/MatrixPQR known{
				currentdict/MatrixPQR get aload pop
				1.0 eq 9 1 roll 0.0 eq 9 1 roll 0.0 eq 9 1 roll
				0.0 eq 9 1 roll 1.0 eq 9 1 roll 0.0 eq 9 1 roll
				0.0 eq 9 1 roll 0.0 eq 9 1 roll 1.0 eq
				and and and and and and and and
			}
			{true}ifelse
			end
			or
			{
				clonedict begin
				/TransformPQR[
					{4 -1 roll 3 get dup 3 1 roll sub 5 -1 roll 3 get 3 -1 roll sub div
					3 -1 roll 3 get 3 -1 roll 3 get dup 4 1 roll sub mul add}bind
					{4 -1 roll 4 get dup 3 1 roll sub 5 -1 roll 4 get 3 -1 roll sub div
					3 -1 roll 4 get 3 -1 roll 4 get dup 4 1 roll sub mul add}bind
					{4 -1 roll 5 get dup 3 1 roll sub 5 -1 roll 5 get 3 -1 roll sub div
					3 -1 roll 5 get 3 -1 roll 5 get dup 4 1 roll sub mul add}bind
				]def
				/MatrixPQR[0.8951 -0.7502 0.0389 0.2664 1.7135 -0.0685 -0.1614 0.0367 1.0296]def
				/RangePQR[-0.3227950745 2.3229645538 -1.5003771057 3.5003465881 -0.1369979095 2.136967392]def
				currentdict end
			}if
			setcolorrendering_opt
		}if		
	}if
}def
/set_crd
{
	AGMCORE_host_sep not level2 and{
		currentdict/ColorRendering known{
			ColorRendering/ColorRendering{findresource}stopped not{setcolorrendering_opt}if
		}{
			currentdict/Intent known{
				updatecolorrendering
			}if
		}ifelse
		currentcolorspace dup type/arraytype eq
			{0 get}if
		/DeviceRGB eq
			{
			currentdict/UCR known
				{/UCR}{/AGMCORE_currentucr}ifelse
			load setundercolorremoval
			currentdict/BG known 
				{/BG}{/AGMCORE_currentbg}ifelse
			load setblackgeneration
			}if
	}if
}def
/set_ucrbg
{
	dup null eq{pop/AGMCORE_currentbg load}{/Procedure get_res}ifelse setblackgeneration
	dup null eq{pop/AGMCORE_currentucr load}{/Procedure get_res}ifelse setundercolorremoval
}def
/setcolorrendering_opt
{
	dup currentcolorrendering eq{
		pop
	}{
		clonedict
		begin
			/Intent Intent def
			currentdict
		end
		setcolorrendering
	}ifelse
}def
/cpaint_gcomp
{
	convert_to_process//Adobe_AGM_Core/AGMCORE_ConvertToProcess xddf
	//Adobe_AGM_Core/AGMCORE_ConvertToProcess get not
	{
		(%end_cpaint_gcomp)flushinput
	}if
}def
/cpaint_gsep
{
	//Adobe_AGM_Core/AGMCORE_ConvertToProcess get
	{	
		(%end_cpaint_gsep)flushinput
	}if
}def
/cpaint_gend
{np}def
/T1_path
{
	currentfile token pop currentfile token pop mo
	{
		currentfile token pop dup type/stringtype eq
			{pop exit}if 
		0 exch rlineto 
		currentfile token pop dup type/stringtype eq
			{pop exit}if 
		0 rlineto
	}loop
}def
/T1_gsave
	level3
	{/clipsave}
	{/gsave}ifelse
	load def
/T1_grestore
	level3
	{/cliprestore}
	{/grestore}ifelse 
	load def
/set_spot_alias_ary
{
	dup inherit_aliases
	//Adobe_AGM_Core/AGMCORE_SpotAliasAry xddf
}def
/set_spot_normalization_ary
{
	dup inherit_aliases
	dup length
	/AGMCORE_SpotAliasAry where{pop AGMCORE_SpotAliasAry length add}if
	array
	//Adobe_AGM_Core/AGMCORE_SpotAliasAry2 xddf
	/AGMCORE_SpotAliasAry where{
		pop
		AGMCORE_SpotAliasAry2 0 AGMCORE_SpotAliasAry putinterval
		AGMCORE_SpotAliasAry length
	}{0}ifelse
	AGMCORE_SpotAliasAry2 3 1 roll exch putinterval
	true set_spot_alias
}def
/inherit_aliases
{
	{dup/Name get map_alias{/CSD put}{pop}ifelse}forall
}def
/set_spot_alias
{
	/AGMCORE_SpotAliasAry2 where{
		/AGMCORE_current_spot_alias 3 -1 roll put
	}{
		pop
	}ifelse
}def
/current_spot_alias
{
	/AGMCORE_SpotAliasAry2 where{
		/AGMCORE_current_spot_alias get
	}{
		false
	}ifelse
}def
/map_alias
{
	/AGMCORE_SpotAliasAry2 where{
		begin
			/AGMCORE_name xdf
			false	
			AGMCORE_SpotAliasAry2{
				dup/Name get AGMCORE_name eq{
					/CSD get/CSD get_res
					exch pop true
					exit
				}{
					pop
				}ifelse
			}forall
		end
	}{
		pop false
	}ifelse
}bdf
/spot_alias
{
	true set_spot_alias
	/AGMCORE_&setcustomcolor AGMCORE_key_known not{
		//Adobe_AGM_Core/AGMCORE_&setcustomcolor/setcustomcolor load put
	}if
	/customcolor_tint 1 AGMCORE_gput
	//Adobe_AGM_Core begin
	/setcustomcolor
	{
		//Adobe_AGM_Core begin
		dup/customcolor_tint exch AGMCORE_gput
		1 index aload pop pop 1 eq exch 1 eq and exch 1 eq and exch 1 eq and not
		current_spot_alias and{1 index 4 get map_alias}{false}ifelse
		{
			false set_spot_alias
			/sep_colorspace_dict AGMCORE_gget null ne
			3 1 roll 2 index{
				exch pop/sep_tint AGMCORE_gget exch
			}if
			mark 3 1 roll
			setsepcolorspace
			counttomark 0 ne{
				setsepcolor
			}if
			pop
			not{/sep_tint 1.0 AGMCORE_gput}if
			pop
			true set_spot_alias
		}{
			AGMCORE_&setcustomcolor
		}ifelse
		end
	}bdf
	end
}def
/begin_feature
{
	Adobe_AGM_Core/AGMCORE_feature_dictCount countdictstack put
	count Adobe_AGM_Core/AGMCORE_feature_opCount 3 -1 roll put
	{Adobe_AGM_Core/AGMCORE_feature_ctm matrix currentmatrix put}if
}def
/end_feature
{
	2 dict begin
	/spd/setpagedevice load def
	/setpagedevice{get_gstate spd set_gstate}def
	stopped{$error/newerror false put}if
	end
	count Adobe_AGM_Core/AGMCORE_feature_opCount get sub dup 0 gt{{pop}repeat}{pop}ifelse
	countdictstack Adobe_AGM_Core/AGMCORE_feature_dictCount get sub dup 0 gt{{end}repeat}{pop}ifelse
	{Adobe_AGM_Core/AGMCORE_feature_ctm get setmatrix}if
}def
/set_negative
{
	//Adobe_AGM_Core begin
	/AGMCORE_inverting exch def
	level2{
		currentpagedevice/NegativePrint known AGMCORE_distilling not and{
			currentpagedevice/NegativePrint get//Adobe_AGM_Core/AGMCORE_inverting get ne{
				true begin_feature true{
						<</NegativePrint//Adobe_AGM_Core/AGMCORE_inverting get>>setpagedevice
				}end_feature
			}if
			/AGMCORE_inverting false def
		}if
	}if
	AGMCORE_inverting{
		[{1 exch sub}/exec load dup currenttransfer exch]cvx bind settransfer
 		AGMCORE_distilling{
 			erasepage
 		}{
 			gsave np clippath 1/setseparationgray where{pop setseparationgray}{setgray}ifelse
 			/AGMIRS_&fill where{pop AGMIRS_&fill}{fill}ifelse grestore
 		}ifelse
	}if
	end
}def
/lw_save_restore_override{
	/md where{
		pop
		md begin
		initializepage
		/initializepage{}def
		/pmSVsetup{}def
		/endp{}def
		/pse{}def
		/psb{}def
		/orig_showpage where
			{pop}
			{/orig_showpage/showpage load def}
		ifelse
		/showpage{orig_showpage gR}def
		end
	}if
}def
/pscript_showpage_override{
	/NTPSOct95 where
	{
		begin
		showpage
		save
		/showpage/restore load def
		/restore{exch pop}def
		end
	}if
}def
/driver_media_override
{
	/md where{
		pop
		md/initializepage known{
			md/initializepage{}put
		}if
		md/rC known{
			md/rC{4{pop}repeat}put
		}if
	}if
	/mysetup where{
		/mysetup[1 0 0 1 0 0]put
	}if
	Adobe_AGM_Core/AGMCORE_Default_CTM matrix currentmatrix put
	level2
		{Adobe_AGM_Core/AGMCORE_Default_PageSize currentpagedevice/PageSize get put}if
}def
/driver_check_media_override
{
 	/PrepsDict where
 		{pop}
		{
		Adobe_AGM_Core/AGMCORE_Default_CTM get matrix currentmatrix ne
		Adobe_AGM_Core/AGMCORE_Default_PageSize get type/arraytype eq
			{
			Adobe_AGM_Core/AGMCORE_Default_PageSize get 0 get currentpagedevice/PageSize get 0 get eq and
			Adobe_AGM_Core/AGMCORE_Default_PageSize get 1 get currentpagedevice/PageSize get 1 get eq and
			}if
			{
			Adobe_AGM_Core/AGMCORE_Default_CTM get setmatrix
			}if
		}ifelse
}def
AGMCORE_err_strings begin
	/AGMCORE_bad_environ(Environment not satisfactory for this job. Ensure that the PPD is correct or that the PostScript level requested is supported by this printer. )def
	/AGMCORE_color_space_onhost_seps(This job contains colors that will not separate with on-host methods. )def
	/AGMCORE_invalid_color_space(This job contains an invalid color space. )def
end
/set_def_ht
{AGMCORE_def_ht sethalftone}def
/set_def_flat
{AGMCORE_Default_flatness setflat}def
end
systemdict/setpacking known
{setpacking}if
%%EndResource
%%BeginResource: procset Adobe_CoolType_Core 2.31 0%%Copyright: Copyright 1997-2006 Adobe Systems Incorporated. All Rights Reserved.%%Version: 2.31 010 dict begin/Adobe_CoolType_Passthru currentdict def/Adobe_CoolType_Core_Defined userdict/Adobe_CoolType_Core known defAdobe_CoolType_Core_Defined	{/Adobe_CoolType_Core userdict/Adobe_CoolType_Core get def}ifuserdict/Adobe_CoolType_Core 70 dict dup begin put/Adobe_CoolType_Version 2.31 def/Level2?	systemdict/languagelevel known dup		{pop systemdict/languagelevel get 2 ge}	if defLevel2? not	{	/currentglobal false def	/setglobal/pop load def	/gcheck{pop false}bind def	/currentpacking false def	/setpacking/pop load def	/SharedFontDirectory 0 dict def	}ifcurrentpackingtrue setpackingcurrentglobal false setglobaluserdict/Adobe_CoolType_Data 2 copy known not	{2 copy 10 dict put}ifget	 begin	/@opStackCountByLevel 32 dict def	/@opStackLevel 0 def	/@dictStackCountByLevel 32 dict def	/@dictStackLevel 0 def	 endsetglobalcurrentglobal true setglobaluserdict/Adobe_CoolType_GVMFonts known not	{userdict/Adobe_CoolType_GVMFonts 10 dict put}ifsetglobalcurrentglobal false setglobaluserdict/Adobe_CoolType_LVMFonts known not	{userdict/Adobe_CoolType_LVMFonts 10 dict put}ifsetglobal/ct_VMDictPut	{	dup gcheck{Adobe_CoolType_GVMFonts}{Adobe_CoolType_LVMFonts}ifelse	3 1 roll put	}bind def/ct_VMDictUndef	{	dup Adobe_CoolType_GVMFonts exch known		{Adobe_CoolType_GVMFonts exch undef}		{			dup Adobe_CoolType_LVMFonts exch known			{Adobe_CoolType_LVMFonts exch undef}			{pop}			ifelse		}ifelse	}bind def/ct_str1 1 string def/ct_xshow{	/_ct_na exch def	/_ct_i 0 def	currentpoint	/_ct_y exch def	/_ct_x exch def	{		pop pop		ct_str1 exch 0 exch put		ct_str1 show		{_ct_na _ct_i get}stopped 		{pop pop}		{			_ct_x _ct_y moveto			0			rmoveto		}		ifelse		/_ct_i _ct_i 1 add def		currentpoint		/_ct_y exch def		/_ct_x exch def	}	exch	@cshow}bind def/ct_yshow{	/_ct_na exch def	/_ct_i 0 def	currentpoint	/_ct_y exch def	/_ct_x exch def	{		pop pop		ct_str1 exch 0 exch put		ct_str1 show		{_ct_na _ct_i get}stopped 		{pop pop}		{			_ct_x _ct_y moveto			0 exch			rmoveto		}		ifelse		/_ct_i _ct_i 1 add def		currentpoint		/_ct_y exch def		/_ct_x exch def	}	exch	@cshow}bind def/ct_xyshow{	/_ct_na exch def	/_ct_i 0 def	currentpoint	/_ct_y exch def	/_ct_x exch def	{		pop pop		ct_str1 exch 0 exch put		ct_str1 show		{_ct_na _ct_i get}stopped 		{pop pop}		{			{_ct_na _ct_i 1 add get}stopped 			{pop pop pop}			{				_ct_x _ct_y moveto				rmoveto			}			ifelse		}		ifelse		/_ct_i _ct_i 2 add def		currentpoint		/_ct_y exch def		/_ct_x exch def	}	exch	@cshow}bind def/xsh{{@xshow}stopped{Adobe_CoolType_Data begin ct_xshow end}if}bind def/ysh{{@yshow}stopped{Adobe_CoolType_Data begin ct_yshow end}if}bind def/xysh{{@xyshow}stopped{Adobe_CoolType_Data begin ct_xyshow end}if}bind defcurrentglobal true setglobal/ct_T3Defs{/BuildChar{	1 index/Encoding get exch get	1 index/BuildGlyph get exec}bind def/BuildGlyph{	exch begin	GlyphProcs exch get exec	end}bind def}bind defsetglobal/@_SaveStackLevels	{	Adobe_CoolType_Data		begin		/@vmState currentglobal def false setglobal		@opStackCountByLevel		@opStackLevel		2 copy known not			{			2 copy			3 dict dup/args			7 index			5 add array put			put get			}			{			get dup/args get dup length 3 index lt				{				dup length 5 add array exch				1 index exch 0 exch putinterval				1 index exch/args exch put				}				{pop}			ifelse			}		ifelse			begin			count 1 sub			1 index lt				{pop count}			if			dup/argCount exch def			dup 0 gt				{				args exch 0 exch getinterval 			astore pop				}				{pop}			ifelse			count			/restCount exch def			end		/@opStackLevel @opStackLevel 1 add def		countdictstack 1 sub		@dictStackCountByLevel exch @dictStackLevel exch put		/@dictStackLevel @dictStackLevel 1 add def		@vmState setglobal		end	}bind def/@_RestoreStackLevels	{	Adobe_CoolType_Data		begin		/@opStackLevel @opStackLevel 1 sub def		@opStackCountByLevel @opStackLevel get			begin			count restCount sub dup 0 gt				{{pop}repeat}				{pop}			ifelse			args 0 argCount getinterval{}forall			end		/@dictStackLevel @dictStackLevel 1 sub def		@dictStackCountByLevel @dictStackLevel get		end	countdictstack exch sub dup 0 gt		{{end}repeat}		{pop}	ifelse	}bind def/@_PopStackLevels	{	Adobe_CoolType_Data		begin		/@opStackLevel @opStackLevel 1 sub def		/@dictStackLevel @dictStackLevel 1 sub def		end	}bind def/@Raise	{	exch cvx exch errordict exch get exec	stop	}bind def/@ReRaise	{	cvx $error/errorname get errordict exch get exec	stop	}bind def/@Stopped	{	0 @#Stopped	}bind def/@#Stopped	{	@_SaveStackLevels	stopped		{@_RestoreStackLevels true}		{@_PopStackLevels false}	ifelse	}bind def/@Arg	{	Adobe_CoolType_Data		begin		@opStackCountByLevel @opStackLevel 1 sub get		begin		args exch		argCount 1 sub exch sub get		end		end	}bind defcurrentglobal true setglobal/CTHasResourceForAllBug	Level2?		{		1 dict dup				/@shouldNotDisappearDictValue true def				Adobe_CoolType_Data exch/@shouldNotDisappearDict exch put				begin				count @_SaveStackLevels					{(*){pop stop}128 string/Category resourceforall}				stopped pop				@_RestoreStackLevels				currentdict Adobe_CoolType_Data/@shouldNotDisappearDict get dup 3 1 roll ne dup 3 1 roll					{						 /@shouldNotDisappearDictValue known								{										 {												end												currentdict 1 index eq													{pop exit}												if										 }									 loop								}						 if					}					{						 pop						 end					}				ifelse		}		{false}	ifelse	deftrue setglobal/CTHasResourceStatusBug	Level2?		{		mark			{/steveamerige/Category resourcestatus}		stopped			{cleartomark true}			{cleartomark currentglobal not}		ifelse		}		{false}	ifelse	defsetglobal/CTResourceStatus		{		mark 3 1 roll		/Category findresource			begin			({ResourceStatus}stopped)0()/SubFileDecode filter cvx exec				{cleartomark false}				{{3 2 roll pop true}{cleartomark false}ifelse}			ifelse			end		}bind def/CTWorkAroundBugs	{	Level2?		{		/cid_PreLoad/ProcSet resourcestatus			{			pop pop			currentglobal			mark				{				(*)					{					dup/CMap CTHasResourceStatusBug						{CTResourceStatus}						{resourcestatus}					ifelse						{						pop dup 0 eq exch 1 eq or							{							dup/CMap findresource gcheck setglobal							/CMap undefineresource							}							{							pop CTHasResourceForAllBug								{exit}								{stop}							ifelse							}						ifelse						}						{pop}					ifelse					}				128 string/CMap resourceforall				}			stopped				{cleartomark}			stopped pop			setglobal			}		if		}	if	}bind def/ds	{	Adobe_CoolType_Core		begin		CTWorkAroundBugs		/mo/moveto load def		/nf/newencodedfont load def		/msf{makefont setfont}bind def		/uf{dup undefinefont ct_VMDictUndef}bind def		/ur/undefineresource load def		/chp/charpath load def		/awsh/awidthshow load def		/wsh/widthshow load def		/ash/ashow load def		/@xshow/xshow load def		/@yshow/yshow load def		/@xyshow/xyshow load def		/@cshow/cshow load def		/sh/show load def		/rp/repeat load def		/.n/.notdef def		end		currentglobal false setglobal	 userdict/Adobe_CoolType_Data 2 copy known not		 {2 copy 10 dict put}		if		get		begin		/AddWidths? false def		/CC 0 def		/charcode 2 string def		/@opStackCountByLevel 32 dict def		/@opStackLevel 0 def		/@dictStackCountByLevel 32 dict def		/@dictStackLevel 0 def		/InVMFontsByCMap 10 dict def		/InVMDeepCopiedFonts 10 dict def		end		setglobal	}bind def/dt	{	currentdict Adobe_CoolType_Core eq		{end}	if	}bind def/ps	{	Adobe_CoolType_Core begin	Adobe_CoolType_GVMFonts begin	Adobe_CoolType_LVMFonts begin	SharedFontDirectory begin	}bind def/pt	{	end	end	end	end	}bind def/unload	{	systemdict/languagelevel known		{		systemdict/languagelevel get 2 ge			{			userdict/Adobe_CoolType_Core 2 copy known				{undef}				{pop pop}			ifelse			}		if		}	if	}bind def/ndf	{	1 index where		{pop pop pop}		{dup xcheck{bind}if def}	ifelse	}def/findfont systemdict	begin	userdict		begin		/globaldict where{/globaldict get begin}if			dup where pop exch get		/globaldict where{pop end}if		end	endAdobe_CoolType_Core_Defined	{/systemfindfont exch def}	{	/findfont 1 index def	/systemfindfont exch def	}ifelse/undefinefont	{pop}ndf/copyfont	{	currentglobal 3 1 roll	1 index gcheck setglobal	dup null eq{0}{dup length}ifelse	2 index length add 1 add dict		begin		exch			{			1 index/FID eq				{pop pop}				{def}			ifelse			}		forall		dup null eq			{pop}			{{def}forall}		ifelse		currentdict		end	exch setglobal	}bind def/copyarray	{	currentglobal exch	dup gcheck setglobal	dup length array copy	exch setglobal	}bind def/newencodedfont	{	currentglobal		{		SharedFontDirectory 3 index known			{SharedFontDirectory 3 index get/FontReferenced known}			{false}		ifelse		}		{		FontDirectory 3 index known			{FontDirectory 3 index get/FontReferenced known}			{			SharedFontDirectory 3 index known				{SharedFontDirectory 3 index get/FontReferenced known}				{false}			ifelse			}		ifelse		}	ifelse	dup		{		3 index findfont/FontReferenced get		2 index dup type/nametype eq			{findfont}		if ne			{pop false}		if		}	if	dup		{		1 index dup type/nametype eq			{findfont}		 if		dup/CharStrings known			{			/CharStrings get length			4 index findfont/CharStrings get length			ne				{				pop false				}			if 			}			{pop}			ifelse		}	if		{		pop		1 index findfont		/Encoding get exch		0 1 255			{2 copy get 3 index 3 1 roll put}		for		pop pop pop		}		{		currentglobal	 4 1 roll		dup type/nametype eq		 {findfont}	 if	 dup gcheck setglobal		dup dup maxlength 2 add dict			begin			exch				{				1 index/FID ne				2 index/Encoding ne and					{def}					{pop pop}				ifelse				}			forall			/FontReferenced exch def			/Encoding exch dup length array copy def			/FontName 1 index dup type/stringtype eq{cvn}if def dup			currentdict			end		definefont ct_VMDictPut		setglobal		}	ifelse	}bind def/SetSubstituteStrategy	{	$SubstituteFont		begin		dup type/dicttype ne			{0 dict}		if		currentdict/$Strategies known			{			exch $Strategies exch 			2 copy known				{				get				2 copy maxlength exch maxlength add dict					begin					{def}forall					{def}forall					currentdict					dup/$Init known						{dup/$Init get exec}					if					end				/$Strategy exch def				}				{pop pop pop}			ifelse			}			{pop pop}		ifelse		end	}bind def/scff	{	$SubstituteFont		begin		dup type/stringtype eq			{dup length exch}			{null}		ifelse		/$sname exch def		/$slen exch def		/$inVMIndex			$sname null eq				{				1 index $str cvs				dup length $slen sub $slen getinterval cvn				}				{$sname}			ifelse def		end		{findfont}	@Stopped		{		dup length 8 add string exch		1 index 0(BadFont:)putinterval		1 index exch 8 exch dup length string cvs putinterval cvn			{findfont}		@Stopped			{pop/Courier findfont}		if		}	if	$SubstituteFont		begin		/$sname null def		/$slen 0 def		/$inVMIndex null def		end	}bind def/isWidthsOnlyFont	{	dup/WidthsOnly known		{pop pop true}		{		dup/FDepVector known			{/FDepVector get{isWidthsOnlyFont dup{exit}if}forall}			{			dup/FDArray known				{/FDArray get{isWidthsOnlyFont dup{exit}if}forall}				{pop}			ifelse			}		ifelse		}	ifelse	}bind def/ct_StyleDicts 4 dict dup begin		 /Adobe-Japan1 4 dict dup begin					 Level2?								{								/Serif								/HeiseiMin-W3-83pv-RKSJ-H/Font resourcestatus								{pop pop/HeiseiMin-W3}								{							/CIDFont/Category resourcestatus							{								pop pop								/HeiseiMin-W3/CIDFont resourcestatus								{pop pop/HeiseiMin-W3}								{/Ryumin-Light}								ifelse							}							{/Ryumin-Light}							ifelse								}								ifelse								def								/SansSerif								/HeiseiKakuGo-W5-83pv-RKSJ-H/Font resourcestatus								{pop pop/HeiseiKakuGo-W5}								{							/CIDFont/Category resourcestatus							{								pop pop								/HeiseiKakuGo-W5/CIDFont resourcestatus								{pop pop/HeiseiKakuGo-W5}								{/GothicBBB-Medium}								ifelse							}							{/GothicBBB-Medium}							ifelse								}								ifelse								def								/HeiseiMaruGo-W4-83pv-RKSJ-H/Font resourcestatus								{pop pop/HeiseiMaruGo-W4}								{							/CIDFont/Category resourcestatus							{								pop pop								/HeiseiMaruGo-W4/CIDFont resourcestatus								{pop pop/HeiseiMaruGo-W4}								{									/Jun101-Light-RKSJ-H/Font resourcestatus									{pop pop/Jun101-Light}									{SansSerif}									ifelse								}								ifelse							}							{								/Jun101-Light-RKSJ-H/Font resourcestatus								{pop pop/Jun101-Light}								{SansSerif}								ifelse							}							ifelse								}								ifelse								/RoundSansSerif exch def								/Default Serif def								}								{								/Serif/Ryumin-Light def								/SansSerif/GothicBBB-Medium def								{								(fonts/Jun101-Light-83pv-RKSJ-H)status								}stopped								{pop}{										 {pop pop pop pop/Jun101-Light}										 {SansSerif}										 ifelse										 /RoundSansSerif exch def								}ifelse								/Default Serif def								}					 ifelse		 end		 def		 /Adobe-Korea1 4 dict dup begin					/Serif/HYSMyeongJo-Medium def					/SansSerif/HYGoThic-Medium def					/RoundSansSerif SansSerif def					/Default Serif def		 end		 def		 /Adobe-GB1 4 dict dup begin					/Serif/STSong-Light def					/SansSerif/STHeiti-Regular def					/RoundSansSerif SansSerif def					/Default Serif def		 end		 def		 /Adobe-CNS1 4 dict dup begin					/Serif/MKai-Medium def					/SansSerif/MHei-Medium def					/RoundSansSerif SansSerif def					/Default Serif def		 end		 defenddefLevel2?{currentglobal true setglobal}if/ct_BoldRomanWidthProc 	{	stringwidth 1 index 0 ne{exch .03 add exch}if setcharwidth	0 0	}bind def/ct_Type0WidthProc 	{	 dup stringwidth 0 0 moveto 	 2 index true charpath pathbbox	 0 -1 	 7 index 2 div .88 	 setcachedevice2	 pop	0 0	}bind def/ct_Type0WMode1WidthProc 	{	 dup stringwidth 	 pop 2 div neg -0.88	2 copy	moveto 	0 -1	 5 -1 roll true charpath pathbbox	 setcachedevice	}bind def/cHexEncoding[/c00/c01/c02/c03/c04/c05/c06/c07/c08/c09/c0A/c0B/c0C/c0D/c0E/c0F/c10/c11/c12/c13/c14/c15/c16/c17/c18/c19/c1A/c1B/c1C/c1D/c1E/c1F/c20/c21/c22/c23/c24/c25/c26/c27/c28/c29/c2A/c2B/c2C/c2D/c2E/c2F/c30/c31/c32/c33/c34/c35/c36/c37/c38/c39/c3A/c3B/c3C/c3D/c3E/c3F/c40/c41/c42/c43/c44/c45/c46/c47/c48/c49/c4A/c4B/c4C/c4D/c4E/c4F/c50/c51/c52/c53/c54/c55/c56/c57/c58/c59/c5A/c5B/c5C/c5D/c5E/c5F/c60/c61/c62/c63/c64/c65/c66/c67/c68/c69/c6A/c6B/c6C/c6D/c6E/c6F/c70/c71/c72/c73/c74/c75/c76/c77/c78/c79/c7A/c7B/c7C/c7D/c7E/c7F/c80/c81/c82/c83/c84/c85/c86/c87/c88/c89/c8A/c8B/c8C/c8D/c8E/c8F/c90/c91/c92/c93/c94/c95/c96/c97/c98/c99/c9A/c9B/c9C/c9D/c9E/c9F/cA0/cA1/cA2/cA3/cA4/cA5/cA6/cA7/cA8/cA9/cAA/cAB/cAC/cAD/cAE/cAF/cB0/cB1/cB2/cB3/cB4/cB5/cB6/cB7/cB8/cB9/cBA/cBB/cBC/cBD/cBE/cBF/cC0/cC1/cC2/cC3/cC4/cC5/cC6/cC7/cC8/cC9/cCA/cCB/cCC/cCD/cCE/cCF/cD0/cD1/cD2/cD3/cD4/cD5/cD6/cD7/cD8/cD9/cDA/cDB/cDC/cDD/cDE/cDF/cE0/cE1/cE2/cE3/cE4/cE5/cE6/cE7/cE8/cE9/cEA/cEB/cEC/cED/cEE/cEF/cF0/cF1/cF2/cF3/cF4/cF5/cF6/cF7/cF8/cF9/cFA/cFB/cFC/cFD/cFE/cFF]def/ct_BoldBaseFont 	 11 dict begin		/FontType 3 def		/FontMatrix[1 0 0 1 0 0]def		/FontBBox[0 0 1 1]def		/Encoding cHexEncoding def 		/_setwidthProc/ct_BoldRomanWidthProc load def		/_bcstr1 1 string def		/BuildChar		{			exch begin				_basefont setfont				_bcstr1 dup 0 4 -1 roll put				dup 				_setwidthProc				3 copy 				moveto								show				_basefonto setfont				moveto				show			end		}bind def		 currentdict	 end defsystemdict/composefont known{/ct_DefineIdentity-H{	/Identity-H/CMap resourcestatus	{		pop pop	}	{		/CIDInit/ProcSet findresource begin		 12 dict begin		 begincmap		 /CIDSystemInfo 3 dict dup begin			 /Registry(Adobe)def			 /Ordering(Identity)def			 /Supplement 0 def		 end def		 /CMapName/Identity-H def		 /CMapVersion 1.000 def		 /CMapType 1 def		 1 begincodespacerange		 <0000><FFFF>		 endcodespacerange		 1 begincidrange		 <0000><FFFF>0		 endcidrange		 endcmap		 CMapName currentdict/CMap defineresource pop		 end		 end	 }	 ifelse}def/ct_BoldBaseCIDFont 	 11 dict begin		/CIDFontType 1 def		/CIDFontName/ct_BoldBaseCIDFont def		/FontMatrix[1 0 0 1 0 0]def		/FontBBox[0 0 1 1]def		/_setwidthProc/ct_Type0WidthProc load def		/_bcstr2 2 string def		/BuildGlyph		{			exch begin		 				_basefont setfont				_bcstr2 1 2 index 256 mod put				_bcstr2 0 3 -1 roll 256 idiv put				_bcstr2 dup _setwidthProc		 				3 copy 				moveto				show				_basefonto setfont				moveto				show			end		}bind def		 currentdict	 end def}ifLevel2?{setglobal}if/ct_CopyFont{	{		1 index/FID ne 2 index/UniqueID ne and		{def}{pop pop}ifelse	}forall}bind def/ct_Type0CopyFont {	exch	dup length dict	begin	ct_CopyFont	[	exch	FDepVector 	{		 dup/FontType get 0 eq		{			1 index ct_Type0CopyFont 		/_ctType0 exch definefont		}		{		/_ctBaseFont exch		2 index exec		}		 ifelse 		 exch	}	forall 	pop	]					/FDepVector exch def	currentdict	end}bind def/ct_MakeBoldFont{	 dup/ct_SyntheticBold known	{		dup length 3 add dict begin 		ct_CopyFont 		/ct_StrokeWidth .03 0 FontMatrix idtransform pop def 		/ct_SyntheticBold true def		currentdict 		end 		definefont	}	{		dup dup length 3 add dict		begin			ct_CopyFont			/PaintType 2 def			/StrokeWidth .03 0 FontMatrix idtransform pop def			/dummybold currentdict		end		definefont		dup/FontType get dup 9 ge exch 11 le and 		{			ct_BoldBaseCIDFont			dup length 3 add dict copy begin			dup/CIDSystemInfo get/CIDSystemInfo exch def			ct_DefineIdentity-H			/_Type0Identity/Identity-H 3 -1 roll[exch]composefont			/_basefont exch def			/_Type0Identity/Identity-H 3 -1 roll[exch]composefont			/_basefonto exch def			currentdict			end			/CIDFont defineresource		}		{			ct_BoldBaseFont			dup length 3 add dict copy begin			/_basefont exch def			/_basefonto exch def			currentdict			end			definefont		}		ifelse	}	ifelse}bind def/ct_MakeBold{	1 index 	1 index	findfont	currentglobal 5 1 roll	dup gcheck setglobal		dup		 /FontType get 0 eq			{				dup/WMode known{dup/WMode get 1 eq}{false}ifelse				version length 4 ge				and					{version 0 4 getinterval cvi 2015 ge}					{true}				ifelse 					{/ct_Type0WidthProc}					{/ct_Type0WMode1WidthProc}				ifelse				ct_BoldBaseFont/_setwidthProc 3 -1 roll load put						{ct_MakeBoldFont}ct_Type0CopyFont definefont			}			{				dup/_fauxfont known not 1 index/SubstMaster known not and				{					 ct_BoldBaseFont/_setwidthProc /ct_BoldRomanWidthProc load put					 ct_MakeBoldFont 				}				{				2 index 2 index eq					{exch pop	}					{						dup length dict begin						ct_CopyFont						currentdict						end						definefont 					}				ifelse				}			ifelse			}		 ifelse		 pop pop pop		 setglobal}bind def/?str1 256 string def/?set	{	$SubstituteFont		begin		/$substituteFound false def		/$fontname 1 index def		/$doSmartSub false def		end	dup	 findfont	$SubstituteFont		begin		$substituteFound			{false}			{			dup/FontName known				{				dup/FontName get $fontname eq				1 index/DistillerFauxFont known not and				/currentdistillerparams where					{pop false 2 index isWidthsOnlyFont not and}				if				}				{false}			ifelse			}		ifelse		exch pop		/$doSmartSub true def		end		{		5 1 roll pop pop pop pop		findfont		}		{		1 index		findfont		dup/FontType get 3 eq		{			6 1 roll pop pop pop pop pop false		}		{pop true}		ifelse		{		$SubstituteFont		begin		pop pop		/$styleArray 1 index def		/$regOrdering 2 index def		pop pop		0 1 $styleArray length 1 sub		{			$styleArray exch get			ct_StyleDicts $regOrdering			2 copy known			{				get				exch 2 copy known not				{pop/Default}				if				get				dup type/nametype eq				{				?str1 cvs length dup 1 add exch				?str1 exch(-)putinterval				exch dup length exch ?str1 exch 3 index exch putinterval				add ?str1 exch 0 exch getinterval cvn				}				{				pop pop/Unknown				}				ifelse			}			{				pop pop pop pop/Unknown			}			ifelse		}		for		end		findfont 		}if		}	ifelse	currentglobal false setglobal 3 1 roll	null copyfont definefont pop	setglobal	}bind defsetpackinguserdict/$SubstituteFont 25 dict put1 dict	begin	/SubstituteFont		dup $error exch 2 copy known			{get}			{pop pop{pop/Courier}bind}		ifelse def	/currentdistillerparams where dup		{		pop pop		currentdistillerparams/CannotEmbedFontPolicy 2 copy known			{get/Error eq}			{pop pop false}		ifelse		}	if not		{		countdictstack array dictstack 0 get			begin			userdict				begin				$SubstituteFont					begin					/$str 128 string def					/$fontpat 128 string def					/$slen 0 def					/$sname null def					/$match false def					/$fontname null def					/$substituteFound false def					/$inVMIndex null def					/$doSmartSub true def					/$depth 0 def					/$fontname null def					/$italicangle 26.5 def					/$dstack null def					/$Strategies 10 dict dup						begin						/$Type3Underprint							{							currentglobal exch false setglobal							11 dict								begin								/UseFont exch									$WMode 0 ne										{										dup length dict copy										dup/WMode $WMode put										/UseFont exch definefont										}									if def								/FontName $fontname dup type/stringtype eq{cvn}if def								/FontType 3 def								/FontMatrix[.001 0 0 .001 0 0]def								/Encoding 256 array dup 0 1 255{/.notdef put dup}for pop def								/FontBBox[0 0 0 0]def								/CCInfo 7 dict dup									begin									/cc null def									/x 0 def									/y 0 def									end def								/BuildChar									{									exch										begin										CCInfo											begin											1 string dup 0 3 index put exch pop											/cc exch def											UseFont 1000 scalefont setfont											cc stringwidth/y exch def/x exch def											x y setcharwidth											$SubstituteFont/$Strategy get/$Underprint get exec											0 0 moveto cc show											x y moveto											end										end									}bind def								currentdict								end							exch setglobal							}bind def						/$GetaTint							2 dict dup								begin								/$BuildFont									{									dup/WMode known										{dup/WMode get}										{0}									ifelse									/$WMode exch def									$fontname exch									dup/FontName known										{										dup/FontName get										dup type/stringtype eq{cvn}if										}										{/unnamedfont}									ifelse									exch									Adobe_CoolType_Data/InVMDeepCopiedFonts get									1 index/FontName get known										{										pop										Adobe_CoolType_Data/InVMDeepCopiedFonts get										1 index get										null copyfont										}										{$deepcopyfont}									ifelse									exch 1 index exch/FontBasedOn exch put									dup/FontName $fontname dup type/stringtype eq{cvn}if put									definefont									Adobe_CoolType_Data/InVMDeepCopiedFonts get										begin										dup/FontBasedOn get 1 index def										end									}bind def								/$Underprint									{									gsave									x abs y abs gt										{/y 1000 def}										{/x -1000 def 500 120 translate}									ifelse									Level2?										{										[/Separation(All)/DeviceCMYK{0 0 0 1 pop}]										setcolorspace										}										{0 setgray}									ifelse									10 setlinewidth									x .8 mul									[7 3]										{										y mul 8 div 120 sub x 10 div exch moveto										0 y 4 div neg rlineto										dup 0 rlineto										0 y 4 div rlineto										closepath										gsave										Level2?											{.2 setcolor}											{.8 setgray}										ifelse										fill grestore										stroke										}									forall									pop									grestore									}bind def								end def						/$Oblique							1 dict dup								begin								/$BuildFont									{									currentglobal exch dup gcheck setglobal									null copyfont										begin										/FontBasedOn										currentdict/FontName known											{											FontName											dup type/stringtype eq{cvn}if											}											{/unnamedfont}										ifelse										def										/FontName $fontname dup type/stringtype eq{cvn}if def										/currentdistillerparams where											{pop}											{											/FontInfo currentdict/FontInfo known												{FontInfo null copyfont}												{2 dict}											ifelse											dup												begin												/ItalicAngle $italicangle def												/FontMatrix FontMatrix												[1 0 ItalicAngle dup sin exch cos div 1 0 0]												matrix concatmatrix readonly												end											4 2 roll def											def											}										ifelse										FontName currentdict										end									definefont									exch setglobal									}bind def								end def						/$None							1 dict dup								begin								/$BuildFont{}bind def								end def						end def					/$Oblique SetSubstituteStrategy					/$findfontByEnum						{						dup type/stringtype eq{cvn}if						dup/$fontname exch def						$sname null eq							{$str cvs dup length $slen sub $slen getinterval}							{pop $sname}						ifelse						$fontpat dup 0(fonts/*)putinterval exch 7 exch putinterval						/$match false def						$SubstituteFont/$dstack countdictstack array dictstack put						mark							{							$fontpat 0 $slen 7 add getinterval								{/$match exch def exit}							$str filenameforall							}						stopped							{							cleardictstack							currentdict							true							$SubstituteFont/$dstack get								{								exch									{									1 index eq										{pop false}										{true}									ifelse									}									{begin false}								ifelse								}							forall							pop							}						if						cleartomark						/$slen 0 def						$match false ne							{$match(fonts/)anchorsearch pop pop cvn}							{/Courier}						ifelse						}bind def					/$ROS 1 dict dup						begin						/Adobe 4 dict dup							begin							/Japan1 [/Ryumin-Light/HeiseiMin-W3										 /GothicBBB-Medium/HeiseiKakuGo-W5										 /HeiseiMaruGo-W4/Jun101-Light]def							/Korea1 [/HYSMyeongJo-Medium/HYGoThic-Medium]def							/GB1	 [/STSong-Light/STHeiti-Regular]def							/CNS1	[/MKai-Medium/MHei-Medium]def							end def						end def					/$cmapname null def					/$deepcopyfont						{						dup/FontType get 0 eq							{							1 dict dup/FontName/copied put copyfont								begin								/FDepVector FDepVector copyarray								0 1 2 index length 1 sub									{									2 copy get $deepcopyfont									dup/FontName/copied put									/copied exch definefont									3 copy put pop pop									}								for								def								currentdict								end							}							{$Strategies/$Type3Underprint get exec}						ifelse						}bind def					/$buildfontname						{						dup/CIDFont findresource/CIDSystemInfo get							begin							Registry length Ordering length Supplement 8 string cvs							3 copy length 2 add add add string							dup 5 1 roll dup 0 Registry putinterval							dup 4 index(-)putinterval							dup 4 index 1 add Ordering putinterval							4 2 roll add 1 add 2 copy(-)putinterval							end						1 add 2 copy 0 exch getinterval $cmapname $fontpat cvs exch						anchorsearch							{pop pop 3 2 roll putinterval cvn/$cmapname exch def}							{pop pop pop pop pop}						ifelse						length						$str 1 index(-)putinterval 1 add						$str 1 index $cmapname $fontpat cvs putinterval						$cmapname length add						$str exch 0 exch getinterval cvn						}bind def					/$findfontByROS						{						/$fontname exch def						$ROS Registry 2 copy known							{							get Ordering 2 copy known								{get}								{pop pop[]}							ifelse							}							{pop pop[]}						ifelse						false exch							{							dup/CIDFont resourcestatus								{								pop pop								save								1 index/CIDFont findresource								dup/WidthsOnly known									{dup/WidthsOnly get}									{false}								ifelse								exch pop								exch restore									{pop}									{exch pop true exit}								ifelse								}								{pop}							ifelse							}						forall							{$str cvs $buildfontname}							{							false(*)								{								save exch								dup/CIDFont findresource								dup/WidthsOnly known									{dup/WidthsOnly get not}									{true}								ifelse								exch/CIDSystemInfo get								dup/Registry get Registry eq								exch/Ordering get Ordering eq and and									{exch restore exch pop true exit}									{pop restore}								ifelse								}							$str/CIDFont resourceforall								{$buildfontname}								{$fontname $findfontByEnum}							ifelse							}						ifelse						}bind def					end				end				currentdict/$error known currentdict/languagelevel known and dup					{pop $error/SubstituteFont known}				if				dup					{$error}					{Adobe_CoolType_Core}				ifelse				begin					{					/SubstituteFont					/CMap/Category resourcestatus						{						pop pop						{						$SubstituteFont							begin							/$substituteFound true def							dup length $slen gt							$sname null ne or							$slen 0 gt and								{								$sname null eq									{dup $str cvs dup length $slen sub $slen getinterval cvn}									{$sname}								ifelse								Adobe_CoolType_Data/InVMFontsByCMap get								1 index 2 copy known									{									get									false exch										{										pop										currentglobal											{											GlobalFontDirectory 1 index known												{exch pop true exit}												{pop}											ifelse											}											{											FontDirectory 1 index known												{exch pop true exit}												{												GlobalFontDirectory 1 index known													{exch pop true exit}													{pop}												ifelse												}											ifelse											}										ifelse										}									forall									}									{pop pop false}								ifelse									{									exch pop exch pop									}									{									dup/CMap resourcestatus										{										pop pop										dup/$cmapname exch def										/CMap findresource/CIDSystemInfo get{def}forall										$findfontByROS										}										{										128 string cvs										dup(-)search											{											3 1 roll search												{												3 1 roll pop													{dup cvi}												stopped													{pop pop pop pop pop $findfontByEnum}													{													4 2 roll pop pop													exch length													exch													2 index length													2 index													sub													exch 1 sub -1 0														{														$str cvs dup length														4 index														0														4 index														4 3 roll add														getinterval														exch 1 index exch 3 index exch														putinterval														dup/CMap resourcestatus															{															pop pop															4 1 roll pop pop pop															dup/$cmapname exch def															/CMap findresource/CIDSystemInfo get{def}forall															$findfontByROS															true exit															}															{pop}														ifelse														}													for													dup type/booleantype eq														{pop}														{pop pop pop $findfontByEnum}													ifelse													}												ifelse												}												{pop pop pop $findfontByEnum}											ifelse											}											{pop pop $findfontByEnum}										ifelse										}									ifelse									}								ifelse								}								{//SubstituteFont exec}							ifelse							/$slen 0 def							end						}						}						{						{						$SubstituteFont							begin							/$substituteFound true def							dup length $slen gt							$sname null ne or							$slen 0 gt and								{$findfontByEnum}								{//SubstituteFont exec}							ifelse							end						}						}					ifelse					bind readonly def					Adobe_CoolType_Core/scfindfont/systemfindfont load put					}					{					/scfindfont						{						$SubstituteFont							begin							dup systemfindfont							dup/FontName known								{dup/FontName get dup 3 index ne}								{/noname true}							ifelse							dup								{								/$origfontnamefound 2 index def								/$origfontname 4 index def/$substituteFound true def								}							if							exch pop								{								$slen 0 gt								$sname null ne								3 index length $slen gt or and									{									pop dup $findfontByEnum findfont									dup maxlength 1 add dict										begin											{1 index/FID eq{pop pop}{def}ifelse}										forall										currentdict										end									definefont									dup/FontName known{dup/FontName get}{null}ifelse									$origfontnamefound ne										{										$origfontname $str cvs print										( substitution revised, using )print										dup/FontName known											{dup/FontName get}{(unspecified font)}										ifelse										$str cvs print(.\n)print										}									if									}									{exch pop}								ifelse								}								{exch pop}							ifelse							end						}bind def					}				ifelse				end			end		Adobe_CoolType_Core_Defined not			{			Adobe_CoolType_Core/findfont				{				$SubstituteFont					begin					$depth 0 eq						{						/$fontname 1 index dup type/stringtype ne{$str cvs}if def						/$substituteFound false def						}					if					/$depth $depth 1 add def					end				scfindfont				$SubstituteFont					begin					/$depth $depth 1 sub def					$substituteFound $depth 0 eq and						{						$inVMIndex null ne							{dup $inVMIndex $AddInVMFont}						if						$doSmartSub							{							currentdict/$Strategy known								{$Strategy/$BuildFont get exec}							if							}						if						}					if					end				}bind put			}		if		}	if	end/$AddInVMFont	{	exch/FontName 2 copy known		{		get		1 dict dup begin exch 1 index gcheck def end exch		Adobe_CoolType_Data/InVMFontsByCMap get exch		$DictAdd		}		{pop pop pop}	ifelse	}bind def/$DictAdd	{	2 copy known not		{2 copy 4 index length dict put}	if	Level2? not		{		2 copy get dup maxlength exch length 4 index length add lt		2 copy get dup length 4 index length add exch maxlength 1 index lt			{			2 mul dict				begin				2 copy get{forall}def				2 copy currentdict put				end			}			{pop}		ifelse		}	if	get		begin			{def}		forall		end	}bind defendend%%EndResourcecurrentglobal true setglobal%%BeginResource: procset Adobe_CoolType_Utility_MAKEOCF 1.23 0%%Copyright: Copyright 1987-2006 Adobe Systems Incorporated.%%Version: 1.23 0systemdict/languagelevel known dup	{currentglobal false setglobal}	{false}ifelseexchuserdict/Adobe_CoolType_Utility 2 copy known	{2 copy get dup maxlength 27 add dict copy}	{27 dict}ifelse putAdobe_CoolType_Utility	begin	/@eexecStartData		 <BAB431EA07F209EB8C4348311481D9D3F76E3D15246555577D87BC510ED54E		 118C39697FA9F6DB58128E60EB8A12FA24D7CDD2FA94D221FA9EC8DA3E5E6A1C		 4ACECC8C2D39C54E7C946031DD156C3A6B4A09AD29E1867A>def	/@recognizeCIDFont null def	/ct_Level2? exch def	/ct_Clone? 1183615869 internaldict dup			/CCRun known not			exch/eCCRun known not			ct_Level2? and or defct_Level2?	{globaldict begin currentglobal true setglobal}if	/ct_AddStdCIDMap		ct_Level2?			{{				mark				Adobe_CoolType_Utility/@recognizeCIDFont currentdict put					{					((Hex)57 StartData					 0615 1e27 2c39 1c60 d8a8 cc31 fe2b f6e0					 7aa3 e541 e21c 60d8 a8c9 c3d0 6d9e 1c60					 d8a8 c9c2 02d7 9a1c 60d8 a849 1c60 d8a8					 cc36 74f4 1144 b13b 77)0()/SubFileDecode filter cvx exec					}				stopped					{					 cleartomark					 Adobe_CoolType_Utility/@recognizeCIDFont get					 countdictstack dup array dictstack					 exch 1 sub -1 0						 {						 2 copy get 3 index eq								{1 index length exch sub 1 sub{end}repeat exit}								{pop}						 ifelse						 }					 for					 pop pop					 Adobe_CoolType_Utility/@eexecStartData get eexec					}					{cleartomark}				ifelse			}}			{{				Adobe_CoolType_Utility/@eexecStartData get eexec			}}		ifelse bind defuserdict/cid_extensions knowndup{cid_extensions/cid_UpdateDB known and}if	{	 cid_extensions	 begin	/cid_GetCIDSystemInfo		{		 1 index type/stringtype eq			{exch cvn exch}		 if		 cid_extensions			 begin			 dup load 2 index known				{				 2 copy				 cid_GetStatusInfo				 dup null ne					{					 1 index load					 3 index get					 dup null eq						 {pop pop cid_UpdateDB}						 {						 exch						 1 index/Created get eq							 {exch pop exch pop}							 {pop cid_UpdateDB}						 ifelse						 }					 ifelse					}					{pop cid_UpdateDB}				 ifelse				}				{cid_UpdateDB}			 ifelse			 end		}bind def	 end	}ifct_Level2?	{end setglobal}if	/ct_UseNativeCapability? systemdict/composefont known def	/ct_MakeOCF 35 dict def	/ct_Vars 25 dict def	/ct_GlyphDirProcs 6 dict def	/ct_BuildCharDict 15 dict dup		begin		/charcode 2 string def		/dst_string 1500 string def		/nullstring()def		/usewidths? true def		end def	ct_Level2?{setglobal}{pop}ifelse	ct_GlyphDirProcs		begin		/GetGlyphDirectory			{			systemdict/languagelevel known				{pop/CIDFont findresource/GlyphDirectory get}				{				1 index/CIDFont findresource/GlyphDirectory				get dup type/dicttype eq					{					dup dup maxlength exch length sub 2 index lt						{						dup length 2 index add dict copy 2 index						/CIDFont findresource/GlyphDirectory 2 index put						}					if					}				if				exch pop exch pop				}			ifelse			+			}def		/+			{			systemdict/languagelevel known				{				currentglobal false setglobal				3 dict begin					/vm exch def				}				{1 dict begin}			ifelse			/$ exch def			systemdict/languagelevel known				{				vm setglobal				/gvm currentglobal def				$ gcheck setglobal				}			if			?{$ begin}if			}def		/?{$ type/dicttype eq}def		/|{			userdict/Adobe_CoolType_Data known				{			Adobe_CoolType_Data/AddWidths? known				{				 currentdict Adobe_CoolType_Data					begin					 begin						AddWidths?								{								Adobe_CoolType_Data/CC 3 index put								?{def}{$ 3 1 roll put}ifelse								CC charcode exch 1 index 0 2 index 256 idiv put								1 index exch 1 exch 256 mod put								stringwidth 2 array astore								currentfont/Widths get exch CC exch put								}								{?{def}{$ 3 1 roll put}ifelse}							ifelse					end				end				}				{?{def}{$ 3 1 roll put}ifelse}	ifelse				}				{?{def}{$ 3 1 roll put}ifelse}			ifelse			}def		/!			{			?{end}if			systemdict/languagelevel known				{gvm setglobal}			if			end			}def		/:{string currentfile exch readstring pop}executeonly def		end	ct_MakeOCF		begin		/ct_cHexEncoding		[/c00/c01/c02/c03/c04/c05/c06/c07/c08/c09/c0A/c0B/c0C/c0D/c0E/c0F/c10/c11/c12		/c13/c14/c15/c16/c17/c18/c19/c1A/c1B/c1C/c1D/c1E/c1F/c20/c21/c22/c23/c24/c25		/c26/c27/c28/c29/c2A/c2B/c2C/c2D/c2E/c2F/c30/c31/c32/c33/c34/c35/c36/c37/c38		/c39/c3A/c3B/c3C/c3D/c3E/c3F/c40/c41/c42/c43/c44/c45/c46/c47/c48/c49/c4A/c4B		/c4C/c4D/c4E/c4F/c50/c51/c52/c53/c54/c55/c56/c57/c58/c59/c5A/c5B/c5C/c5D/c5E		/c5F/c60/c61/c62/c63/c64/c65/c66/c67/c68/c69/c6A/c6B/c6C/c6D/c6E/c6F/c70/c71		/c72/c73/c74/c75/c76/c77/c78/c79/c7A/c7B/c7C/c7D/c7E/c7F/c80/c81/c82/c83/c84		/c85/c86/c87/c88/c89/c8A/c8B/c8C/c8D/c8E/c8F/c90/c91/c92/c93/c94/c95/c96/c97		/c98/c99/c9A/c9B/c9C/c9D/c9E/c9F/cA0/cA1/cA2/cA3/cA4/cA5/cA6/cA7/cA8/cA9/cAA		/cAB/cAC/cAD/cAE/cAF/cB0/cB1/cB2/cB3/cB4/cB5/cB6/cB7/cB8/cB9/cBA/cBB/cBC/cBD		/cBE/cBF/cC0/cC1/cC2/cC3/cC4/cC5/cC6/cC7/cC8/cC9/cCA/cCB/cCC/cCD/cCE/cCF/cD0		/cD1/cD2/cD3/cD4/cD5/cD6/cD7/cD8/cD9/cDA/cDB/cDC/cDD/cDE/cDF/cE0/cE1/cE2/cE3		/cE4/cE5/cE6/cE7/cE8/cE9/cEA/cEB/cEC/cED/cEE/cEF/cF0/cF1/cF2/cF3/cF4/cF5/cF6		/cF7/cF8/cF9/cFA/cFB/cFC/cFD/cFE/cFF]def		/ct_CID_STR_SIZE 8000 def		/ct_mkocfStr100 100 string def		/ct_defaultFontMtx[.001 0 0 .001 0 0]def		/ct_1000Mtx[1000 0 0 1000 0 0]def		/ct_raise{exch cvx exch errordict exch get exec stop}bind def		/ct_reraise			{cvx $error/errorname get(Error: )print dup(						 )cvs print					errordict exch get exec stop			}bind def		/ct_cvnsi			{			1 index add 1 sub 1 exch 0 4 1 roll				{				2 index exch get				exch 8 bitshift				add				}			for			exch pop			}bind def		/ct_GetInterval			{			Adobe_CoolType_Utility/ct_BuildCharDict get				begin				/dst_index 0 def				dup dst_string length gt					{dup string/dst_string exch def}				if				1 index ct_CID_STR_SIZE idiv				/arrayIndex exch def				2 index arrayIndex get				2 index				arrayIndex ct_CID_STR_SIZE mul				sub					{					dup 3 index add 2 index length le						{						2 index getinterval						dst_string dst_index 2 index putinterval						length dst_index add/dst_index exch def						exit						}						{						1 index length 1 index sub						dup 4 1 roll						getinterval						dst_string dst_index 2 index putinterval						pop dup dst_index add/dst_index exch def						sub						/arrayIndex arrayIndex 1 add def						2 index dup length arrayIndex gt							 {arrayIndex get}							 {							 pop							 exit							 }						ifelse						0						}					ifelse					}				loop				pop pop pop				dst_string 0 dst_index getinterval				end			}bind def		ct_Level2?			{			/ct_resourcestatus			currentglobal mark true setglobal				{/unknowninstancename/Category resourcestatus}			stopped				{cleartomark setglobal true}				{cleartomark currentglobal not exch setglobal}			ifelse				{					{					mark 3 1 roll/Category findresource						begin						ct_Vars/vm currentglobal put						({ResourceStatus}stopped)0()/SubFileDecode filter cvx exec							{cleartomark false}							{{3 2 roll pop true}{cleartomark false}ifelse}						ifelse						ct_Vars/vm get setglobal						end					}				}				{{resourcestatus}}			ifelse bind def			/CIDFont/Category ct_resourcestatus				{pop pop}				{				currentglobal true setglobal				/Generic/Category findresource				dup length dict copy				dup/InstanceType/dicttype put				/CIDFont exch/Category defineresource pop				setglobal				}			ifelse			ct_UseNativeCapability?				{				/CIDInit/ProcSet findresource begin				12 dict begin				begincmap				/CIDSystemInfo 3 dict dup begin				 /Registry(Adobe)def				 /Ordering(Identity)def				 /Supplement 0 def				end def				/CMapName/Identity-H def				/CMapVersion 1.000 def				/CMapType 1 def				1 begincodespacerange				<0000><FFFF>				endcodespacerange				1 begincidrange				<0000><FFFF>0				endcidrange				endcmap				CMapName currentdict/CMap defineresource pop				end				end				}			if			}			{			/ct_Category 2 dict begin			/CIDFont 10 dict def			/ProcSet	2 dict def			currentdict			end			def			/defineresource				{				ct_Category 1 index 2 copy known					{					get					dup dup maxlength exch length eq						{						dup length 10 add dict copy						ct_Category 2 index 2 index put						}					if					3 index 3 index put					pop exch pop					}					{pop pop/defineresource/undefined ct_raise}				ifelse				}bind def			/findresource				{				ct_Category 1 index 2 copy known					{					get					2 index 2 copy known						{get 3 1 roll pop pop}						{pop pop/findresource/undefinedresource ct_raise}					ifelse					}					{pop pop/findresource/undefined ct_raise}				ifelse				}bind def			/resourcestatus				{				ct_Category 1 index 2 copy known					{					get					2 index known					exch pop exch pop						{						0 -1 true						}						{						false						}					ifelse					}					{pop pop/findresource/undefined ct_raise}				ifelse				}bind def			/ct_resourcestatus/resourcestatus load def			}		ifelse		/ct_CIDInit 2 dict			begin			/ct_cidfont_stream_init				{					{					dup(Binary)eq						{						pop						null						currentfile						ct_Level2?							{								{cid_BYTE_COUNT()/SubFileDecode filter}							stopped								{pop pop pop}							if							}						if						/readstring load						exit						}					if					dup(Hex)eq						{						pop						currentfile						ct_Level2?							{								{null exch/ASCIIHexDecode filter/readstring}							stopped								{pop exch pop(>)exch/readhexstring}							if							}							{(>)exch/readhexstring}						ifelse						load						exit						}					if					/StartData/typecheck ct_raise					}				loop				cid_BYTE_COUNT ct_CID_STR_SIZE le					{					2 copy cid_BYTE_COUNT string exch exec					pop					1 array dup					3 -1 roll					0 exch put					}					{					cid_BYTE_COUNT ct_CID_STR_SIZE div ceiling cvi					dup array exch 2 sub 0 exch 1 exch						{						2 copy						5 index						ct_CID_STR_SIZE						string						6 index exec						pop						put						pop						}					for					2 index					cid_BYTE_COUNT ct_CID_STR_SIZE mod string					3 index exec					pop					1 index exch					1 index length 1 sub					exch put					}				ifelse				cid_CIDFONT exch/GlyphData exch put				2 index null eq					{					pop pop pop					}					{					pop/readstring load					1 string exch						{						3 copy exec						pop						dup length 0 eq							{							pop pop pop pop pop							true exit							}						if						4 index						eq							{							pop pop pop pop							false exit							}						if						}					loop					pop					}				ifelse				}bind def			/StartData				{				mark					{					currentdict					dup/FDArray get 0 get/FontMatrix get					0 get 0.001 eq						{						dup/CDevProc known not							{							/CDevProc 1183615869 internaldict/stdCDevProc 2 copy known								{get}								{								pop pop								{pop pop pop pop pop 0 -1000 7 index 2 div 880}								}							ifelse							def							}						if						}						{						/CDevProc							{							 pop pop pop pop pop							 0							 1 cid_temp/cid_CIDFONT get							/FDArray get 0 get							/FontMatrix get 0 get div							 7 index 2 div							 1 index 0.88 mul							}def						}					ifelse					/cid_temp 15 dict def					cid_temp						begin						/cid_CIDFONT exch def						3 copy pop						dup/cid_BYTE_COUNT exch def 0 gt							{							ct_cidfont_stream_init							FDArray								{								/Private get								dup/SubrMapOffset known									{									begin									/Subrs SubrCount array def									Subrs									SubrMapOffset									SubrCount									SDBytes									ct_Level2?										{										currentdict dup/SubrMapOffset undef										dup/SubrCount undef										/SDBytes undef										}									if									end									/cid_SD_BYTES exch def									/cid_SUBR_COUNT exch def									/cid_SUBR_MAP_OFFSET exch def									/cid_SUBRS exch def									cid_SUBR_COUNT 0 gt										{										GlyphData cid_SUBR_MAP_OFFSET cid_SD_BYTES ct_GetInterval										0 cid_SD_BYTES ct_cvnsi										0 1 cid_SUBR_COUNT 1 sub											{											exch 1 index											1 add											cid_SD_BYTES mul cid_SUBR_MAP_OFFSET add											GlyphData exch cid_SD_BYTES ct_GetInterval											0 cid_SD_BYTES ct_cvnsi											cid_SUBRS 4 2 roll											GlyphData exch											4 index											1 index											sub											ct_GetInterval											dup length string copy put											}										for										pop										}									if									}									{pop}								ifelse								}							forall							}						if						cleartomark pop pop						end					CIDFontName currentdict/CIDFont defineresource pop					end end					}				stopped					{cleartomark/StartData ct_reraise}				if				}bind def			currentdict			end def		/ct_saveCIDInit			{			/CIDInit/ProcSet ct_resourcestatus				{true}				{/CIDInitC/ProcSet ct_resourcestatus}			ifelse				{				pop pop				/CIDInit/ProcSet findresource				ct_UseNativeCapability?					{pop null}					{/CIDInit ct_CIDInit/ProcSet defineresource pop}				ifelse				}				{/CIDInit ct_CIDInit/ProcSet defineresource pop null}			ifelse			ct_Vars exch/ct_oldCIDInit exch put			}bind def		/ct_restoreCIDInit			{			ct_Vars/ct_oldCIDInit get dup null ne				{/CIDInit exch/ProcSet defineresource pop}				{pop}			ifelse			}bind def		/ct_BuildCharSetUp			{			1 index				begin				CIDFont					begin					Adobe_CoolType_Utility/ct_BuildCharDict get						begin						/ct_dfCharCode exch def						/ct_dfDict exch def						CIDFirstByte ct_dfCharCode add						dup CIDCount ge							{pop 0}						if						/cid exch def							{							GlyphDirectory cid 2 copy known								{get}								{pop pop nullstring}							ifelse							dup length FDBytes sub 0 gt								{								dup								FDBytes 0 ne									{0 FDBytes ct_cvnsi}									{pop 0}								ifelse								/fdIndex exch def								dup length FDBytes sub FDBytes exch getinterval								/charstring exch def								exit								}								{								pop								cid 0 eq									{/charstring nullstring def exit}								if								/cid 0 def								}							ifelse							}						loop			}def		/ct_SetCacheDevice			{			0 0 moveto			dup stringwidth			3 -1 roll			true charpath			pathbbox			0 -1000			7 index 2 div 880			setcachedevice2			0 0 moveto			}def		/ct_CloneSetCacheProc			{			1 eq				{				stringwidth				pop -2 div -880				0 -1000 setcharwidth				moveto				}				{				usewidths?					{					currentfont/Widths get cid					2 copy known						{get exch pop aload pop}						{pop pop stringwidth}					ifelse					}					{stringwidth}				ifelse				setcharwidth				0 0 moveto				}			ifelse			}def		/ct_Type3ShowCharString			{			ct_FDDict fdIndex 2 copy known				{get}				{				currentglobal 3 1 roll				1 index gcheck setglobal				ct_Type1FontTemplate dup maxlength dict copy					begin					FDArray fdIndex get					dup/FontMatrix 2 copy known						{get}						{pop pop ct_defaultFontMtx}					ifelse					/FontMatrix exch dup length array copy def					/Private get					/Private exch def					/Widths rootfont/Widths get def					/CharStrings 1 dict dup/.notdef						<d841272cf18f54fc13>dup length string copy put def					currentdict					end				/ct_Type1Font exch definefont				dup 5 1 roll put				setglobal				}			ifelse			dup/CharStrings get 1 index/Encoding get			ct_dfCharCode get charstring put			rootfont/WMode 2 copy known				{get}				{pop pop 0}			ifelse			exch			1000 scalefont setfont			ct_str1 0 ct_dfCharCode put			ct_str1 exch ct_dfSetCacheProc			ct_SyntheticBold				{				currentpoint				ct_str1 show				newpath				moveto				ct_str1 true charpath				ct_StrokeWidth setlinewidth				stroke				}				{ct_str1 show}			ifelse			}def		/ct_Type4ShowCharString			{			ct_dfDict ct_dfCharCode charstring			FDArray fdIndex get			dup/FontMatrix get dup ct_defaultFontMtx ct_matrixeq not				{ct_1000Mtx matrix concatmatrix concat}				{pop}			ifelse			/Private get			Adobe_CoolType_Utility/ct_Level2? get not				{				ct_dfDict/Private				3 -1 roll					{put}				1183615869 internaldict/superexec get exec				}			if			1183615869 internaldict			Adobe_CoolType_Utility/ct_Level2? get				{1 index}				{3 index/Private get mark 6 1 roll}			ifelse			dup/RunInt known				{/RunInt get}				{pop/CCRun}			ifelse			get exec			Adobe_CoolType_Utility/ct_Level2? get not				{cleartomark}			if			}bind def		/ct_BuildCharIncremental			{				{				Adobe_CoolType_Utility/ct_MakeOCF get begin				ct_BuildCharSetUp				ct_ShowCharString				}			stopped				{stop}			if			end			end			end			end			}bind def		/BaseFontNameStr(BF00)def		/ct_Type1FontTemplate 14 dict			begin			/FontType 1 def			/FontMatrix [0.001 0 0 0.001 0 0]def			/FontBBox [-250 -250 1250 1250]def			/Encoding ct_cHexEncoding def			/PaintType 0 def			currentdict			end def		/BaseFontTemplate 11 dict			begin			/FontMatrix [0.001 0 0 0.001 0 0]def			/FontBBox [-250 -250 1250 1250]def			/Encoding ct_cHexEncoding def			/BuildChar/ct_BuildCharIncremental load def			ct_Clone?				{				/FontType 3 def				/ct_ShowCharString/ct_Type3ShowCharString load def				/ct_dfSetCacheProc/ct_CloneSetCacheProc load def				/ct_SyntheticBold false def				/ct_StrokeWidth 1 def				}				{				/FontType 4 def				/Private 1 dict dup/lenIV 4 put def				/CharStrings 1 dict dup/.notdef<d841272cf18f54fc13>put def				/PaintType 0 def				/ct_ShowCharString/ct_Type4ShowCharString load def				}			ifelse			/ct_str1 1 string def			currentdict			end def		/BaseFontDictSize BaseFontTemplate length 5 add def		/ct_matrixeq			{			true 0 1 5				{				dup 4 index exch get exch 3 index exch get eq and				dup not					{exit}				if				}			for			exch pop exch pop			}bind def		/ct_makeocf			{			15 dict				begin				exch/WMode exch def				exch/FontName exch def				/FontType 0 def				/FMapType 2 def			dup/FontMatrix known				{dup/FontMatrix get/FontMatrix exch def}				{/FontMatrix matrix def}			ifelse				/bfCount 1 index/CIDCount get 256 idiv 1 add					dup 256 gt{pop 256}if def				/Encoding					256 array 0 1 bfCount 1 sub{2 copy dup put pop}for					bfCount 1 255{2 copy bfCount put pop}for					def				/FDepVector bfCount dup 256 lt{1 add}if array def				BaseFontTemplate BaseFontDictSize dict copy					begin					/CIDFont exch def					CIDFont/FontBBox known						{CIDFont/FontBBox get/FontBBox exch def}					if					CIDFont/CDevProc known						{CIDFont/CDevProc get/CDevProc exch def}					if					currentdict					end				BaseFontNameStr 3(0)putinterval				0 1 bfCount dup 256 eq{1 sub}if					{					FDepVector exch					2 index BaseFontDictSize dict copy						begin						dup/CIDFirstByte exch 256 mul def						FontType 3 eq							{/ct_FDDict 2 dict def}						if						currentdict						end					1 index 16					BaseFontNameStr 2 2 getinterval cvrs pop					BaseFontNameStr exch definefont					put					}				for				ct_Clone?					{/Widths 1 index/CIDFont get/GlyphDirectory get length dict def}				if				FontName				currentdict				end			definefont			ct_Clone?				{				gsave				dup 1000 scalefont setfont				ct_BuildCharDict					begin					/usewidths? false def					currentfont/Widths get						begin						exch/CIDFont get/GlyphDirectory get							{							pop							dup charcode exch 1 index 0 2 index 256 idiv put							1 index exch 1 exch 256 mod put							stringwidth 2 array astore def							}						forall						end					/usewidths? true def					end				grestore				}				{exch pop}			ifelse			}bind def		currentglobal true setglobal		/ct_ComposeFont			{			ct_UseNativeCapability?				{								2 index/CMap ct_resourcestatus					{pop pop exch pop}					{					/CIDInit/ProcSet findresource						begin						12 dict							begin							begincmap							/CMapName 3 index def							/CMapVersion 1.000 def							/CMapType 1 def							exch/WMode exch def							/CIDSystemInfo 3 dict dup								begin								/Registry(Adobe)def								/Ordering								CMapName ct_mkocfStr100 cvs								(Adobe-)search									{									pop pop									(-)search										{										dup length string copy										exch pop exch pop										}										{pop(Identity)}									ifelse									}									{pop (Identity)}								ifelse								def								/Supplement 0 def								end def							1 begincodespacerange							<0000><FFFF>							endcodespacerange							1 begincidrange							<0000><FFFF>0							endcidrange							endcmap							CMapName currentdict/CMap defineresource pop							end						end					}				ifelse				composefont				}				{				3 2 roll pop				0 get/CIDFont findresource				ct_makeocf				}			ifelse			}bind def			setglobal		/ct_MakeIdentity			{			ct_UseNativeCapability?				{				1 index/CMap ct_resourcestatus					{pop pop}					{					/CIDInit/ProcSet findresource begin					12 dict begin					begincmap					/CMapName 2 index def					/CMapVersion 1.000 def					/CMapType 1 def					/CIDSystemInfo 3 dict dup						begin						/Registry(Adobe)def						/Ordering						CMapName ct_mkocfStr100 cvs						(Adobe-)search							{							pop pop							(-)search								{dup length string copy exch pop exch pop}								{pop(Identity)}							ifelse							}							{pop(Identity)}						ifelse						def						/Supplement 0 def						end def					1 begincodespacerange					<0000><FFFF>					endcodespacerange					1 begincidrange					<0000><FFFF>0					endcidrange					endcmap					CMapName currentdict/CMap defineresource pop					end					end					}				ifelse				composefont				}				{				exch pop				0 get/CIDFont findresource				ct_makeocf				}			ifelse			}bind def		currentdict readonly pop		end	end%%EndResourcesetglobal%%BeginResource: procset Adobe_CoolType_Utility_T42 1.0 0%%Copyright: Copyright 1987-2004 Adobe Systems Incorporated.%%Version: 1.0 0userdict/ct_T42Dict 15 dict putct_T42Dict begin/Is2015?{ version cvi 2015 ge}bind def/AllocGlyphStorage{ Is2015? {		pop } {	{string}forall }ifelse}bind def/Type42DictBegin{25 dict begin /FontName exch def /CharStrings 256 dict begin	 /.notdef 0 def	 currentdict end def /Encoding exch def /PaintType 0 def /FontType 42 def /FontMatrix[1 0 0 1 0 0]def 4 array astore cvx/FontBBox exch def /sfnts}bind def/Type42DictEnd { currentdict dup/FontName get exch definefont endct_T42Dict exchdup/FontName get exch put}bind def/RD{string currentfile exch readstring pop}executeonly def/PrepFor2015{Is2015?{		 	/GlyphDirectory 	 16	 dict def	 sfnts 0 get	 dup	 2 index	(glyx)	 putinterval	 2 index 	(locx)	 putinterval	 pop	 pop}{	 pop	 pop}ifelse			}bind def/AddT42Char{Is2015?{	/GlyphDirectory get 	begin	def	end	pop	pop}{	/sfnts get	4 index	get	3 index 2 index	putinterval	pop	pop	pop	pop}ifelse}bind def/T0AddT42Mtx2{/CIDFont findresource/Metrics2 get begin def end}bind defend%%EndResourcecurrentglobal true setglobal%%BeginFile: MMFauxFont.prc%%Copyright: Copyright 1987-2001 Adobe Systems Incorporated. %%All Rights Reserved.userdict /ct_EuroDict 10 dict putct_EuroDict begin/ct_CopyFont {    { 1 index /FID ne {def} {pop pop} ifelse} forall} def/ct_GetGlyphOutline{   gsave   initmatrix newpath   exch findfont dup    length 1 add dict    begin 		ct_CopyFont 		/Encoding Encoding dup length array copy 		dup		4 -1 roll		0 exch put   		def		currentdict   end   /ct_EuroFont exch definefont   1000 scalefont setfont   0 0 moveto   [       <00> stringwidth        <00> false charpath       pathbbox       [       {/m cvx} {/l cvx} {/c cvx} {/cp cvx} pathforall   grestore   counttomark 8 add}def/ct_MakeGlyphProc{   ] cvx   /ct_PSBuildGlyph cvx   ] cvx} def/ct_PSBuildGlyph {  	gsave 	8 -1 roll pop 	7 1 roll         6 -2 roll ct_FontMatrix transform 6 2 roll        4 -2 roll ct_FontMatrix transform 4 2 roll        ct_FontMatrix transform 	currentdict /PaintType 2 copy known {get 2 eq}{pop pop false} ifelse  	dup  9 1 roll 	{  		currentdict /StrokeWidth 2 copy known  		{   			get 2 div   			0 ct_FontMatrix dtransform pop			5 1 roll  			4 -1 roll 4 index sub   			4 1 roll   			3 -1 roll 4 index sub  			3 1 roll   			exch 4 index add exch  			4 index add  			5 -1 roll pop  		}  		{	 			pop pop 		}  		ifelse  	}           if  	setcachedevice          ct_FontMatrix concat        ct_PSPathOps begin 		exec 	end 	{  		currentdict /StrokeWidth 2 copy known  			{ get }  			{ pop pop 0 }    	    ifelse  		setlinewidth stroke  	}  	{   	    fill  	}  	ifelse      grestore} def /ct_PSPathOps 4 dict dup begin 	/m {moveto} def 	/l {lineto} def 	/c {curveto} def 	/cp {closepath} def end def /ct_matrix1000 [1000 0 0 1000 0 0] def/ct_AddGlyphProc  {   2 index findfont dup length 4 add dict    begin 	ct_CopyFont 	/CharStrings CharStrings dup length 1 add dict copy      begin         3 1 roll def           currentdict       end       def      /ct_FontMatrix ct_matrix1000 FontMatrix matrix concatmatrix def      /ct_PSBuildGlyph /ct_PSBuildGlyph load def      /ct_PSPathOps /ct_PSPathOps load def      currentdict   end   definefont pop}defsystemdict /languagelevel known{	/ct_AddGlyphToPrinterFont {		2 copy		ct_GetGlyphOutline 3 add -1 roll restore 		ct_MakeGlyphProc 		ct_AddGlyphProc	} def}{	/ct_AddGlyphToPrinterFont {	    pop pop restore		Adobe_CTFauxDict /$$$FONTNAME get		/Euro		Adobe_CTFauxDict /$$$SUBSTITUTEBASE get		ct_EuroDict exch get		ct_AddGlyphProc	} def} ifelse/AdobeSansMM { 556 0 24 -19 541 703 	{ 	541 628 m 	510 669 442 703 354 703 c 	201 703 117 607 101 444 c 	50 444 l 	25 372 l 	97 372 l 	97 301 l 	49 301 l 	24 229 l 	103 229 l 	124 67 209 -19 350 -19 c 	435 -19 501 25 509 32 c 	509 131 l 	492 105 417 60 343 60 c 	267 60 204 127 197 229 c 	406 229 l 	430 301 l 	191 301 l 	191 372 l 	455 372 l 	479 444 l 	194 444 l 	201 531 245 624 348 624 c 	433 624 484 583 509 534 c 	cp 	556 0 m 	}ct_PSBuildGlyph} def/AdobeSerifMM { 500 0 10 -12 484 692 	{ 	347 298 m 	171 298 l 	170 310 170 322 170 335 c 	170 362 l 	362 362 l 	374 403 l 	172 403 l 	184 580 244 642 308 642 c 	380 642 434 574 457 457 c 	481 462 l 	474 691 l 	449 691 l 	433 670 429 657 410 657 c 	394 657 360 692 299 692 c 	204 692 94 604 73 403 c 	22 403 l 	10 362 l 	70 362 l 	69 352 69 341 69 330 c 	69 319 69 308 70 298 c 	22 298 l 	10 257 l 	73 257 l 	97 57 216 -12 295 -12 c 	364 -12 427 25 484 123 c 	458 142 l 	425 101 384 37 316 37 c 	256 37 189 84 173 257 c 	335 257 l 	cp 	500 0 m 	} ct_PSBuildGlyph } def end		%%EndFilesetglobalAdobe_CoolType_Core begin /$Oblique SetSubstituteStrategy end%%BeginResource: procset Adobe_AGM_Image 1.0 0
%%Version: 1.0 0
%%Copyright: Copyright(C)2000-2006 Adobe Systems, Inc. All Rights Reserved.
systemdict/setpacking known
{
	currentpacking
	true setpacking
}if
userdict/Adobe_AGM_Image 71 dict dup begin put
/Adobe_AGM_Image_Id/Adobe_AGM_Image_1.0_0 def
/nd{
	null def
}bind def
/AGMIMG_&image nd
/AGMIMG_&colorimage nd
/AGMIMG_&imagemask nd
/AGMIMG_mbuf()def
/AGMIMG_ybuf()def
/AGMIMG_kbuf()def
/AGMIMG_c 0 def
/AGMIMG_m 0 def
/AGMIMG_y 0 def
/AGMIMG_k 0 def
/AGMIMG_tmp nd
/AGMIMG_imagestring0 nd
/AGMIMG_imagestring1 nd
/AGMIMG_imagestring2 nd
/AGMIMG_imagestring3 nd
/AGMIMG_imagestring4 nd
/AGMIMG_imagestring5 nd
/AGMIMG_cnt nd
/AGMIMG_fsave nd
/AGMIMG_colorAry nd
/AGMIMG_override nd
/AGMIMG_name nd
/AGMIMG_maskSource nd
/AGMIMG_flushfilters nd
/invert_image_samples nd
/knockout_image_samples	nd
/img nd
/sepimg nd
/devnimg nd
/idximg nd
/ds
{
	Adobe_AGM_Core begin
	Adobe_AGM_Image begin
	/AGMIMG_&image systemdict/image get def
	/AGMIMG_&imagemask systemdict/imagemask get def
	/colorimage where{
		pop
		/AGMIMG_&colorimage/colorimage ldf
	}if
	end
	end
}def
/ps
{
	Adobe_AGM_Image begin
	/AGMIMG_ccimage_exists{/customcolorimage where 
		{
			pop
			/Adobe_AGM_OnHost_Seps where
			{
			pop false
			}{
			/Adobe_AGM_InRip_Seps where
				{
				pop false
				}{
					true
				}ifelse
			}ifelse
			}{
			false
		}ifelse 
	}bdf
	level2{
		/invert_image_samples
		{
			Adobe_AGM_Image/AGMIMG_tmp Decode length ddf
			/Decode[Decode 1 get Decode 0 get]def
		}def
		/knockout_image_samples
		{
			Operator/imagemask ne{
				/Decode[1 1]def
			}if
		}def
	}{	
		/invert_image_samples
		{
			{1 exch sub}currenttransfer addprocs settransfer
		}def
		/knockout_image_samples
		{
			{pop 1}currenttransfer addprocs settransfer
		}def
	}ifelse
	/img/imageormask ldf
	/sepimg/sep_imageormask ldf
	/devnimg/devn_imageormask ldf
	/idximg/indexed_imageormask ldf
	/_ctype 7 def
	currentdict{
		dup xcheck 1 index type dup/arraytype eq exch/packedarraytype eq or and{
			bind
		}if
		def
	}forall
}def
/pt
{
	end
}def
/dt
{
}def
/AGMIMG_flushfilters
{
	dup type/arraytype ne
		{1 array astore}if
	dup 0 get currentfile ne
		{dup 0 get flushfile}if
		{
		dup type/filetype eq
			{
			dup status 1 index currentfile ne and
				{closefile}
				{pop}
			ifelse
			}{pop}ifelse
		}forall
}def
/AGMIMG_init_common
{
	currentdict/T known{/ImageType/T ldf currentdict/T undef}if
	currentdict/W known{/Width/W ldf currentdict/W undef}if
	currentdict/H known{/Height/H ldf currentdict/H undef}if
	currentdict/M known{/ImageMatrix/M ldf currentdict/M undef}if
	currentdict/BC known{/BitsPerComponent/BC ldf currentdict/BC undef}if
	currentdict/D known{/Decode/D ldf currentdict/D undef}if
	currentdict/DS known{/DataSource/DS ldf currentdict/DS undef}if
	currentdict/O known{
		/Operator/O load 1 eq{
			/imagemask
		}{
			/O load 2 eq{
				/image 
			}{
				/colorimage
			}ifelse
		}ifelse
		def
		currentdict/O undef
	}if
	currentdict/HSCI known{/HostSepColorImage/HSCI ldf currentdict/HSCI undef}if
	currentdict/MD known{/MultipleDataSources/MD ldf currentdict/MD undef}if
	currentdict/I known{/Interpolate/I ldf currentdict/I undef}if
	currentdict/SI known{/SkipImageProc/SI ldf currentdict/SI undef}if
	/DataSource load xcheck not{
		DataSource type/arraytype eq{
			DataSource 0 get type/filetype eq{
				/_Filters DataSource def
				currentdict/MultipleDataSources known not{
					/DataSource DataSource dup length 1 sub get def 
				}if
			}if
		}if
		currentdict/MultipleDataSources known not{
			/MultipleDataSources DataSource type/arraytype eq{
				DataSource length 1 gt
			}
			{false}ifelse def
		}if
	}if
	/NComponents Decode length 2 div def
	currentdict/SkipImageProc known not{/SkipImageProc{false}def}if
}bdf
/imageormask_sys
{
	begin
		AGMIMG_init_common
		save mark
		level2{
			currentdict
			Operator/imagemask eq{
				AGMIMG_&imagemask
			}{
				use_mask{
					process_mask AGMIMG_&image
				}{
					AGMIMG_&image
				}ifelse
			}ifelse
		}{
			Width Height
			Operator/imagemask eq{
				Decode 0 get 1 eq Decode 1 get 0 eq	and
				ImageMatrix/DataSource load
				AGMIMG_&imagemask
			}{
				BitsPerComponent ImageMatrix/DataSource load
				AGMIMG_&image
			}ifelse
		}ifelse
		currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
		cleartomark restore
	end
}def
/overprint_plate
{
	currentoverprint{
		0 get dup type/nametype eq{
			dup/DeviceGray eq{
				pop AGMCORE_black_plate not
			}{
				/DeviceCMYK eq{
					AGMCORE_is_cmyk_sep not
				}if
			}ifelse
		}{
			false exch
			{
				 AGMOHS_sepink eq or
			}forall
			not
		}ifelse
	}{
		pop false
	}ifelse
}def
/process_mask
{
	level3{
		dup begin
		/ImageType 1 def
		end
		4 dict begin
			/DataDict exch def
			/ImageType 3 def
			/InterleaveType 3 def
			/MaskDict 9 dict begin
				/ImageType 1 def
				/Width DataDict dup/MaskWidth known{/MaskWidth}{/Width}ifelse get def
				/Height DataDict dup/MaskHeight known{/MaskHeight}{/Height}ifelse get def
				/ImageMatrix[Width 0 0 Height neg 0 Height]def
				/NComponents 1 def
				/BitsPerComponent 1 def
				/Decode DataDict dup/MaskD known{/MaskD}{[1 0]}ifelse get def
				/DataSource Adobe_AGM_Core/AGMIMG_maskSource get def
			currentdict end def
		currentdict end
	}if
}def
/use_mask
{
	dup/Mask known	{dup/Mask get}{false}ifelse
}def
/imageormask
{
	begin
		AGMIMG_init_common
		SkipImageProc{
			currentdict consumeimagedata
		}
		{
			save mark
			level2 AGMCORE_host_sep not and{
				currentdict
				Operator/imagemask eq DeviceN_PS2 not and{
					imagemask
				}{
					AGMCORE_in_rip_sep currentoverprint and currentcolorspace 0 get/DeviceGray eq and{
						[/Separation/Black/DeviceGray{}]setcolorspace
						/Decode[Decode 1 get Decode 0 get]def
					}if
					use_mask{
						process_mask image
					}{
						DeviceN_NoneName DeviceN_PS2 Indexed_DeviceN level3 not and or or AGMCORE_in_rip_sep and 
						{
							Names convert_to_process not{
								2 dict begin
								/imageDict xdf
								/names_index 0 def
								gsave
								imageDict write_image_file{
									Names{
										dup(None)ne{
											[/Separation 3 -1 roll/DeviceGray{1 exch sub}]setcolorspace
											Operator imageDict read_image_file
											names_index 0 eq{true setoverprint}if
											/names_index names_index 1 add def
										}{
											pop
										}ifelse
									}forall
									close_image_file
								}if
								grestore
								end
							}{
								Operator/imagemask eq{
									imagemask
								}{
									image
								}ifelse
							}ifelse
						}{
							Operator/imagemask eq{
								imagemask
							}{
								image
							}ifelse
						}ifelse
					}ifelse
				}ifelse
			}{
				Width Height
				Operator/imagemask eq{
					Decode 0 get 1 eq Decode 1 get 0 eq	and
					ImageMatrix/DataSource load
					/Adobe_AGM_OnHost_Seps where{
						pop imagemask
					}{
						currentgray 1 ne{
							currentdict imageormask_sys
						}{
							currentoverprint not{
								1 AGMCORE_&setgray
								currentdict imageormask_sys
							}{
								currentdict ignoreimagedata
							}ifelse				 		
						}ifelse
					}ifelse
				}{
					BitsPerComponent ImageMatrix 
					MultipleDataSources{
						0 1 NComponents 1 sub{
							DataSource exch get
						}for
					}{
						/DataSource load
					}ifelse
					Operator/colorimage eq{
						AGMCORE_host_sep{
							MultipleDataSources level2 or NComponents 4 eq and{
								AGMCORE_is_cmyk_sep{
									MultipleDataSources{
										/DataSource DataSource 0 get xcheck
											{
											[
											DataSource 0 get/exec cvx
											DataSource 1 get/exec cvx
											DataSource 2 get/exec cvx
											DataSource 3 get/exec cvx
											/AGMCORE_get_ink_data cvx
											]cvx
											}{
											DataSource aload pop AGMCORE_get_ink_data
											}ifelse def
									}{
										/DataSource 
										Width BitsPerComponent mul 7 add 8 idiv Height mul 4 mul 
										/DataSource load
										filter_cmyk 0()/SubFileDecode filter def
									}ifelse
									/Decode[Decode 0 get Decode 1 get]def
									/MultipleDataSources false def
									/NComponents 1 def
									/Operator/image def
									invert_image_samples
						 			1 AGMCORE_&setgray
									currentdict imageormask_sys
								}{
									currentoverprint not Operator/imagemask eq and{
 			 							1 AGMCORE_&setgray
 			 							currentdict imageormask_sys
 			 						}{
 			 							currentdict ignoreimagedata
 			 						}ifelse
								}ifelse
							}{	
								MultipleDataSources NComponents AGMIMG_&colorimage						
							}ifelse
						}{
							true NComponents colorimage
						}ifelse
					}{
						Operator/image eq{
							AGMCORE_host_sep{
								/DoImage true def
								currentdict/HostSepColorImage known{HostSepColorImage not}{false}ifelse
								{
									AGMCORE_black_plate not Operator/imagemask ne and{
										/DoImage false def
										currentdict ignoreimagedata
					 				}if
								}if
						 		1 AGMCORE_&setgray
								DoImage
									{currentdict imageormask_sys}if
							}{
								use_mask{
									process_mask image
								}{
									image
								}ifelse
							}ifelse
						}{
							Operator/knockout eq{
								pop pop pop pop pop
								currentcolorspace overprint_plate not{
									knockout_unitsq
								}if
							}if
						}ifelse
					}ifelse
				}ifelse
			}ifelse
			cleartomark restore
		}ifelse
		currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
}def
/sep_imageormask
{
 	/sep_colorspace_dict AGMCORE_gget begin
	CSA map_csa
	begin
	AGMIMG_init_common
	SkipImageProc{
		currentdict consumeimagedata
	}{
		save mark 
		AGMCORE_avoid_L2_sep_space{
			/Decode[Decode 0 get 255 mul Decode 1 get 255 mul]def
		}if
 		AGMIMG_ccimage_exists 
		MappedCSA 0 get/DeviceCMYK eq and
		currentdict/Components known and 
		Name()ne and 
		Name(All)ne and 
		Operator/image eq and
		AGMCORE_producing_seps not and
		level2 not and
		{
			Width Height BitsPerComponent ImageMatrix 
			[
			/DataSource load/exec cvx
			{
				0 1 2 index length 1 sub{
					1 index exch
					2 copy get 255 xor put
				}for
			}/exec cvx
			]cvx bind
			MappedCSA 0 get/DeviceCMYK eq{
				Components aload pop
			}{
				0 0 0 Components aload pop 1 exch sub
			}ifelse
			Name findcmykcustomcolor
			customcolorimage
		}{
			AGMCORE_producing_seps not{
				level2{
 					//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne AGMCORE_avoid_L2_sep_space not and currentcolorspace 0 get/Separation ne and{
						[/Separation Name MappedCSA sep_proc_name exch dup 0 get 15 string cvs(/Device)anchorsearch{pop pop 0 get}{pop}ifelse exch load]setcolorspace_opt
						/sep_tint AGMCORE_gget setcolor
					}if
					currentdict imageormask
				}{
					currentdict
					Operator/imagemask eq{
						imageormask
					}{
						sep_imageormask_lev1
					}ifelse
				}ifelse
 			}{
				AGMCORE_host_sep{
					Operator/knockout eq{
						currentdict/ImageMatrix get concat
						knockout_unitsq
					}{
						currentgray 1 ne{
 							AGMCORE_is_cmyk_sep Name(All)ne and{
 								level2{
 									Name AGMCORE_IsSeparationAProcessColor 
 									{
 										Operator/imagemask eq{
 											//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{
 												/sep_tint AGMCORE_gget 1 exch sub AGMCORE_&setcolor
 											}if
 										}{
											invert_image_samples
 										}ifelse
	 								}{
	 									//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{
	 										[/Separation Name[/DeviceGray]
	 										{
	 											sep_colorspace_proc AGMCORE_get_ink_data
												1 exch sub
	 										}bind
											]AGMCORE_&setcolorspace
											/sep_tint AGMCORE_gget AGMCORE_&setcolor
										}if
 									}ifelse
 									currentdict imageormask_sys
	 							}{
	 								currentdict
									Operator/imagemask eq{
										imageormask_sys
									}{
										sep_image_lev1_sep
									}ifelse
	 							}ifelse
 							}{
 								Operator/imagemask ne{
									invert_image_samples
 								}if
		 						currentdict imageormask_sys
 							}ifelse
 						}{
 							currentoverprint not Name(All)eq or Operator/imagemask eq and{
								currentdict imageormask_sys 
								}{
								currentoverprint not
									{
 									gsave 
 									knockout_unitsq
 									grestore
									}if
								currentdict consumeimagedata 
		 					}ifelse
 						}ifelse
		 			}ifelse
 				}{
					//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{
						currentcolorspace 0 get/Separation ne{
							[/Separation Name MappedCSA sep_proc_name exch 0 get exch load]setcolorspace_opt
							/sep_tint AGMCORE_gget setcolor
						}if
					}if
					currentoverprint 
					MappedCSA 0 get/DeviceCMYK eq and 
					Name AGMCORE_IsSeparationAProcessColor not and
					//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{Name inRip_spot_has_ink not and}{false}ifelse 
					Name(All)ne and{
						imageormask_l2_overprint
					}{
						currentdict imageormask
 					}ifelse
				}ifelse
			}ifelse
		}ifelse
		cleartomark restore
	}ifelse
	currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
	end
}def
/colorSpaceElemCnt
{
	mark currentcolor counttomark dup 2 add 1 roll cleartomark
}bdf
/devn_sep_datasource
{
	1 dict begin
	/dataSource xdf
	[
		0 1 dataSource length 1 sub{
			dup currentdict/dataSource get/exch cvx/get cvx/exec cvx
			/exch cvx names_index/ne cvx[/pop cvx]cvx/if cvx
		}for
	]cvx bind
	end
}bdf		
/devn_alt_datasource
{
	11 dict begin
	/convProc xdf
	/origcolorSpaceElemCnt xdf
	/origMultipleDataSources xdf
	/origBitsPerComponent xdf
	/origDecode xdf
	/origDataSource xdf
	/dsCnt origMultipleDataSources{origDataSource length}{1}ifelse def
	/DataSource origMultipleDataSources
		{
			[
			BitsPerComponent 8 idiv origDecode length 2 idiv mul string
			0 1 origDecode length 2 idiv 1 sub
				{
				dup 7 mul 1 add index exch dup BitsPerComponent 8 idiv mul exch
				origDataSource exch get 0()/SubFileDecode filter
				BitsPerComponent 8 idiv string/readstring cvx/pop cvx/putinterval cvx
				}for 
			]bind cvx
		}{origDataSource}ifelse 0()/SubFileDecode filter def		
	[
		origcolorSpaceElemCnt string
		0 2 origDecode length 2 sub
			{
			dup origDecode exch get dup 3 -1 roll 1 add origDecode exch get exch sub 2 BitsPerComponent exp 1 sub div
			1 BitsPerComponent 8 idiv{DataSource/read cvx/not cvx{0}/if cvx/mul cvx}repeat/mul cvx/add cvx
			}for
		/convProc load/exec cvx
		origcolorSpaceElemCnt 1 sub -1 0
			{
			/dup cvx 2/add cvx/index cvx
			3 1/roll cvx/exch cvx 255/mul cvx/cvi cvx/put cvx
			}for
	]bind cvx 0()/SubFileDecode filter
	end
}bdf
/devn_imageormask
{
 	/devicen_colorspace_dict AGMCORE_gget begin
	CSA map_csa
	2 dict begin
	dup
	/srcDataStrs[3 -1 roll begin
		AGMIMG_init_common
		currentdict/MultipleDataSources known{MultipleDataSources{DataSource length}{1}ifelse}{1}ifelse
		{
			Width Decode length 2 div mul cvi
			{
				dup 65535 gt{1 add 2 div cvi}{exit}ifelse
			}loop
			string
		}repeat
		end]def
	/dstDataStr srcDataStrs 0 get length string def
	begin
	AGMIMG_init_common
	SkipImageProc{
		currentdict consumeimagedata
	}{
		save mark 
		AGMCORE_producing_seps not{
			level3 not{
				Operator/imagemask ne{
					/DataSource[[
						DataSource Decode BitsPerComponent currentdict/MultipleDataSources known{MultipleDataSources}{false}ifelse
						colorSpaceElemCnt/devicen_colorspace_dict AGMCORE_gget/TintTransform get 
						devn_alt_datasource 1/string cvx/readstring cvx/pop cvx]cvx colorSpaceElemCnt 1 sub{dup}repeat]def				
					/MultipleDataSources true def
					/Decode colorSpaceElemCnt[exch{0 1}repeat]def
				}if
			}if
			currentdict imageormask
 		}{
			AGMCORE_host_sep{
				Names convert_to_process{
					CSA get_csa_by_name 0 get/DeviceCMYK eq{
						/DataSource
							Width BitsPerComponent mul 7 add 8 idiv Height mul 4 mul 
							DataSource Decode BitsPerComponent currentdict/MultipleDataSources known{MultipleDataSources}{false}ifelse
							4/devicen_colorspace_dict AGMCORE_gget/TintTransform get 
							devn_alt_datasource
						filter_cmyk 0()/SubFileDecode filter def
						/MultipleDataSources false def
						/Decode[1 0]def
						/DeviceGray setcolorspace
			 			currentdict imageormask_sys
 					}{
						AGMCORE_report_unsupported_color_space
						AGMCORE_black_plate{
							/DataSource
								DataSource Decode BitsPerComponent currentdict/MultipleDataSources known{MultipleDataSources}{false}ifelse
								CSA get_csa_by_name 0 get/DeviceRGB eq{3}{1}ifelse/devicen_colorspace_dict AGMCORE_gget/TintTransform get
								devn_alt_datasource
							/MultipleDataSources false def
							/Decode colorSpaceElemCnt[exch{0 1}repeat]def
				 			currentdict imageormask_sys
				 		}{
	 						gsave 
	 						knockout_unitsq
	 						grestore
							currentdict consumeimagedata 
						}ifelse
 					}ifelse
				}
				{	
					/devicen_colorspace_dict AGMCORE_gget/names_index known{
	 					Operator/imagemask ne{
	 						MultipleDataSources{
		 						/DataSource[DataSource devn_sep_datasource/exec cvx]cvx def
								/MultipleDataSources false def
	 						}{
								/DataSource/DataSource load dstDataStr srcDataStrs 0 get filter_devn def
	 						}ifelse
							invert_image_samples
	 					}if
			 			currentdict imageormask_sys
	 				}{
	 					currentoverprint not Operator/imagemask eq and{
							currentdict imageormask_sys 
							}{
							currentoverprint not
								{
	 							gsave 
	 							knockout_unitsq
	 							grestore
								}if
							currentdict consumeimagedata 
			 			}ifelse
	 				}ifelse
	 			}ifelse
 			}{
				currentdict imageormask
			}ifelse
		}ifelse
		cleartomark restore
	}ifelse
	currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
	end
	end
}def
/imageormask_l2_overprint
{
	currentdict
	currentcmykcolor add add add 0 eq{
		currentdict consumeimagedata
	}{
		level3{			
			currentcmykcolor 
			/AGMIMG_k xdf 
			/AGMIMG_y xdf 
			/AGMIMG_m xdf 
			/AGMIMG_c xdf
			Operator/imagemask eq{
				[/DeviceN[
				AGMIMG_c 0 ne{/Cyan}if
				AGMIMG_m 0 ne{/Magenta}if
				AGMIMG_y 0 ne{/Yellow}if
				AGMIMG_k 0 ne{/Black}if
				]/DeviceCMYK{}]setcolorspace
				AGMIMG_c 0 ne{AGMIMG_c}if
				AGMIMG_m 0 ne{AGMIMG_m}if
				AGMIMG_y 0 ne{AGMIMG_y}if
				AGMIMG_k 0 ne{AGMIMG_k}if
				setcolor			
			}{	
				/Decode[Decode 0 get 255 mul Decode 1 get 255 mul]def
				[/Indexed 				
					[
						/DeviceN[
							AGMIMG_c 0 ne{/Cyan}if
							AGMIMG_m 0 ne{/Magenta}if
							AGMIMG_y 0 ne{/Yellow}if
							AGMIMG_k 0 ne{/Black}if
						]
						/DeviceCMYK{
							AGMIMG_k 0 eq{0}if
							AGMIMG_y 0 eq{0 exch}if
							AGMIMG_m 0 eq{0 3 1 roll}if
							AGMIMG_c 0 eq{0 4 1 roll}if						
						}
					]
					255
					{
						255 div 
						mark exch
						dup	dup dup
						AGMIMG_k 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec 4 1 roll pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						AGMIMG_y 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec 4 2 roll pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						AGMIMG_m 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec 4 3 roll pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						AGMIMG_c 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						counttomark 1 add -1 roll pop
					}
				]setcolorspace
			}ifelse
			imageormask_sys
		}{
	write_image_file{
		currentcmykcolor
		0 ne{
			[/Separation/Black/DeviceGray{}]setcolorspace
			gsave
			/Black
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{4 1 roll pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
		0 ne{
			[/Separation/Yellow/DeviceGray{}]setcolorspace
			gsave
			/Yellow
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{4 2 roll pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
		0 ne{
			[/Separation/Magenta/DeviceGray{}]setcolorspace
			gsave
			/Magenta
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{4 3 roll pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
		0 ne{
			[/Separation/Cyan/DeviceGray{}]setcolorspace
			gsave
			/Cyan 
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
				close_image_file
			}{
				imageormask
			}ifelse
		}ifelse
	}ifelse
}def
/indexed_imageormask
{
	begin
		AGMIMG_init_common
		save mark 
 		currentdict
 		AGMCORE_host_sep{
			Operator/knockout eq{
				/indexed_colorspace_dict AGMCORE_gget dup/CSA known{
					/CSA get get_csa_by_name
				}{
					/Names get
				}ifelse
				overprint_plate not{
					knockout_unitsq
				}if
			}{
				Indexed_DeviceN{
					/devicen_colorspace_dict AGMCORE_gget dup/names_index known exch/Names get convert_to_process or{
			 			indexed_image_lev2_sep
					}{
						currentoverprint not{
							knockout_unitsq
			 			}if
			 			currentdict consumeimagedata
					}ifelse
				}{
		 			AGMCORE_is_cmyk_sep{
						Operator/imagemask eq{
							imageormask_sys
						}{
							level2{
								indexed_image_lev2_sep
							}{
								indexed_image_lev1_sep
							}ifelse
						}ifelse
					}{
						currentoverprint not{
							knockout_unitsq
			 			}if
			 			currentdict consumeimagedata
					}ifelse
				}ifelse
			}ifelse
 		}{
			level2{
				Indexed_DeviceN{
					/indexed_colorspace_dict AGMCORE_gget begin
				}{
					/indexed_colorspace_dict AGMCORE_gget dup null ne
					{
						begin
						currentdict/CSDBase known{CSDBase/CSD get_res/MappedCSA get}{CSA}ifelse
						get_csa_by_name 0 get/DeviceCMYK eq ps_level 3 ge and ps_version 3015.007 lt and
						AGMCORE_in_rip_sep and{
							[/Indexed[/DeviceN[/Cyan/Magenta/Yellow/Black]/DeviceCMYK{}]HiVal Lookup]
							setcolorspace
						}if
						end
					}
					{pop}ifelse
				}ifelse
				imageormask
				Indexed_DeviceN{
					end
				}if
			}{
				Operator/imagemask eq{
					imageormask
				}{
					indexed_imageormask_lev1
				}ifelse
			}ifelse
 		}ifelse
		cleartomark restore
	currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
}def
/indexed_image_lev2_sep
{
	/indexed_colorspace_dict AGMCORE_gget begin
	begin
		Indexed_DeviceN not{
			currentcolorspace 
			dup 1/DeviceGray put
			dup 3
			currentcolorspace 2 get 1 add string
			0 1 2 3 AGMCORE_get_ink_data 4 currentcolorspace 3 get length 1 sub
			{
			dup 4 idiv exch currentcolorspace 3 get exch get 255 exch sub 2 index 3 1 roll put
			}for 
			put	setcolorspace
		}if
		currentdict 
		Operator/imagemask eq{
			AGMIMG_&imagemask
		}{
			use_mask{
				process_mask AGMIMG_&image
			}{
				AGMIMG_&image
			}ifelse
		}ifelse
	end end
}def
 /OPIimage
 {
 	dup type/dicttype ne{
 		10 dict begin
 			/DataSource xdf
 			/ImageMatrix xdf
 			/BitsPerComponent xdf
 			/Height xdf
 			/Width xdf
 			/ImageType 1 def
 			/Decode[0 1 def]
 			currentdict
 		end
 	}if
 	dup begin
 		/NComponents 1 cdndf
 		/MultipleDataSources false cdndf
 		/SkipImageProc{false}cdndf
 		/Decode[
 				0 
 				currentcolorspace 0 get/Indexed eq{
 					2 BitsPerComponent exp 1 sub
 				}{
 					1
 				}ifelse
 		]cdndf
 		/Operator/image cdndf
 	end
 	/sep_colorspace_dict AGMCORE_gget null eq{
 		imageormask
 	}{
 		gsave
 		dup begin invert_image_samples end
 		sep_imageormask
 		grestore
 	}ifelse
 }def
/cachemask_level2
{
	3 dict begin
	/LZWEncode filter/WriteFilter xdf
	/readBuffer 256 string def
	/ReadFilter
		currentfile
		0(%EndMask)/SubFileDecode filter
		/ASCII85Decode filter
		/RunLengthDecode filter
	def
	{
		ReadFilter readBuffer readstring exch
		WriteFilter exch writestring
		not{exit}if
	}loop
	WriteFilter closefile
	end
}def
/spot_alias
{
	/mapto_sep_imageormask 
	{
		dup type/dicttype ne{
			12 dict begin
				/ImageType 1 def
				/DataSource xdf
				/ImageMatrix xdf
				/BitsPerComponent xdf
				/Height xdf
				/Width xdf
				/MultipleDataSources false def
		}{
			begin
		}ifelse
				/Decode[/customcolor_tint AGMCORE_gget 0]def
				/Operator/image def
				/SkipImageProc{false}def
				currentdict 
			end
		sep_imageormask
	}bdf
	/customcolorimage
	{
		Adobe_AGM_Image/AGMIMG_colorAry xddf
		/customcolor_tint AGMCORE_gget
		<<
			/Name AGMIMG_colorAry 4 get
			/CSA[/DeviceCMYK]
			/TintMethod/Subtractive
			/TintProc null
			/MappedCSA null
			/NComponents 4 
			/Components[AGMIMG_colorAry aload pop pop]
		>>
		setsepcolorspace
		mapto_sep_imageormask
	}ndf
	Adobe_AGM_Image/AGMIMG_&customcolorimage/customcolorimage load put
	/customcolorimage
	{
		Adobe_AGM_Image/AGMIMG_override false put
		current_spot_alias{dup 4 get map_alias}{false}ifelse
		{
			false set_spot_alias
			/customcolor_tint AGMCORE_gget exch setsepcolorspace
			pop
			mapto_sep_imageormask
			true set_spot_alias
		}{
			//Adobe_AGM_Image/AGMIMG_&customcolorimage get exec
		}ifelse			
	}bdf
}def
/snap_to_device
{
	6 dict begin
	matrix currentmatrix
	dup 0 get 0 eq 1 index 3 get 0 eq and
	1 index 1 get 0 eq 2 index 2 get 0 eq and or exch pop
	{
		1 1 dtransform 0 gt exch 0 gt/AGMIMG_xSign? exch def/AGMIMG_ySign? exch def
		0 0 transform
		AGMIMG_ySign?{floor 0.1 sub}{ceiling 0.1 add}ifelse exch
		AGMIMG_xSign?{floor 0.1 sub}{ceiling 0.1 add}ifelse exch
		itransform/AGMIMG_llY exch def/AGMIMG_llX exch def
		1 1 transform
		AGMIMG_ySign?{ceiling 0.1 add}{floor 0.1 sub}ifelse exch
		AGMIMG_xSign?{ceiling 0.1 add}{floor 0.1 sub}ifelse exch
		itransform/AGMIMG_urY exch def/AGMIMG_urX exch def			
		[AGMIMG_urX AGMIMG_llX sub 0 0 AGMIMG_urY AGMIMG_llY sub AGMIMG_llX AGMIMG_llY]concat
	}{
	}ifelse
	end
}def
level2 not{
	/colorbuf
	{
		0 1 2 index length 1 sub{
			dup 2 index exch get 
			255 exch sub 
			2 index 
			3 1 roll 
			put
		}for
	}def
	/tint_image_to_color
	{
		begin
			Width Height BitsPerComponent ImageMatrix 
			/DataSource load
		end
		Adobe_AGM_Image begin
			/AGMIMG_mbuf 0 string def
			/AGMIMG_ybuf 0 string def
			/AGMIMG_kbuf 0 string def
			{
				colorbuf dup length AGMIMG_mbuf length ne
					{
					dup length dup dup
					/AGMIMG_mbuf exch string def
					/AGMIMG_ybuf exch string def
					/AGMIMG_kbuf exch string def
					}if
				dup AGMIMG_mbuf copy AGMIMG_ybuf copy AGMIMG_kbuf copy pop
			}
			addprocs
			{AGMIMG_mbuf}{AGMIMG_ybuf}{AGMIMG_kbuf}true 4 colorimage	
		end
	}def			
	/sep_imageormask_lev1
	{
		begin
			MappedCSA 0 get dup/DeviceRGB eq exch/DeviceCMYK eq or has_color not and{
				{
					255 mul round cvi GrayLookup exch get
				}currenttransfer addprocs settransfer
				currentdict imageormask
			}{
				/sep_colorspace_dict AGMCORE_gget/Components known{
					MappedCSA 0 get/DeviceCMYK eq{
						Components aload pop
					}{
						0 0 0 Components aload pop 1 exch sub
					}ifelse
					Adobe_AGM_Image/AGMIMG_k xddf 
					Adobe_AGM_Image/AGMIMG_y xddf 
					Adobe_AGM_Image/AGMIMG_m xddf 
					Adobe_AGM_Image/AGMIMG_c xddf 
					AGMIMG_y 0.0 eq AGMIMG_m 0.0 eq and AGMIMG_c 0.0 eq and{
						{AGMIMG_k mul 1 exch sub}currenttransfer addprocs settransfer
						currentdict imageormask
					}{
						currentcolortransfer
						{AGMIMG_k mul 1 exch sub}exch addprocs 4 1 roll
						{AGMIMG_y mul 1 exch sub}exch addprocs 4 1 roll
						{AGMIMG_m mul 1 exch sub}exch addprocs 4 1 roll
						{AGMIMG_c mul 1 exch sub}exch addprocs 4 1 roll
						setcolortransfer
						currentdict tint_image_to_color
					}ifelse
				}{
					MappedCSA 0 get/DeviceGray eq{
						{255 mul round cvi ColorLookup exch get 0 get}currenttransfer addprocs settransfer
						currentdict imageormask
					}{
						MappedCSA 0 get/DeviceCMYK eq{
							currentcolortransfer
							{255 mul round cvi ColorLookup exch get 3 get 1 exch sub}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 2 get 1 exch sub}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 1 get 1 exch sub}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 0 get 1 exch sub}exch addprocs 4 1 roll
							setcolortransfer 
							currentdict tint_image_to_color
						}{
							currentcolortransfer
							{pop 1}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 2 get}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 1 get}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 0 get}exch addprocs 4 1 roll
							setcolortransfer 
							currentdict tint_image_to_color
						}ifelse
					}ifelse
				}ifelse
			}ifelse
		end
	}def
	/sep_image_lev1_sep
	{
		begin
			/sep_colorspace_dict AGMCORE_gget/Components known{
				Components aload pop
				Adobe_AGM_Image/AGMIMG_k xddf 
				Adobe_AGM_Image/AGMIMG_y xddf 
				Adobe_AGM_Image/AGMIMG_m xddf 
				Adobe_AGM_Image/AGMIMG_c xddf 
				{AGMIMG_c mul 1 exch sub}
				{AGMIMG_m mul 1 exch sub}
				{AGMIMG_y mul 1 exch sub}
				{AGMIMG_k mul 1 exch sub}
			}{
				{255 mul round cvi ColorLookup exch get 0 get 1 exch sub}
				{255 mul round cvi ColorLookup exch get 1 get 1 exch sub}
				{255 mul round cvi ColorLookup exch get 2 get 1 exch sub}
				{255 mul round cvi ColorLookup exch get 3 get 1 exch sub}
			}ifelse
			AGMCORE_get_ink_data currenttransfer addprocs settransfer
			currentdict imageormask_sys
		end
	}def
	/indexed_imageormask_lev1
	{
		/indexed_colorspace_dict AGMCORE_gget begin
		begin
			currentdict
			MappedCSA 0 get dup/DeviceRGB eq exch/DeviceCMYK eq or has_color not and{
				{HiVal mul round cvi GrayLookup exch get HiVal div}currenttransfer addprocs settransfer
				imageormask
			}{
				MappedCSA 0 get/DeviceGray eq{
					{HiVal mul round cvi Lookup exch get HiVal div}currenttransfer addprocs settransfer
					imageormask
				}{
					MappedCSA 0 get/DeviceCMYK eq{
						currentcolortransfer
						{4 mul HiVal mul round cvi 3 add Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						{4 mul HiVal mul round cvi 2 add Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						{4 mul HiVal mul round cvi 1 add Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						{4 mul HiVal mul round cvi		 Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						setcolortransfer 
						tint_image_to_color
					}{
						currentcolortransfer
						{pop 1}exch addprocs 4 1 roll
						{3 mul HiVal mul round cvi 2 add Lookup exch get HiVal div}exch addprocs 4 1 roll
						{3 mul HiVal mul round cvi 1 add Lookup exch get HiVal div}exch addprocs 4 1 roll
						{3 mul HiVal mul round cvi 		Lookup exch get HiVal div}exch addprocs 4 1 roll
						setcolortransfer 
						tint_image_to_color
					}ifelse
				}ifelse
			}ifelse
		end end
	}def
	/indexed_image_lev1_sep
	{
		/indexed_colorspace_dict AGMCORE_gget begin
		begin
			{4 mul HiVal mul round cvi		 Lookup exch get HiVal div 1 exch sub}
			{4 mul HiVal mul round cvi 1 add Lookup exch get HiVal div 1 exch sub}
			{4 mul HiVal mul round cvi 2 add Lookup exch get HiVal div 1 exch sub}
			{4 mul HiVal mul round cvi 3 add Lookup exch get HiVal div 1 exch sub}
			AGMCORE_get_ink_data currenttransfer addprocs settransfer
			currentdict imageormask_sys
		end end
	}def
}if
end
systemdict/setpacking known
{setpacking}if
%%EndResource
currentdict Adobe_AGM_Utils eq {end} if
%%EndProlog
%%BeginSetup
Adobe_AGM_Utils begin
2 2010 Adobe_AGM_Core/ds gx
Adobe_CoolType_Core/ds get execAdobe_AGM_Image/ds gx
currentdict Adobe_AGM_Utils eq {end} if
%%EndSetup
%%Page: (Page 1) 1
%%EndPageComments
%%BeginPageSetup
%ADOBeginClientInjection: PageSetup Start "AI11EPS"
%AI12_RMC_Transparency: Balance=75 RasterRes=300 GradRes=150 Text=0 Stroke=1 Clip=1 OP=0
%ADOEndClientInjection: PageSetup Start "AI11EPS"
Adobe_AGM_Utils begin
Adobe_AGM_Core/ps gx
Adobe_AGM_Utils/capture_cpd gx
Adobe_CoolType_Core/ps get execAdobe_AGM_Image/ps gx
%ADOBeginClientInjection: PageSetup End "AI11EPS"
/currentdistillerparams where{pop currentdistillerparams /CoreDistVersion get 5000 lt} {true} ifelse{ userdict /AI11_PDFMark5 /cleartomark load putuserdict /AI11_ReadMetadata_PDFMark5 {flushfile cleartomark } bind put}{ userdict /AI11_PDFMark5 /pdfmark load putuserdict /AI11_ReadMetadata_PDFMark5 {/PUT pdfmark} bind put } ifelse[/NamespacePush AI11_PDFMark5[/_objdef {ai_metadata_stream_123} /type /stream /OBJ AI11_PDFMark5[{ai_metadata_stream_123}currentfile 0 (%  &&end XMP packet marker&&)/SubFileDecode filter AI11_ReadMetadata_PDFMark5<?xpacket begin="﻿" id="W5M0MpCehiHzreSzNTczkc9d"?>
<x:xmpmeta xmlns:x="adobe:ns:meta/" x:xmptk="Adobe XMP Core 4.1-c036 46.277092, Fri Feb 23 2007 14:16:18        ">
   <rdf:RDF xmlns:rdf="http://www.w3.org/1999/02/22-rdf-syntax-ns#">
      <rdf:Description rdf:about=""
            xmlns:dc="http://purl.org/dc/elements/1.1/">
         <dc:format>application/postscript</dc:format>
         <dc:title>
            <rdf:Alt>
               <rdf:li xml:lang="x-default">Basic CMYK</rdf:li>
            </rdf:Alt>
         </dc:title>
      </rdf:Description>
      <rdf:Description rdf:about=""
            xmlns:xap="http://ns.adobe.com/xap/1.0/"
            xmlns:xapGImg="http://ns.adobe.com/xap/1.0/g/img/">
         <xap:CreatorTool>Adobe Illustrator CS3</xap:CreatorTool>
         <xap:CreateDate>2012-01-26T14:23:23-05:00</xap:CreateDate>
         <xap:ModifyDate>2012-01-26T14:23:23-05:00</xap:ModifyDate>
         <xap:MetadataDate>2012-01-26T14:23:23-05:00</xap:MetadataDate>
         <xap:Thumbnails>
            <rdf:Alt>
               <rdf:li rdf:parseType="Resource">
                  <xapGImg:width>256</xapGImg:width>
                  <xapGImg:height>80</xapGImg:height>
                  <xapGImg:format>JPEG</xapGImg:format>
                  <xapGImg:image>/9j/4AAQSkZJRgABAgEASABIAAD/7QAsUGhvdG9zaG9wIDMuMAA4QklNA+0AAAAAABAASAAAAAEA&#xA;AQBIAAAAAQAB/+4ADkFkb2JlAGTAAAAAAf/bAIQABgQEBAUEBgUFBgkGBQYJCwgGBggLDAoKCwoK&#xA;DBAMDAwMDAwQDA4PEA8ODBMTFBQTExwbGxscHx8fHx8fHx8fHwEHBwcNDA0YEBAYGhURFRofHx8f&#xA;Hx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8f/8AAEQgAUAEAAwER&#xA;AAIRAQMRAf/EAaIAAAAHAQEBAQEAAAAAAAAAAAQFAwIGAQAHCAkKCwEAAgIDAQEBAQEAAAAAAAAA&#xA;AQACAwQFBgcICQoLEAACAQMDAgQCBgcDBAIGAnMBAgMRBAAFIRIxQVEGE2EicYEUMpGhBxWxQiPB&#xA;UtHhMxZi8CRygvElQzRTkqKyY3PCNUQnk6OzNhdUZHTD0uIIJoMJChgZhJRFRqS0VtNVKBry4/PE&#xA;1OT0ZXWFlaW1xdXl9WZ2hpamtsbW5vY3R1dnd4eXp7fH1+f3OEhYaHiImKi4yNjo+Ck5SVlpeYmZ&#xA;qbnJ2en5KjpKWmp6ipqqusra6voRAAICAQIDBQUEBQYECAMDbQEAAhEDBCESMUEFURNhIgZxgZEy&#xA;obHwFMHR4SNCFVJicvEzJDRDghaSUyWiY7LCB3PSNeJEgxdUkwgJChgZJjZFGidkdFU38qOzwygp&#xA;0+PzhJSktMTU5PRldYWVpbXF1eX1RlZmdoaWprbG1ub2R1dnd4eXp7fH1+f3OEhYaHiImKi4yNjo&#xA;+DlJWWl5iZmpucnZ6fkqOkpaanqKmqq6ytrq+v/aAAwDAQACEQMRAD8A9U4qsnngt4JLieRYoIVa&#xA;SWVyFVUUVZmJ2AAGAmkxiSaHN5beebvzD87ySQeQrdNL0AFoz5kvgVM1KhjbIQx41BAbiT7qcxDk&#xA;nk+jYd7u4aXT6YXnPFP+YOnv/HzSa5/5x01fVT9Y1zzhPeXbHk5eFpQD7NJNX8BkfyhO5O7kx7fj&#xA;DaGMAe/9iVXf/OM3mC0f1NE8xRM9NjNHJbEHw5RNN99MjLRnoQ3R9ooS+uH6fvpbF5F/5yM0hwtj&#xA;rD3SRmiUvRLHTpst1Tb5jB4WUcr+aTrez8n1Rr/N/UyDTIP+cmpWEVzc2EAOxnuRbGnvS3R/+I5M&#xA;DOfwHEyS7NG4Ej7r/SyW3/K/UNWQP561+610mhbToGNnYinjHDwLkfzGmWjTmX1m3El2lHH/AHEB&#xA;DzO8vtYd+XOp2ei/nVr3lPRS6+XZFcQ2ZcukVzbohkK8ixHx+ov3V6ZThIjkMRyc/XwOTRwyz/vO&#xA;/wAj+A9xzPeadirsVdirsVdirsVdirsVdirsVdirsVdirsVdirsVdirsVdirsVdirsVdirAPzOMm&#xA;sat5c8kK5S21y4kuNVKsQTZWKiV4ttx6rELX2zGz+oiHe7Ps/wDdxnm6wFD3n9TO7a2t7a3jt7eN&#xA;YbeFQkUSAKqqooFUDYADMgCtg62UiTZ5qmFDsVeYeevzJ1C48xQeRPJLxy+Y7pil9qDDnFZIBVz3&#xA;BkVdz149KFthi5cxJ4Y83caPQxEDmzfQOQ/nfs/HJm3lXytZeXdPNtDLLd3UzerfahcuZJ7iYjd5&#xA;GNfoHQZdjxiIdfqdTLLKzsByA5AMe/Nj8z9O8k6I/F1l167Rhptp1IJ29aQdo0P/AAR2HciGfNwD&#xA;zcns7QS1E/6A5n9Dzr/nG3yfq0mo33nXU0cRXEbw2MkteUzyuGmmFd6Djxr3qfDMfS49+J2vburj&#xA;wjDH4+XcHrcnml72G4+o6fdS6fWa3GqxmNY/UjDKzoOYl4BlpzA6/fmUcl8ht3vNUlXkfzlLLpPl&#xA;+01C2u+WoQ+lBqlwyMs08SFnBq7S7hTRmX4u2QxZdgD1UhMh5/0s6hBAIJTZ3V0bCDUAYjG1xyKA&#xA;cA5l4FlKh+NK+2+S8YWtLk85XH6cstHn0e4hnvg0kZMkLcIU6yyKjlkXt8Xfbrh8U2BS0yXLUOxV&#xA;2KuxV2KuxV2KuxV2KuxV2KuxV2KuxV2KuxV2KuxV53r/AJjvPMvnVfI+iTvDZ2ai48zajAxV1jFO&#xA;NrE6kFWckByDUCvg2Ys5mcuAcurtsGCOHD48xZO0AfvP6HomZTqWE+ZNNvf+Vo+T9UihkltBDqNp&#xA;cyqpKRM0IkjLsOnPgwFe+Y84/vIl2GDIPy+SPW4n7WbZkOvdirzr87PzKHkvy1wsnH6d1LlFYL1M&#xA;aj+8nI/yK0X/ACiOwOY+oy8Iocy7PsvRePks/RHn+pI/+cc/I0mmaBL5p1JWOq678UTSVLra8uQJ&#xA;J3rM3xnxHHIaXHQ4nI7a1fHPw4/TD7/2J1+a/mXzJpN9pFrBfDQvLl+zRal5iWEXDwSNtHHRjxjD&#xA;/wC/CNvow6icgQOQ72js/BjmJEjjmOUbq/x3LNF/IvySl6us6tPc+Z7+akpu9Rm9aNyaFWCLQOKd&#xA;A5YYYaaPM7py9rZq4IgYx3B6RFFHFGkUSLHFGoWONQAqqBQAAbAAZkgU6sm9yxLSNC81aTYS6Hb/&#xA;AFKbSlaY2t3I8omWKVmf0niCcS3J6cw+w34nplEYSAralWWflHWIdP8AKVs7W5fQZOV4RI9GURNE&#xA;PS/d7n4q/FTEYzUfJbUvL/kq/wBKu/q8llpN1YRXLTW+pSxlr0Rs5kCMvAAupNA/qbbbHpghiIPI&#xA;V9q2iNA0XzbZ6pd6jfwafNe6hMpub1bmZjFaow4wQwm3TZVr/uzdviNemShGQNmt1ZflyHYq7FXY&#xA;q7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FWI/mf5+s/JXlefUXZW1CYGHTbYneSYjY0/lT7Tfd3GU&#xA;5svAPNzdBoznyCP8PX3JF+Qfly4sPJ7a5qBaTVvMkpv7qZ682jJPpcvHlyaT/Z5DSwqN97lds5xP&#xA;LwR+mAofp/V8HpeZLqHYq7FVskkcUbyyuI44wWd2ICqoFSST0AxJSBb5Jubi7/OD850iTmdH9Xig&#xA;3HpabbGrN34tJ1/13zWG8k/xyeuiBo9N/S/3x/HyfWsMMUEMcMKCOGJQkcaiiqqigAA6ADNkBTyJ&#xA;JJsofV9J0/V9MudM1GFbiyu4zFPC4qCp/UR1B7HfBKIIosseSUJCUdiHhf5OecNQ8q+e9Q/K/WLh&#xA;p7KK4li0eeQ7oyVdU36JLH8QHZunXMPBMxlwl33aOnjlxDPEb1v+PJ7/AJnPPMS87fml5Q8nL6ep&#xA;3JkvmHJNPtwJJyD0LCoVAfFiPbKcmeMPe5+j7Oy6j6R6e88kk0v8xvzC1m2W/wBK8iStp7/FFJdX&#xA;8VtJKpFVKJIg2PjuD45XHNOW4j9rk5NBp8Z4ZZvV5RJr7U98lfmJpXmea70/0JdN13TjS/0m6FJY&#xA;6HjyUjZ0qaV/DcVsxZhPbkXF1mglhAlYlCXKQZTLLHFG0krrHGgLO7EBQB1JJ6ZaTThAE7B535o/&#xA;PjyHojNb2lw2s34PFYLGjpy7AzH4P+B5H2zHnqojlu7bTdi58m5HBHz/AFPQLKeWezgnlha3lljR&#xA;5LdyC0bMoJQkd1O2ZETYt1U4gEgG2Eebfzt8heXGeB7z9I3yVBtLGkpDDs8lRGu/UcqjwyiepjHz&#xA;dlpeyM+beuGPefxbJPJ/mGTzF5cstaezawF8pkjt3YOwj5EI1QF+2o5D55ZinxRuqcPV4BiyGF8V&#xA;JvNNFDE8szrHFGCzyOQqqo3JJOwGTJpoAJNB51qn55eWV1AaV5ctbnzNqjEhYbBCY6jr+9I3H+Uq&#xA;sPfMaWqHKIt2+LsbJw8WQjHHzXz+Y/zje2lvB5f0rSbaJTK4v70yFEUFmLtFxUcQN60wHJl50APx&#xA;5oGn0d1xzkfKP62C6D/zkB561rWodG0/RbG9vbiUxxNEZ1QqOrmrEhAPiLHtlUdVMmgB+Pi7PN2H&#xA;gxwM5TkAPc9t1HXdM0XTku9dvbaxAUerI7hELgfEI+VGbfoOuZpmIj1F5vHhlklWMGTEdA/OXy95&#xA;j82QeX/L9tcX6MsklzqJX0oYo41J58W+MgtRdwu5GVR1AlKgHPzdk5MWI5MhEe4dWb6hqNhp1pJe&#xA;X9zHaWsQrJPM6xoo92YgZfKQAsuthjlM1EWXnU35+eVrjXbPRPL1tca1eXk6QLIg9CEc2oSGkHI8&#xA;ep+GnvmMdULqIt20exMggZ5CIAC+8vTcynTMI82/m55Z8v3w0mAS6xr8jenFpVgvqSeoeiuw2U17&#xA;bt7ZRk1EY7Dcux0vZmTKOI+iHeUl1HVvz9vrR7nTdG03SkILx2kswnu6dQCxIhqfcDKpSzHkKcrH&#xA;i0ETUpSl51Q/Wkn5N/nN5l8y+ZX0DXY4pWeKSWG4iT03RoqEq4B48aV7VrkcGeRlR3cjtXsrFix+&#xA;Jjew6tPqMGm3E2m2q3t+iE21q8ghWR+ymQhuP3ZmSJA25vP4xEyAkaD458w6h54/MD8w/wBH30Qv&#xA;dWWd7aLTbeVFhjWEkyRxSFmjCgISXqa9d81cjKcvN7XCMWnw2No1dnn8X1v5SudZm0pU1TRE0F7e&#xA;kNvYpcpdKIkUBSHjVAB2pmyxk1uKeO1AiJemXHfWqTrLGh2KuxV41/zkn+Yy6F5bHlqxl46rrSEX&#xA;HE7x2deL1/4y/YHtyzF1OShwh3PZGk458Z+mP3/sWf8AOMvkKTRvLU3mW+iKX+tAC1DCjLZrup/5&#xA;6t8XyC4NLjocSe2dVxz4Byj9/wCx7RmW6V2Kvk7WdQTVf+cn4prMfCmtWkDcd/8AeQRwyn/kk2a2&#xA;RvJ8Xq8ceHRUf5h+3d9B/mp52Hk3yZeavGA16xW309G3BnlrxJ9kUM9O9KZmZ8nDG+roez9L42UR&#xA;PLmfc8d/IX8v5PNGpXHnfzNyvYUnP1RZ/j+sXINXlk5faWM9PFv9XMXT4uI2eTve19d4URhx7bdO&#xA;g7n0hmweVfOl/r//AFlFEdNbkPWisbor0f8A0UJMD/qdPmua4y/fWO/9j1EMf+t9S7r+3Z7D+Zmp&#xA;+WNK8o3WpeY7SK/srQrJBZTAMs1wKiJOLVBqTvUHappmXnMRGzu6PQQySyiOM8JPXuDw38hvJ83m&#xA;3zfdeb9VhT9H6fMZYokQJE94x5IqIoChIRRqDp8PbMPT4+KVnkHou1tX4OIYoneQ+z9v6301JJHF&#xA;G0srBI0BZ3YgKqgVJJPQDNkS8kBewfJ8NpD+aH5uCy0u2S18uwOaJbRrCiWEDfFJRAAHmY9fFgO2&#xA;aoR457Ch+h7PxTpNNcjc/P8AnH9T6r/0PT7H9i2srSL2VI4ol/BVUZtNojyDxu85d5L5s8webfNH&#xA;5wecE8taEz2nl6NixG4HoowDXVxSleo4J0rQdd8105yyyocnrsGnx6HF4k95/p7g958leQ/L3k/S&#xA;1sdJgAkYD6zeOAZ5m8Xbw8FGwzOx4hAbPNavW5M8uKR9w6B4r+ff5pS6net5K0B2kgSQR6nLFUme&#xA;etBbpTqqt9rxbbtvh6nNxekcnoOxuzxAeNPn08h3vRfya/K+Hydoou76NW8w36g3b9fRQ7iBD7dX&#xA;I6n2Ay/T4eEWebqu1e0TnnUfojy8/Nh3/OSfmPy/psUenW9nBL5l1KECe+ZFaWCyVjQKx+y0rVG3&#xA;7IPtlWqMbqt3M7DxTl6iT4cenef2Mp/IX8vz5Z8qrqN9Hx1nWFWaYMPiig6xReINDyb3ND9nLdNj&#xA;oWeZcTtjW+Nk4R9Mfv6p5+bnmfSvLnki81C+ghupjSLTba4RZVa7YH0jxcMvwULn2GS1EgI7uN2d&#xA;hlkzAAkd9dzy3/nGfybLdXV5521BeXEvbaaW6mR/7+YfIHgPm3hmPpce/F3O57d1dRGGPvP6AyT/&#xA;AJyC/NO88r2EGgaPIYdX1OMyS3S7NBbVKVTweRgQG/Zoe9DlmpykekOF2PoY5ZGc/pj07ymP5G/l&#xA;xZ+XfLlvrd2gl1/V4VnmnbdooZQHSJSemxBfxPyGHTYgBfUsO1tdLLMwH0RU/wA4Pzl0vyzp9xo+&#xA;jzrdeZ7lTCkcJ5fVS3wl5CvSQfsp1r126ufOAKHNezezZZZCUxWMfb+xB/8AOP8A+V975asJvMGt&#xA;RmLWNSjEcNsw+OC2JD0fweRgCV7ADvUYNNiI9Rbe2O0BlIhH6Y/aWW/m752Hk/yNf6nG1L+UfVdO&#xA;Hf6xMCFb/YKC/wBGW558MXA7P03jZRE8uZeVf84s+S5Sb/zlexn94DZ6Y7/tb1uJRX3AQN/rDKNL&#xA;De3a9t6nljHvP6H0Pma86x7yJ5qPmTQI7q4RbbVrZmtdYsVqDb3cR4yoVb4gCRyWv7JGV4snEPNy&#xA;NVg8OdDeJ3B7wyHLHHYt+Yn5i6D5G0N9R1KQPcurCwsFNJbiUD7K+Cio5N2HvQGvLlEA5Wk0ks0q&#xA;HLqe58+/lx+XvmH81fNs/nPzZyGiNNzlqCv1kpstvCO0SABWbw2G9SMLHjOQ2eTvtXq4aXH4eP6v&#xA;u830H5I87ad5g/SGnrbHTNV0W4e0vdJcgtEsbFYnSgUGN0AIIFO3uczFkEtuRHR0Op00sdSvijLc&#xA;FlGWuKwH84PzS0/yL5dkZJFk1+8Rk0u0qCwY1Hrupr+7j69PiPw+NKM2XhHm5+g0RzT/AKA5/qeR&#xA;f84x+Qr/AFDXpvPOpo31W19SPT5JOs11KCssgr9pUVmFf5j7HMfTY7N9A7XtjVCMPCHM8/cyv/nK&#xA;+G8Pk/SJ46m0iv8AjPTs7wt6ZP8AwLDLNWDQcfsKQGSQ609L/LTTbXTvy+8vWtrT0hYW8lR0Z5ox&#xA;LI3+ydycuwioB1utmZZpE/zigfzV/MjTvIvlqW9kdJNUuA0el2ZPxSSkbOy9fTTqx+jqRgzZeEeb&#xA;PQ6Q5p1/D1eL/wDONnlHVtZ82XPnrU+bW9sZvRuJOtxeXAIlYeIVXbkf5iPfMbTQJlfc7rtjUxhj&#xA;GKPX7AEX/wA5Z6/dC/0PQlJW1WKS+kAJo8jMYkr2+AK1P9bDqpbgMOwsYEZT68ntf5beXLPy95H0&#xA;fTLUAhbZJZ5BT95NMokkeo61ZjT2oMycMQIh0utzHJllI97zz/nJD8y4dE8vt5X0+cfpfVk43YQ/&#xA;FDaHZuXgZvsgfy8vbKdTkocIc/sjScc/El9MeXv/AGI3/nHDyOuheS11u6jpqevBZ6sPiS1FfQUV&#xA;/nB9T3qPDJabHQvvY9sarxMnCPpj96bfn/q1xp35X6n6BZXvHhtWda7JJIC9admVSv04dVKoe9h2&#xA;PjEtQL6bsY/5xZ0yzTypquqrRr24vfq0jd1jhiR1X6WlY/dlekjsS5fb+QnJGPQC/n/YyL87vzPg&#xA;8oeXnsrGcDzDqKFLRFPxwxnZrg06U6J/lfI5PUZeEUOZcXsrQ+NO5D0R+3yYB/zjl+Wpupv8bavG&#xA;WjjZl0eOQV5yA0e4NevE/CnvU9hlOmxWeI8nZdt6+h4Ufj+p9E5nvMPknR4V8+/85Dyx6q3O1/SF&#xA;w7QvvWCwDelDTbYrEqt9JzWRHHPfqXrsk/A0np58I+Z6vrYkAEk0A6nNm8i+Tfzb84XP5l/mNp/l&#xA;nQZPU023nFlYuPsSTSMBNcGn7Apt/krXvmtyz45bfB6zQYBpsJnL6juf1PqLy9oVhoGh2WjWCcLS&#xA;xiWGIbVPEbs1P2marMfE5sIR4RTy+bKckzI8y+XP+corG8tvzFju5am2vbKJrZqbD0yyOlfEEcv9&#xA;kMwNQKm9R2LkBw13F6L+XvkDy35z8lafew+bPMT27QrFe6Yuo/uYbhVpJH6RQ8QG+z/k0OWYsUZx&#xA;5l1+q1k8OUjgh5Hh6M68sflP+XnlFjf2Wnxi6gBdtSvHM0iAblw0h4x0A6qBl8cMI7uDn1+bNsTt&#xA;3Bk2i65pOt2A1DSbpLyyZ3jS4jqUZomKPxJ6gMp3G2WRkJCw4uTFKBqQovnf8xm1b83PzVi8paI/&#xA;+4LQCUvL1d40YkC4mPTkQR6aDuRUbEnMLITknQeg0nDpcHiS+qX4AfROh6Np+iaRaaTp0QhsrKJY&#xA;YI+/FR1J7sTuT3OZsYiIoPPZchnIylzKNyTBiPmX8ubTU9TOu6PqFz5e8xlQj6lYlSsyrTit1A9Y&#xA;51Xty399spnhs2DRcvDqzGPDICcO4/oPRI7ry9+fIRoLbzbpbID8N49hwmI6boPUjHjkDDL3j8fB&#xA;vjl0nMwl80r0j/nHfTp9XGt+d9ZufNWpbEpNWKDb9krydmVew5Kv+T2wR029yNtmTtUiPDiiIB61&#xA;b29vbQR29vEkMEShIoY1CoiqKBVUUAAHYZkgU6okk2WKebvy10vX9Qi1q0urjRPMtsvC31qxYLLw&#xA;/kmQ/DKns3yrTKsmESNjYuVg1ksY4SBKHcUjvvLf58em1tZ+b9NdP2b2SwEU57boBLEPoGQMMvf+&#xA;Pk3xzaXmYS+aQaN/zjTp8+rHWPO2uXPmO9kIeWI8oo2Ydncu8jLTsCuRjpesi35O1yI8OOIiHstp&#xA;aWtnbRWtpClvbQqEhgiUIiKOgVRQAZlAAbB08pEmzzQXmPy7pPmPRbrRtWh9exu14SpWhBBqrKR0&#xA;ZSKg4JwEhRbMOaWOQlHmHntj+X35s+XLJdI8sebbWXRoVK2Uep2oee3Svwosicg4XtUU9sx/CyR2&#xA;idnYS1WnyHiyQPF5Hml1n/zjpFqet/pzz7r9x5jvmILQKv1eHY1CEhmb0/8AJThgGms3I2zl2twx&#xA;4cUREfj8dXr1jY2VhZxWdlAltaQKEhgiUIiKOgVRsMygABQdTKRkbO5YR+bH5RaT+YNjbiW4Nhql&#xA;ly+qXyp6g4vQtHIlV5KSKjeo++tWbDx+9zdDrpYCdrieiUaF5G/Ouw0u20RvONjBp9qghiu47L17&#xA;tYkAVUHq8U2UdTU/PK448g2vZuy6nTSkZcBJPnswzXv+cV9W1TU7/UD5nEk0zhoWuonmll+Ecnnl&#xA;5rRi3ZVIys6WXe5ePtqMQBw/L9D1n8vNB89aNZfU/MurWeoW1vDFb2EVpbmIosS8eTuePIkUFOPb&#xA;MjDCcdiXV6vLimbgCD1tO/M/lzTPMmg3miampazvU4ScTRlIIZHU7/ErAMMsnASFFpwZpYpiceYe&#xA;P6R+Rnm3ygb250rz22laSQZbyRbck+lEpbm6GQpVVr8X+1mH+XlHe6DusnauPNQlj4pdN3jnlby9&#xA;f/mJ+YgsVurm6huJWmvNQuW5zi0jPxSOegYrRVHQEgZjwgZGnc5840+G6ArkB3vtCwsbTT7KCxs4&#xA;hBaWsawwQr0VEHFQK+AGbWIAFB4iczIknmVfCxeN+a/yEvpPO3+NPJmtDR9Xec3UsM0ZeL1nr6rq&#xA;wqaSVPJGUg1PbbMWenN3Eu4wdpjw/DyR4o1SZ6t+Xn5o+YtHvLHX/N8SRywusdjptv8AV4pJChVP&#xA;Xn3mMfLd0Ub4nFkkKJa4avBjkDCHxJ+4MM8vf842+cfKmuWOu+X/ADJZvqNqGP8ApNq4jBkRo5Fo&#xA;Hk5DixFfhPyyA08omwXLy9rY8sTGcTR83u2hwavBpNrDrF1He6miUu7qGP0Y3etfhSrUp09+tB0z&#xA;LgCBvzdJlMTImIqKT+fvy98u+eNHGm6zG1YiXtLuI8ZoHIoWQmoof2lIIPzoRHJjExu26XVTwyuL&#xA;x/Tf+ccfzA8tanJc+VPOK2iOADIUlhZx14yRqZUcD3+4Zi/lpg7F20u1sWSNZIX9rL9P/JbXNTaN&#xA;/wAwPNl75ht0Ic6REWtrNnHT1ArAyAewXLBpyfqNuLPtGMf7qAie/qz3WtFvT5WuNH8szQ6NcNEL&#xA;eynSOkdshIVmjjTj8SpXhT9qmXyieGo7OBjyDxBKfq/S8Qsv+cZvO+jXpbQfOz2cMlPWuIFuLWU+&#xA;PwRSsG+l8xPy0gdi7qXa+KY9cL+Re7eWNEfQ9Bs9Ke9n1KS1TjJfXbF5pXZizOzEk/aY0FdhtmZC&#xA;PCKdJmycczKqvoEzyTU7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXkf/OS/m1tF8hjS&#xA;4H43Wuy/VyRsRbx0eYg+/wAKH2Y5jaqdRrvdv2Ng48vEeUfvW/8AONnkddE8mfp25jpqOvUlUkbp&#xA;apUQruP295NuoK+GDTQoX3p7Y1PHk4Byj970bzP5mtfL9nDc3EEs/wBYmW2hSEKSZpAeCnky0DU6&#xA;75fkycIdQAgvKWoas7yW+rw3ovpg1y8s8Ucdsgqq+jAY3c0WopyNTucjjket2pZAl1ayTPBHMjzx&#xA;U9WJWBda9OSg1GWWEN/Wbb1/q/qp9Ypy9HkOfHx49aY2qphVjmj+Y7uXX9f03U5LZIdKktUt50DR&#xA;cvrMXqUfm7io2AplUZmyD0TSbahLqcc9kLNYDA83G9MzMrCPiT+6A2LcvHJyJ2pCIku7WOVIZJkS&#xA;WQVSNmAZgPAE1OGwqDfX9MTW49FaUfXpIGuONRQKrpGAd68mMnwinY4OMXSo2S5to2CySojFlQBm&#xA;AJZ/srv3PbDYV0l1bRypFJKiSy/3cbMAzf6oO5xsKqYVdirsVdirsVdirsVdirsVdirsVdirsVdi&#xA;rsVdirsVdirsVfNn/OQNrL5n/ODyv5UikISSGGOQgH92bmdvVantFGrbZgajeYD0fZcvD08pnz+w&#xA;Po+1toLW2htbdBFbwIsUMa9FRBxVR8gMzgKFPOykSbPNhX5uLI2i6SsT+nI2r2gSSnLix50NO9PD&#xA;KNRyHvUO8znzbo/lzWbmXWFvpjZn6mkcK28iMG/eyKFLE8Y2rWu1McnFGJ3VGRaN5ZsfL8OqaFaw&#xA;fXIrSVtKu0CiWWR4GIqwoZGfqQ1d8PDERsKxI6doZ/KRdfjKDWY4xefpcf71fXvU+Kso+Opf4aE5&#xA;Vwjw76p6s6s/8bTJZzmexigkige4hmt5jOGMamYcllRK8+VPg2y8cfkhjtl5c0DWPP8A5xOrWsd2&#xA;YhYpGsu4RZLUcmUdmPEfF1HbKxASnK/JUg0ZrmTSPJDXDGZYNalhsZ33drZeYT4jvT4aD2AyqPKP&#xA;vSmvmSzXSNav9dvbKDW9Bu7mBrm5Uqb2wmiZI1CnuitT4RQ9j7zmKJJ3H3KE4ksbJ/zbjZreNm/Q&#xA;rTVKKT6q3iASdPtAdD1yyh4nw/SjopaXoGjX3n7zRLd2kc7QNp8kPNQQj+lzLqOzFkFT/bgjAGcr&#xA;8l6JX5c0vRtd8seYL/zBFHNqpubtb65mAM1v6I/dqjNQxiNQCoFMhCIlEmXNJZX+Xl5qF55L0m51&#xA;Fme7khq7yfaZQxCMa9eSAGvfLsJJiLQWRZah2KuxV2KuxV2KuxV2KuxV2KuxV2KuxV2KuxV2KuxV&#xA;2KvKbvydrFx/zkTZ+Y2tHOkWmlFlvSP3XrESQeny/n/eVp4b5imB8W+jtY6iI0ZhfqMuX2vVsynV&#xA;IHV9D0rWIEt9StxcwxuJURmYAOAQG+EjcVyMoCXNbQ1h5T8u2Fw1xa2SrM0bQszM8n7t6Flo5YUP&#xA;EVwDHEdE2t0ryb5Y0m7N3p2nx28/xcWBYhef2uCsSqV78QMEcUQbAW2h5M8ri/N9+jo/rBk9c/a9&#xA;P1evqelX0+f+Vxrj4UbultOssQk2o+TfLOo3b3l5YJJdS7SzBnRnHEJxcoy8l4qBQ7ZXLFEmyE2i&#xA;p9C0if6j6lstNNYPYqpKLEygBSqqQNgKZIwG3ki0I3kzy098189mGuHm+svyklKNMDUO0Zb0yQel&#xA;VyPhRu6TaJ1Dy7ouoX1vf3dqst5aikE1WVgpNeJ4kclr2aowygCbKLVbXSNPtb66v4IuF3e8frUv&#xA;JyX4CiVBJHwjYeGERANqgr7yd5Zvr17260+OS4lp6zVZRJx6eqikLJT/ACgcicUSbITacqqqoVQA&#xA;oFABsABliHYq/wD/2Q==</xapGImg:image>
               </rdf:li>
            </rdf:Alt>
         </xap:Thumbnails>
      </rdf:Description>
      <rdf:Description rdf:about=""
            xmlns:xapMM="http://ns.adobe.com/xap/1.0/mm/"
            xmlns:stRef="http://ns.adobe.com/xap/1.0/sType/ResourceRef#">
         <xapMM:DocumentID>uuid:FFAEF2C849BA11E18A289C2E1129D4C0</xapMM:DocumentID>
         <xapMM:InstanceID>uuid:FFAEF2C949BA11E18A289C2E1129D4C0</xapMM:InstanceID>
         <xapMM:DerivedFrom rdf:parseType="Resource">
            <stRef:instanceID>uuid:FFAEF2C749BA11E18A289C2E1129D4C0</stRef:instanceID>
            <stRef:documentID>uuid:FFAEF2C649BA11E18A289C2E1129D4C0</stRef:documentID>
         </xapMM:DerivedFrom>
      </rdf:Description>
      <rdf:Description rdf:about=""
            xmlns:illustrator="http://ns.adobe.com/illustrator/1.0/">
         <illustrator:StartupProfile>Basic CMYK</illustrator:StartupProfile>
      </rdf:Description>
      <rdf:Description rdf:about=""
            xmlns:xapTPg="http://ns.adobe.com/xap/1.0/t/pg/"
            xmlns:stDim="http://ns.adobe.com/xap/1.0/sType/Dimensions#"
            xmlns:xapG="http://ns.adobe.com/xap/1.0/g/">
         <xapTPg:MaxPageSize rdf:parseType="Resource">
            <stDim:w>4.000000</stDim:w>
            <stDim:h>3.000000</stDim:h>
            <stDim:unit>Inches</stDim:unit>
         </xapTPg:MaxPageSize>
         <xapTPg:NPages>1</xapTPg:NPages>
         <xapTPg:HasVisibleTransparency>False</xapTPg:HasVisibleTransparency>
         <xapTPg:HasVisibleOverprint>False</xapTPg:HasVisibleOverprint>
         <xapTPg:PlateNames>
            <rdf:Seq>
               <rdf:li>Cyan</rdf:li>
               <rdf:li>Magenta</rdf:li>
               <rdf:li>Yellow</rdf:li>
               <rdf:li>Black</rdf:li>
            </rdf:Seq>
         </xapTPg:PlateNames>
         <xapTPg:SwatchGroups>
            <rdf:Seq>
               <rdf:li rdf:parseType="Resource">
                  <xapG:groupName>Default Swatch Group</xapG:groupName>
                  <xapG:groupType>0</xapG:groupType>
                  <xapG:Colorants>
                     <rdf:Seq>
                        <rdf:li rdf:parseType="Resource">
                           <xapG:swatchName>White</xapG:swatchName>
                           <xapG:mode>CMYK</xapG:mode>
                           <xapG:type>PROCESS</xapG:type>
                           <xapG:cyan>0.000000</xapG:cyan>
                           <xapG:magenta>0.000000</xapG:magenta>
                           <xapG:yellow>0.000000</xapG:yellow>
                           <xapG:black>0.000000</xapG:black>
                        </rdf:li>
                        <rdf:li rdf:parseType="Resource">
                           <xapG:swatchName>Black</xapG:swatchName>
                           <xapG:mode>CMYK</xapG:mode>
                           <xapG:type>PROCESS</xapG:type>
                           <xapG:cyan>0.000000</xapG:cyan>
                           <xapG:magenta>0.000000</xapG:magenta>
                           <xapG:yellow>0.000000</xapG:yellow>
                           <xapG:black>100.000000</xapG:black>
                        </rdf:li>
                        <rdf:li rdf:parseType="Resource">
                           <xapG:swatchName>CMYK Red</xapG:swatchName>
                           <xapG:mode>CMYK</xapG:mode>
                           <xapG:type>PROCESS</xapG:type>
                           <xapG:cyan>0.000000</xapG:cyan>
                           <xapG:magenta>100.000000</xapG:magenta>
                           <xapG:yellow>100.000000</xapG:yellow>
                           <xapG:black>0.000000</xapG:black>
                        </rdf:li>
                        <rdf:li rdf:parseType="Resource">
                           <xapG:swatchName>CMYK Yellow</xapG:swatchName>
                           <xapG:mode>CMYK</xapG:mode>
                           <xapG:type>PROCESS</xapG:type>
                           <xapG:cyan>0.000000</xapG:cyan>
                           <xapG:magenta>0.000000</xapG:magenta>
                           <xapG:yellow>100.000000</xapG:yellow>
                           <xapG:black>0.000000</xapG:black>
                        </rdf:li>
                        <rdf:li rdf:parseType="Resource">
                           <xapG:swatchName>CMYK Green</xapG:swatchName>
                           <xapG:mode>CMYK</xapG:mode>
                           <xapG:type>PROCESS</xapG:type>
                           <xapG:cyan>100.000000</xapG:cyan>
                           <xapG:magenta>0.000000</xapG:magenta>
                           <xapG:yellow>100.000000</xapG:yellow>
                           <xapG:black>0.000000</xapG:black>
                        </rdf:li>
                        <rdf:li rdf:parseType="Resource">
                           <xapG:swatchName>CMYK Cyan</xapG:swatchName>
                           <xapG:mode>CMYK</xapG:mode>
                           <xapG:type>PROCESS</xapG:type>
                           <xapG:cyan>100.000000</xapG:cyan>
                           <xapG:magenta>0.000000</xapG:magenta>
                           <xapG:yellow>0.000000</xapG:yellow>
                           <xapG:black>0.000000</xapG:black>
                        </rdf:li>
                        <rdf:li rdf:parseType="Resource">
                           <xapG:swatchName>CMYK Blue</xapG:swatchName>
                           <xapG:mode>CMYK</xapG:mode>
                           <xapG:type>PROCESS</xapG:type>
                           <xapG:cyan>100.000000</xapG:cyan>
                           <xapG:magenta>100.000000</xapG:magenta>
                           <xapG:yellow>0.000000</xapG:yellow>
                           <xapG:black>0.000000</xapG:black>
                        </rdf:li>
                        <rdf:li rdf:parseType="Resource">
                           <xapG:swatchName>CMYK Magenta</xapG:swatchName>
                           <xapG:mode>CMYK</xapG:mode>
                           <xapG:type>PROCESS</xapG:type>
                           <xapG:cyan>0.000000</xapG:cyan>
                           <xapG:magenta>100.000000</xapG:magenta>
                           <xapG:yellow>0.000000</xapG:yellow>
                           <xapG:black>0.000000</xapG:black>
                        </rdf:li>
                        <rdf:li rdf:parseType="Resource">
                           <xapG:swatchName>C=15 M=100 Y=90 K=10</xapG:swatchName>
                           <xapG:mode>CMYK</xapG:mode>
                           <xapG:type>PROCESS</xapG:type>
                           <xapG:cyan>14.999998</xapG:cyan>
                           <xapG:magenta>100.000000</xapG:magenta>
                           <xapG:yellow>90.000000</xapG:yellow>
                           <xapG:black>10.000002</xapG:black>
                        </rdf:li>
                        <rdf:li rdf:parseType="Resource">
                           <xapG:swatchName>C=0 M=90 Y=85 K=0</xapG:swatchName>
                           <xapG:mode>CMYK</xapG:mode>
                           <xapG:type>PROCESS</xapG:type>
                           <xapG:cyan>0.000000</xapG:cyan>
                           <xapG:magenta>90.000000</xapG:magenta>
                           <xapG:yellow>85.000000</xapG:yellow>
                           <xapG:black>0.000000</xapG:black>
                        </rdf:li>
                        <rdf:li rdf:parseType="Resource">
                           <xapG:swatchName>C=0 M=80 Y=95 K=0</xapG:swatchName>
                           <xapG:mode>CMYK</xapG:mode>
                           <xapG:type>PROCESS</xapG:type>
                           <xapG:cyan>0.000000</xapG:cyan>
                           <xapG:magenta>80.000000</xapG:magenta>
                           <xapG:yellow>95.000000</xapG:yellow>
                           <xapG:black>0.000000</xapG:black>
                        </rdf:li>
                        <rdf:li rdf:parseType="Resource">
                           <xapG:swatchName>C=0 M=50 Y=100 K=0</xapG:swatchName>
                           <xapG:mode>CMYK</xapG:mode>
                           <xapG:type>PROCESS</xapG:type>
                           <xapG:cyan>0.000000</xapG:cyan>
                           <xapG:magenta>50.000000</xapG:magenta>
                           <xapG:yellow>100.000000</xapG:yellow>
                           <xapG:black>0.000000</xapG:black>
                        </rdf:li>
                        <rdf:li rdf:parseType="Resource">
                           <xapG:swatchName>C=0 M=35 Y=85 K=0</xapG:swatchName>
                           <xapG:mode>CMYK</xapG:mode>
                           <xapG:type>PROCESS</xapG:type>
                           <xapG:cyan>0.000000</xapG:cyan>
                           <xapG:magenta>35.000004</xapG:magenta>
                           <xapG:yellow>85.000000</xapG:yellow>
                           <xapG:black>0.000000</xapG:black>
                        </rdf:li>
                        <rdf:li rdf:parseType="Resource">
                           <xapG:swatchName>C=5 M=0 Y=90 K=0</xapG:swatchName>
                           <xapG:mode>CMYK</xapG:mode>
                           <xapG:type>PROCESS</xapG:type>
                           <xapG:cyan>5.000001</xapG:cyan>
                           <xapG:magenta>0.000000</xapG:magenta>
                           <xapG:yellow>90.000000</xapG:yellow>
                           <xapG:black>0.000000</xapG:black>
                        </rdf:li>
                        <rdf:li rdf:parseType="Resource">
                           <xapG:swatchName>C=20 M=0 Y=100 K=0</xapG:swatchName>
                           <xapG:mode>CMYK</xapG:mode>
                           <xapG:type>PROCESS</xapG:type>
                           <xapG:cyan>19.999998</xapG:cyan>
                           <xapG:magenta>0.000000</xapG:magenta>
                           <xapG:yellow>100.000000</xapG:yellow>
                           <xapG:black>0.000000</xapG:black>
                        </rdf:li>
                        <rdf:li rdf:parseType="Resource">
                           <xapG:swatchName>C=50 M=0 Y=100 K=0</xapG:swatchName>
                           <xapG:mode>CMYK</xapG:mode>
                           <xapG:type>PROCESS</xapG:type>
                           <xapG:cyan>50.000000</xapG:cyan>
                           <xapG:magenta>0.000000</xapG:magenta>
                           <xapG:yellow>100.000000</xapG:yellow>
                           <xapG:black>0.000000</xapG:black>
                        </rdf:li>
                        <rdf:li rdf:parseType="Resource">
                           <xapG:swatchName>C=75 M=0 Y=100 K=0</xapG:swatchName>
                           <xapG:mode>CMYK</xapG:mode>
                           <xapG:type>PROCESS</xapG:type>
                           <xapG:cyan>75.000000</xapG:cyan>
                           <xapG:magenta>0.000000</xapG:magenta>
                           <xapG:yellow>100.000000</xapG:yellow>
                           <xapG:black>0.000000</xapG:black>
                        </rdf:li>
                        <rdf:li rdf:parseType="Resource">
                           <xapG:swatchName>C=85 M=10 Y=100 K=10</xapG:swatchName>
                           <xapG:mode>CMYK</xapG:mode>
                           <xapG:type>PROCESS</xapG:type>
                           <xapG:cyan>85.000000</xapG:cyan>
                           <xapG:magenta>10.000002</xapG:magenta>
                           <xapG:yellow>100.000000</xapG:yellow>
                           <xapG:black>10.000002</xapG:black>
                        </rdf:li>
                        <rdf:li rdf:parseType="Resource">
                           <xapG:swatchName>C=90 M=30 Y=95 K=30</xapG:swatchName>
                           <xapG:mode>CMYK</xapG:mode>
                           <xapG:type>PROCESS</xapG:type>
                           <xapG:cyan>90.000000</xapG:cyan>
                           <xapG:magenta>30.000002</xapG:magenta>
                           <xapG:yellow>95.000000</xapG:yellow>
                           <xapG:black>30.000002</xapG:black>
                        </rdf:li>
                        <rdf:li rdf:parseType="Resource">
                           <xapG:swatchName>C=75 M=0 Y=75 K=0</xapG:swatchName>
                           <xapG:mode>CMYK</xapG:mode>
                           <xapG:type>PROCESS</xapG:type>
                           <xapG:cyan>75.000000</xapG:cyan>
                           <xapG:magenta>0.000000</xapG:magenta>
                           <xapG:yellow>75.000000</xapG:yellow>
                           <xapG:black>0.000000</xapG:black>
                        </rdf:li>
                        <rdf:li rdf:parseType="Resource">
                           <xapG:swatchName>C=80 M=10 Y=45 K=0</xapG:swatchName>
                           <xapG:mode>CMYK</xapG:mode>
                           <xapG:type>PROCESS</xapG:type>
                           <xapG:cyan>80.000000</xapG:cyan>
                           <xapG:magenta>10.000002</xapG:magenta>
                           <xapG:yellow>45.000000</xapG:yellow>
                           <xapG:black>0.000000</xapG:black>
                        </rdf:li>
                        <rdf:li rdf:parseType="Resource">
                           <xapG:swatchName>C=70 M=15 Y=0 K=0</xapG:swatchName>
                           <xapG:mode>CMYK</xapG:mode>
                           <xapG:type>PROCESS</xapG:type>
                           <xapG:cyan>70.000000</xapG:cyan>
                           <xapG:magenta>14.999998</xapG:magenta>
                           <xapG:yellow>0.000000</xapG:yellow>
                           <xapG:black>0.000000</xapG:black>
                        </rdf:li>
                        <rdf:li rdf:parseType="Resource">
                           <xapG:swatchName>C=85 M=50 Y=0 K=0</xapG:swatchName>
                           <xapG:mode>CMYK</xapG:mode>
                           <xapG:type>PROCESS</xapG:type>
                           <xapG:cyan>85.000000</xapG:cyan>
                           <xapG:magenta>50.000000</xapG:magenta>
                           <xapG:yellow>0.000000</xapG:yellow>
                           <xapG:black>0.000000</xapG:black>
                        </rdf:li>
                        <rdf:li rdf:parseType="Resource">
                           <xapG:swatchName>C=100 M=95 Y=5 K=0</xapG:swatchName>
                           <xapG:mode>CMYK</xapG:mode>
                           <xapG:type>PROCESS</xapG:type>
                           <xapG:cyan>100.000000</xapG:cyan>
                           <xapG:magenta>95.000000</xapG:magenta>
                           <xapG:yellow>5.000001</xapG:yellow>
                           <xapG:black>0.000000</xapG:black>
                        </rdf:li>
                        <rdf:li rdf:parseType="Resource">
                           <xapG:swatchName>C=100 M=100 Y=25 K=25</xapG:swatchName>
                           <xapG:mode>CMYK</xapG:mode>
                           <xapG:type>PROCESS</xapG:type>
                           <xapG:cyan>100.000000</xapG:cyan>
                           <xapG:magenta>100.000000</xapG:magenta>
                           <xapG:yellow>25.000000</xapG:yellow>
                           <xapG:black>25.000000</xapG:black>
                        </rdf:li>
                        <rdf:li rdf:parseType="Resource">
                           <xapG:swatchName>C=75 M=100 Y=0 K=0</xapG:swatchName>
                           <xapG:mode>CMYK</xapG:mode>
                           <xapG:type>PROCESS</xapG:type>
                           <xapG:cyan>75.000000</xapG:cyan>
                           <xapG:magenta>100.000000</xapG:magenta>
                           <xapG:yellow>0.000000</xapG:yellow>
                           <xapG:black>0.000000</xapG:black>
                        </rdf:li>
                        <rdf:li rdf:parseType="Resource">
                           <xapG:swatchName>C=50 M=100 Y=0 K=0</xapG:swatchName>
                           <xapG:mode>CMYK</xapG:mode>
                           <xapG:type>PROCESS</xapG:type>
                           <xapG:cyan>50.000000</xapG:cyan>
                           <xapG:magenta>100.000000</xapG:magenta>
                           <xapG:yellow>0.000000</xapG:yellow>
                           <xapG:black>0.000000</xapG:black>
                        </rdf:li>
                        <rdf:li rdf:parseType="Resource">
                           <xapG:swatchName>C=35 M=100 Y=35 K=10</xapG:swatchName>
                           <xapG:mode>CMYK</xapG:mode>
                           <xapG:type>PROCESS</xapG:type>
                           <xapG:cyan>35.000004</xapG:cyan>
                           <xapG:magenta>100.000000</xapG:magenta>
                           <xapG:yellow>35.000004</xapG:yellow>
                           <xapG:black>10.000002</xapG:black>
                        </rdf:li>
                        <rdf:li rdf:parseType="Resource">
                           <xapG:swatchName>C=10 M=100 Y=50 K=0</xapG:swatchName>
                           <xapG:mode>CMYK</xapG:mode>
                           <xapG:type>PROCESS</xapG:type>
                           <xapG:cyan>10.000002</xapG:cyan>
                           <xapG:magenta>100.000000</xapG:magenta>
                           <xapG:yellow>50.000000</xapG:yellow>
                           <xapG:black>0.000000</xapG:black>
                        </rdf:li>
                        <rdf:li rdf:parseType="Resource">
                           <xapG:swatchName>C=0 M=95 Y=20 K=0</xapG:swatchName>
                           <xapG:mode>CMYK</xapG:mode>
                           <xapG:type>PROCESS</xapG:type>
                           <xapG:cyan>0.000000</xapG:cyan>
                           <xapG:magenta>95.000000</xapG:magenta>
                           <xapG:yellow>19.999998</xapG:yellow>
                           <xapG:black>0.000000</xapG:black>
                        </rdf:li>
                        <rdf:li rdf:parseType="Resource">
                           <xapG:swatchName>C=25 M=25 Y=40 K=0</xapG:swatchName>
                           <xapG:mode>CMYK</xapG:mode>
                           <xapG:type>PROCESS</xapG:type>
                           <xapG:cyan>25.000000</xapG:cyan>
                           <xapG:magenta>25.000000</xapG:magenta>
                           <xapG:yellow>39.999996</xapG:yellow>
                           <xapG:black>0.000000</xapG:black>
                        </rdf:li>
                        <rdf:li rdf:parseType="Resource">
                           <xapG:swatchName>C=40 M=45 Y=50 K=5</xapG:swatchName>
                           <xapG:mode>CMYK</xapG:mode>
                           <xapG:type>PROCESS</xapG:type>
                           <xapG:cyan>39.999996</xapG:cyan>
                           <xapG:magenta>45.000000</xapG:magenta>
                           <xapG:yellow>50.000000</xapG:yellow>
                           <xapG:black>5.000001</xapG:black>
                        </rdf:li>
                        <rdf:li rdf:parseType="Resource">
                           <xapG:swatchName>C=50 M=50 Y=60 K=25</xapG:swatchName>
                           <xapG:mode>CMYK</xapG:mode>
                           <xapG:type>PROCESS</xapG:type>
                           <xapG:cyan>50.000000</xapG:cyan>
                           <xapG:magenta>50.000000</xapG:magenta>
                           <xapG:yellow>60.000004</xapG:yellow>
                           <xapG:black>25.000000</xapG:black>
                        </rdf:li>
                        <rdf:li rdf:parseType="Resource">
                           <xapG:swatchName>C=55 M=60 Y=65 K=40</xapG:swatchName>
                           <xapG:mode>CMYK</xapG:mode>
                           <xapG:type>PROCESS</xapG:type>
                           <xapG:cyan>55.000000</xapG:cyan>
                           <xapG:magenta>60.000004</xapG:magenta>
                           <xapG:yellow>65.000000</xapG:yellow>
                           <xapG:black>39.999996</xapG:black>
                        </rdf:li>
                        <rdf:li rdf:parseType="Resource">
                           <xapG:swatchName>C=25 M=40 Y=65 K=0</xapG:swatchName>
                           <xapG:mode>CMYK</xapG:mode>
                           <xapG:type>PROCESS</xapG:type>
                           <xapG:cyan>25.000000</xapG:cyan>
                           <xapG:magenta>39.999996</xapG:magenta>
                           <xapG:yellow>65.000000</xapG:yellow>
                           <xapG:black>0.000000</xapG:black>
                        </rdf:li>
                        <rdf:li rdf:parseType="Resource">
                           <xapG:swatchName>C=30 M=50 Y=75 K=10</xapG:swatchName>
                           <xapG:mode>CMYK</xapG:mode>
                           <xapG:type>PROCESS</xapG:type>
                           <xapG:cyan>30.000002</xapG:cyan>
                           <xapG:magenta>50.000000</xapG:magenta>
                           <xapG:yellow>75.000000</xapG:yellow>
                           <xapG:black>10.000002</xapG:black>
                        </rdf:li>
                        <rdf:li rdf:parseType="Resource">
                           <xapG:swatchName>C=35 M=60 Y=80 K=25</xapG:swatchName>
                           <xapG:mode>CMYK</xapG:mode>
                           <xapG:type>PROCESS</xapG:type>
                           <xapG:cyan>35.000004</xapG:cyan>
                           <xapG:magenta>60.000004</xapG:magenta>
                           <xapG:yellow>80.000000</xapG:yellow>
                           <xapG:black>25.000000</xapG:black>
                        </rdf:li>
                        <rdf:li rdf:parseType="Resource">
                           <xapG:swatchName>C=40 M=65 Y=90 K=35</xapG:swatchName>
                           <xapG:mode>CMYK</xapG:mode>
                           <xapG:type>PROCESS</xapG:type>
                           <xapG:cyan>39.999996</xapG:cyan>
                           <xapG:magenta>65.000000</xapG:magenta>
                           <xapG:yellow>90.000000</xapG:yellow>
                           <xapG:black>35.000004</xapG:black>
                        </rdf:li>
                        <rdf:li rdf:parseType="Resource">
                           <xapG:swatchName>C=40 M=70 Y=100 K=50</xapG:swatchName>
                           <xapG:mode>CMYK</xapG:mode>
                           <xapG:type>PROCESS</xapG:type>
                           <xapG:cyan>39.999996</xapG:cyan>
                           <xapG:magenta>70.000000</xapG:magenta>
                           <xapG:yellow>100.000000</xapG:yellow>
                           <xapG:black>50.000000</xapG:black>
                        </rdf:li>
                        <rdf:li rdf:parseType="Resource">
                           <xapG:swatchName>C=50 M=70 Y=80 K=70</xapG:swatchName>
                           <xapG:mode>CMYK</xapG:mode>
                           <xapG:type>PROCESS</xapG:type>
                           <xapG:cyan>50.000000</xapG:cyan>
                           <xapG:magenta>70.000000</xapG:magenta>
                           <xapG:yellow>80.000000</xapG:yellow>
                           <xapG:black>70.000000</xapG:black>
                        </rdf:li>
                     </rdf:Seq>
                  </xapG:Colorants>
               </rdf:li>
               <rdf:li rdf:parseType="Resource">
                  <xapG:groupName>Grayscale</xapG:groupName>
                  <xapG:groupType>1</xapG:groupType>
                  <xapG:Colorants>
                     <rdf:Seq>
                        <rdf:li rdf:parseType="Resource">
                           <xapG:swatchName>K=100</xapG:swatchName>
                           <xapG:mode>GRAY</xapG:mode>
                           <xapG:type>PROCESS</xapG:type>
                           <xapG:gray>255</xapG:gray>
                        </rdf:li>
                        <rdf:li rdf:parseType="Resource">
                           <xapG:swatchName>K=90</xapG:swatchName>
                           <xapG:mode>GRAY</xapG:mode>
                           <xapG:type>PROCESS</xapG:type>
                           <xapG:gray>229</xapG:gray>
                        </rdf:li>
                        <rdf:li rdf:parseType="Resource">
                           <xapG:swatchName>K=80</xapG:swatchName>
                           <xapG:mode>GRAY</xapG:mode>
                           <xapG:type>PROCESS</xapG:type>
                           <xapG:gray>203</xapG:gray>
                        </rdf:li>
                        <rdf:li rdf:parseType="Resource">
                           <xapG:swatchName>K=70</xapG:swatchName>
                           <xapG:mode>GRAY</xapG:mode>
                           <xapG:type>PROCESS</xapG:type>
                           <xapG:gray>178</xapG:gray>
                        </rdf:li>
                        <rdf:li rdf:parseType="Resource">
                           <xapG:swatchName>K=60</xapG:swatchName>
                           <xapG:mode>GRAY</xapG:mode>
                           <xapG:type>PROCESS</xapG:type>
                           <xapG:gray>152</xapG:gray>
                        </rdf:li>
                        <rdf:li rdf:parseType="Resource">
                           <xapG:swatchName>K=50</xapG:swatchName>
                           <xapG:mode>GRAY</xapG:mode>
                           <xapG:type>PROCESS</xapG:type>
                           <xapG:gray>127</xapG:gray>
                        </rdf:li>
                        <rdf:li rdf:parseType="Resource">
                           <xapG:swatchName>K=40</xapG:swatchName>
                           <xapG:mode>GRAY</xapG:mode>
                           <xapG:type>PROCESS</xapG:type>
                           <xapG:gray>101</xapG:gray>
                        </rdf:li>
                        <rdf:li rdf:parseType="Resource">
                           <xapG:swatchName>K=30</xapG:swatchName>
                           <xapG:mode>GRAY</xapG:mode>
                           <xapG:type>PROCESS</xapG:type>
                           <xapG:gray>76</xapG:gray>
                        </rdf:li>
                        <rdf:li rdf:parseType="Resource">
                           <xapG:swatchName>K=20</xapG:swatchName>
                           <xapG:mode>GRAY</xapG:mode>
                           <xapG:type>PROCESS</xapG:type>
                           <xapG:gray>50</xapG:gray>
                        </rdf:li>
                        <rdf:li rdf:parseType="Resource">
                           <xapG:swatchName>K=10</xapG:swatchName>
                           <xapG:mode>GRAY</xapG:mode>
                           <xapG:type>PROCESS</xapG:type>
                           <xapG:gray>25</xapG:gray>
                        </rdf:li>
                        <rdf:li rdf:parseType="Resource">
                           <xapG:swatchName>K=5</xapG:swatchName>
                           <xapG:mode>GRAY</xapG:mode>
                           <xapG:type>PROCESS</xapG:type>
                           <xapG:gray>12</xapG:gray>
                        </rdf:li>
                     </rdf:Seq>
                  </xapG:Colorants>
               </rdf:li>
            </rdf:Seq>
         </xapTPg:SwatchGroups>
      </rdf:Description>
   </rdf:RDF>
</x:xmpmeta>
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                           
<?xpacket end="w"?>%  &&end XMP packet marker&&[{ai_metadata_stream_123}<</Type /Metadata /Subtype /XML>>/PUT AI11_PDFMark5[/Document1 dict begin /Metadata {ai_metadata_stream_123} defcurrentdict end /BDC AI11_PDFMark5
%ADOEndClientInjection: PageSetup End "AI11EPS"
%%EndPageSetup
1 -1 scale 0 -73.2773 translate
pgsv
[1 0 0 1 0 0 ]ct
gsave
np
gsave
0 0 mo
0 73.2773 li
238.333 73.2773 li
238.333 0 li
cp
clp
[1 0 0 1 0 0 ]ct
40.248 1.24561 mo
43.4849 1.74219 46.7192 2.40723 50.0405 2.40723 cv
52.9438 2.40723 54.6875 1.74219 56.0156 1.24561 cv
57.4258 0.746582 58.5879 0 60.2471 0 cv
63.4858 0 64.5645 3.31934 64.5645 6.14063 cv
64.5645 14.2739 57.9229 17.1777 50.9546 18.1743 cv
50.0405 18.3398 49.458 18.6714 49.458 19.2539 cv
49.458 20.416 58.4224 24.729 58.4224 32.5303 cv
58.4224 41.8252 51.7832 48.7959 42.3218 48.7959 cv
33.7744 48.7959 30.3721 43.1523 30.3721 41.8252 cv
30.3721 41.3252 30.4541 40.9951 30.9546 40.9951 cv
31.2847 40.9951 33.9399 47.3018 40.7451 47.3018 cv
48.0488 47.3018 54.106 38.7549 54.106 31.8667 cv
54.106 23.4004 47.9653 20.8286 47.9653 19.2539 cv
47.9653 17.5098 52.0317 16.7632 53.9399 15.6016 cv
57.5918 13.3599 61.5747 7.71729 61.5747 3.40283 cv
61.5747 2.23975 61.2432 1.49268 60.0811 1.49268 cv
58.7534 1.49268 57.1787 2.07373 54.8545 3.15283 cv
52.6128 4.23242 49.626 5.22803 45.3096 5.22803 cv
42.5708 5.22803 39.584 4.89551 36.5957 4.39893 cv
33.6924 3.89893 30.8711 3.31934 28.2969 3.31934 cv
20.3311 3.31934 12.4478 6.80469 12.4478 16.1001 cv
12.4478 18.8389 12.9438 20.8286 12.9438 21.1621 cv
12.9438 21.3262 12.6133 21.4932 12.4478 21.4932 cv
11.4517 21.4932 10.9546 17.1777 10.9546 16.3477 cv
10.9546 6.22412 21.0776 0 30.3721 0 cv
33.6924 0 36.9292 0.746582 40.248 1.24561 cv
cp
12.4478 48.7959 mo
3.31934 48.7959 0 43.2354 0 40.7451 cv
0 40.3311 0.166016 40.2471 0.331543 40.2471 cv
0.662598 40.2471 0.745117 40.5811 1.16113 41.9072 cv
2.2417 45.0615 6.63721 47.3018 11.2026 47.3018 cv
20.5815 47.3018 27.1377 34.5225 31.6162 25.3936 cv
37.8408 12.7803 45.8921 7.71729 47.4678 7.71729 cv
47.6343 7.71729 47.8813 7.88477 47.8813 7.9668 cv
47.8813 8.21631 44.48 10.3735 42.6553 13.6104 cv
41.2441 16.0161 38.8369 19.6675 33.4429 31.4517 cv
28.6294 41.9902 20.4136 48.7959 12.4478 48.7959 cv
cp
false sop
/0 
[/DeviceCMYK] /CSA add_res
level3{
gsave
clp
[-2.13296e-06 48.7964 -48.7964 -2.13296e-06 32.2822 0 ]ct
/0 
<<
/ShadingType 2 
/ColorSpace /0 /CSA get_res
/Coords [0 0 1 0 ]
/Domain [0 1 ]
/Extend[ true true]
/Function
<<
/Domain[0 1 ] 
/FunctionType 3
/Functions [
<<
/Domain[0 1 ] 
/FunctionType 2
/C0 [0 0.97 1 0.5 ]
/C1 [0.19 0.99 0.99 0.09 ]
/N 1.75795 
>>
]
/Bounds []
/Encode [1 0 ]
>>
>>/Gradient add_res /0 /Gradient get_res clonedict shfill grestore
}if
level3 not{
gsave
[-2.13296e-06 48.7964 -48.7964 -2.13296e-06 32.2822 0 ]ct
clp
/0 {
/0 /CSA get_res setcolorspace
<<
/NumSamples 256 
/NumComp 4 
/Scaling[[0.00392157 0 ][0.00392157 0 ][0.00392157 0 ][0.00392157 0 ]]
/Samples[
<~0JG.50.nk0/M/P*/1`;%.k3"u.4H\p-n$Jk-RU5f-71#b,pX`],9nEX+sJ3S+X&!O+<VaJ+!2OF*Zc=B
*?6%=*#fh9)]BV5)AsD1)&O2-(`*u)(D[c%()7Q!'bh>r'GM2o',(uk&eYfh&J5Td&.fBa%hB0]%h9'Z
%LrpW%1NaT$k*OQ$k!FN$O[:K$47+I#mgnE#mgkC#RC\A#R:S>#6tJ<"pP89"pP57"U,&5"U,#3"9\i1
"9\i0!s8W-!s8W-!WiE)!WiE)!WiE(!<E3%!<E3%!<E3%zzzzzz!!!!!~>
<~r;?Kjr;?Kjr;?Kjr;?Hhqtp9fqtp9fqtp9fqtp9fqtp9fqtp9fqtp9fqtg0cqYL'bqYL'bqYL'bqYL'b
qYL'bqYL'bqYL'bqYL'bq>'j^q>'j^q>'j^q>'j^q>'j^q>'j^q>'j^q>'j^q>'j^q>'j^q>'g\q"XXZ
q"XXZq"XXZq"XXZq"XXZq"XXZq"XXZq"XXZq"XXZq"XXZq"XXZq"XXZq"XXZq"OOWp\4FVp\4FVp\4FV
p\4FVp\4FVp\4FVp\4FVp\4FVp\4FVp\4FVp\4FVp\4FVp\4FVp\4FVp\4FVp\4FVp\4FVp\4FVp\4FV
~>
<~r;?Kjr;?Kjr;?Kjr;?Kjr;?Kjr;?Kjr;?Kjr;?Kjr;?NlrVc]nrVc]nrVc]nrVc]nrVc]nrVc]nrVc]n
rVc]nrVc]nrVc]nrVc]nrVc]nrVc]nrVc]nrVc]nrVc]nrVc]nrVc`prr2orrr2orrr2orrr2orrr2or
rr2orrr2orrr2orrr2orrr2orrr2orrr2orrr2orrr2orrr2orrr2orrr2orrr2orrr2orrr2orrr2or
rr2orrr2orrr2orrr2orrr2orrr2orrr2orrr2orrr2orrr2orrr2orrr2orrr2orrr2orrr2orrr2or
~>
<~()If*)&aG5*$$(A+!;[L+sJ6W,UFca-R^Al.Olr"/1iJ,0/,(70etO@1c7-K2E*TT3B9,^4$5Vg5!D1q
5X@\&6:4+.6q'R77n6*@8P)NI92&#R9hnGZ:Jakb;,U:j;cH^r<E<.%='/R-=]np3>?b?;?!U`B?=.&I
?t!JP@U`hW@q9+]AS#IcB4kjjBP;*oC2.L!CMRa&Ci+$+DJj?1Df9T6E,fl;EH6)?F)uDDFEDVIF`hhM
G'8%QGB\7UG^+IXH$O[\H$Xd_H?spbH[C*eI!g<hI!g?jI=6NlI=6QnIXZ`pIXZ`pIt)rtIt)rtIt)rt
~>
]
>>
0 0 1 0 []true true []
/DeviceCMYK
GenStrips
} /Gradient add_res /0 /Gradient get_res exec grestore
}if
np
72.1987 47.3018 mo
78.2554 47.3018 84.3145 37.7568 84.3145 32.3652 cv
84.3145 29.625 83.3179 27.5508 79.5845 27.5508 cv
73.5254 27.5508 67.4678 37.0928 67.4678 42.4883 cv
67.4678 45.2256 68.4639 47.3018 72.1987 47.3018 cv
cp
79.335 26.0566 mo
84.9771 26.0566 87.7988 30.2061 87.7988 34.355 cv
87.7988 44.6455 78.7534 48.7959 72.4468 48.7959 cv
66.8052 48.7959 63.9819 44.6455 63.9819 40.498 cv
63.9819 31.0356 73.0273 26.0566 79.335 26.0566 cv
cp
level3{
gsave
clp
[-9.93986e-07 22.7397 -22.7397 -9.93986e-07 75.8906 26.0566 ]ct
/0 /Gradient get_res clonedict shfill grestore
}if
level3 not{
gsave
[-9.93986e-07 22.7397 -22.7397 -9.93986e-07 75.8906 26.0566 ]ct
clp
/0 /Gradient get_res exec grestore
}if
np
100.164 47.3018 mo
105.89 47.3018 108.046 43.3174 110.619 38.5889 cv
112.114 35.8496 113.691 32.6968 115.351 29.7915 cv
114.769 29.875 112.859 30.4551 112.279 30.4551 cv
112.114 30.4551 111.863 30.3745 111.863 29.9585 cv
111.863 29.5425 119.416 26.3892 120.496 26.3892 cv
120.828 26.3892 121.16 26.4722 121.16 26.8037 cv
121.16 27.1353 120.744 27.5508 120.578 28.0479 cv
119.25 31.3682 112.03 43.4854 112.03 45.7256 cv
112.03 47.1357 112.859 47.3018 113.858 47.3018 cv
114.271 47.3018 114.685 47.1357 115.1 47.1357 cv
115.432 47.1357 115.766 47.3018 115.766 47.6338 cv
115.766 48.2148 114.604 48.7959 113.44 48.7959 cv
110.87 48.7959 109.956 48.2969 108.381 48.2969 cv
107.384 48.2969 106.885 48.7959 106.14 48.7959 cv
105.89 48.7959 105.723 48.7119 105.723 48.3799 cv
105.723 47.8818 106.221 47.2178 106.554 46.6377 cv
106.388 46.4717 li
103.981 48.1318 102.155 48.7959 99.085 48.7959 cv
95.5991 48.7959 92.6113 47.0527 92.6113 43.2354 cv
92.6113 38.4209 96.7603 34.0234 98.8359 29.875 cv
98.2529 29.9585 95.5991 31.0356 94.7686 31.0356 cv
94.437 31.0356 94.3535 30.9536 94.3535 30.3745 cv
94.3535 29.7915 104.065 26.3892 104.312 26.3892 cv
104.645 26.3892 104.896 26.7217 104.896 26.9707 cv
104.896 28.4639 96.9268 39.2529 96.9268 42.9043 cv
96.9268 45.5586 98.0054 47.3018 100.164 47.3018 cv
cp
level3{
gsave
clp
[-9.79451e-07 22.4072 -22.4072 -9.79451e-07 106.885 26.3892 ]ct
/0 /Gradient get_res clonedict shfill grestore
}if
level3 not{
gsave
[-9.79451e-07 22.4072 -22.4072 -9.79451e-07 106.885 26.3892 ]ct
clp
/0 /Gradient get_res exec grestore
}if
np
132.612 46.4717 mo
135.598 46.4717 138.005 43.8994 139.665 41.1611 cv
142.735 36.0996 146.718 31.5327 150.203 27.2183 cv
149.707 27.1353 149.044 27.0532 148.293 27.0532 cv
146.219 27.0532 143.481 27.2183 141.157 28.2163 cv
136.094 30.3745 129.126 36.3472 129.126 42.4053 cv
129.126 44.9795 129.872 46.4717 132.612 46.4717 cv
cp
156.928 26.0566 mo
146.468 37.5088 133.687 56.1816 131.699 69.707 cv
131.449 71.3691 131.449 73.2773 130.206 73.2773 cv
129.292 73.2773 129.208 70.7041 129.208 69.21 cv
129.208 60.8281 131.947 54.3564 135.93 47.1357 cv
135.763 47.1357 li
133.856 48.1318 132.029 48.6299 129.789 48.6299 cv
126.966 48.6299 124.477 46.0566 124.477 43.3174 cv
124.477 32.6968 136.843 25.5596 148.128 25.5596 cv
151.449 25.5596 155.265 25.7261 156.678 25.7261 cv
156.928 26.0566 li
cp
level3{
gsave
clp
[-2.08583e-06 47.7183 -47.7183 -2.08583e-06 140.703 25.5596 ]ct
/0 /Gradient get_res clonedict shfill grestore
}if
level3 not{
gsave
[-2.08583e-06 47.7183 -47.7183 -2.08583e-06 140.703 25.5596 ]ct
clp
/0 /Gradient get_res exec grestore
}if
np
164.726 47.3018 mo
170.453 47.3018 172.612 43.3174 175.181 38.5889 cv
176.676 35.8496 178.254 32.6968 179.913 29.7915 cv
179.332 29.875 177.422 30.4551 176.843 30.4551 cv
176.676 30.4551 176.426 30.3745 176.426 29.9585 cv
176.426 29.5425 183.979 26.3892 185.058 26.3892 cv
185.39 26.3892 185.721 26.4722 185.721 26.8037 cv
185.721 27.1353 185.306 27.5508 185.14 28.0479 cv
183.812 31.3682 176.593 43.4854 176.593 45.7256 cv
176.593 47.1357 177.422 47.3018 178.42 47.3018 cv
178.833 47.3018 179.25 47.1357 179.663 47.1357 cv
179.997 47.1357 180.326 47.3018 180.326 47.6338 cv
180.326 48.2148 179.167 48.7959 178.003 48.7959 cv
175.431 48.7959 174.519 48.2969 172.941 48.2969 cv
171.945 48.2969 171.447 48.7959 170.701 48.7959 cv
170.453 48.7959 170.286 48.7119 170.286 48.3799 cv
170.286 47.8818 170.785 47.2178 171.115 46.6377 cv
170.949 46.4717 li
168.543 48.1318 166.72 48.7959 163.646 48.7959 cv
160.163 48.7959 157.176 47.0527 157.176 43.2354 cv
157.176 38.4209 161.324 34.0234 163.399 29.875 cv
162.816 29.9585 160.163 31.0356 159.331 31.0356 cv
159 31.0356 158.917 30.9536 158.917 30.3745 cv
158.917 29.7915 168.625 26.3892 168.877 26.3892 cv
169.208 26.3892 169.457 26.7217 169.457 26.9707 cv
169.457 28.4639 161.491 39.2529 161.491 42.9043 cv
161.491 45.5586 162.571 47.3018 164.726 47.3018 cv
cp
level3{
gsave
clp
[-9.79451e-07 22.4072 -22.4072 -9.79451e-07 171.449 26.3892 ]ct
/0 /Gradient get_res clonedict shfill grestore
}if
level3 not{
gsave
[-9.79451e-07 22.4072 -22.4072 -9.79451e-07 171.449 26.3892 ]ct
clp
/0 /Gradient get_res exec grestore
}if
np
205.306 27.0532 mo
200.573 27.0532 193.854 32.8628 193.854 37.9248 cv
194.766 38.0078 195.596 38.3389 196.592 38.3389 cv
199.911 38.3389 202.484 37.4268 204.558 35.7661 cv
206.882 33.9399 208.873 31.4517 208.873 29.2935 cv
208.873 27.3018 206.965 27.0532 205.306 27.0532 cv
cp
209.457 24.729 mo
211.53 24.729 213.523 25.8076 213.523 28.2969 cv
213.523 30.6221 210.949 34.6885 208.045 36.7627 cv
204.725 39.085 200.99 39.833 197.42 39.833 cv
196.342 39.833 195.015 39.751 194.019 39.502 cv
194.019 43.4014 198.003 46.4717 201.155 46.4717 cv
204.641 46.4717 207.213 45.1436 208.459 44.2314 cv
209.207 43.6504 209.705 43.1523 210.203 43.1523 cv
210.45 43.1523 210.617 43.3174 210.617 43.6504 cv
210.617 44.8135 206.467 47.0527 205.803 47.3838 cv
203.147 48.7119 201.24 48.7959 198.585 48.7959 cv
193.189 48.7959 188.708 45.3936 188.708 39.751 cv
188.708 30.7871 201.572 24.729 209.457 24.729 cv
cp
level3{
gsave
clp
[-1.05202e-06 24.0674 -24.0674 -1.05202e-06 201.115 24.729 ]ct
/0 /Gradient get_res clonedict shfill grestore
}if
level3 not{
gsave
[-1.05202e-06 24.0674 -24.0674 -1.05202e-06 201.115 24.729 ]ct
clp
/0 /Gradient get_res exec grestore
}if
np
229.371 27.7178 mo
226.963 34.0234 223.894 40.5811 218.668 45.2256 cv
220.078 45.3105 221.403 45.8076 222.816 45.8076 cv
223.479 45.8076 224.391 45.5586 224.723 45.5586 cv
224.973 45.5586 225.056 45.8076 225.056 46.0566 cv
225.056 47.5498 222.899 48.7959 220.659 48.7959 cv
219.165 48.7959 218.25 48.2148 216.509 48.2148 cv
215.346 48.2148 214.848 48.7959 214.6 48.7959 cv
214.353 48.7959 214.269 48.6299 214.269 48.3799 cv
214.269 48.1318 214.516 47.7998 214.848 47.3838 cv
218.668 42.0732 224.806 28.2969 224.806 27.8838 cv
224.806 27.3862 221.904 27.4688 221.904 27.0532 cv
221.904 26.5547 222.318 26.3892 222.732 26.2231 cv
227.047 24.3975 230.617 17.8413 232.441 14.5225 cv
233.189 13.1958 236.924 8.29834 237.917 8.29834 cv
238.087 8.29834 238.333 8.38037 238.333 8.63135 cv
238.333 9.04443 237.834 9.12891 237.338 9.87451 cv
234.765 13.6919 232.029 20.8286 229.955 26.2231 cv
231.864 26.2231 233.851 26.3892 233.851 26.7217 cv
233.851 27.4688 232.607 27.6333 229.371 27.7178 cv
cp
level3{
gsave
clp
[-1.77023e-06 40.498 -40.498 -1.77023e-06 226.3 8.29834 ]ct
/0 /Gradient get_res clonedict shfill grestore
}if
level3 not{
gsave
[-1.77023e-06 40.498 -40.498 -1.77023e-06 226.3 8.29834 ]ct
clp
/0 /Gradient get_res exec grestore
}if
np
70.6606 19.5767 mo
70.1152 19.5767 69.6367 19.4766 69.2251 19.2759 cv
68.8135 19.0752 68.4712 18.8047 68.1987 18.4653 cv
67.9258 18.126 67.7197 17.7295 67.5811 17.2764 cv
67.4419 16.8237 67.3726 16.3452 67.3726 15.8408 cv
67.3726 15.3159 67.4521 14.8115 67.6118 14.3281 cv
67.7715 13.8442 68.0313 13.4067 68.3916 13.0156 cv
68.6382 12.7588 68.9214 12.54 69.2407 12.3599 cv
69.5596 12.1797 69.8965 12.0508 70.2515 11.9736 cv
70.6069 11.8965 70.9644 11.876 71.3247 11.9121 cv
71.6846 11.9482 72.0298 12.0483 72.3589 12.2129 cv
72.4517 12.2646 72.5542 12.3496 72.6675 12.4678 cv
72.7808 12.5859 72.8682 12.7095 72.9302 12.8384 cv
72.9917 12.9668 73.0122 13.0903 72.9917 13.209 cv
72.9712 13.3271 72.8735 13.417 72.6987 13.479 cv
72.5649 13.52 72.4692 13.4941 72.4126 13.4019 cv
72.356 13.3091 72.2842 13.1958 72.1968 13.062 cv
72.1094 12.9282 71.9756 12.8047 71.7954 12.6914 cv
71.6152 12.5786 71.3398 12.522 70.9692 12.522 cv
70.5371 12.522 70.1641 12.6045 69.8501 12.7686 cv
69.5366 12.9336 69.2764 13.1548 69.0708 13.4326 cv
68.8647 13.7104 68.7104 14.0293 68.6074 14.3896 cv
68.5044 14.75 68.4531 15.1255 68.4531 15.5166 cv
68.4531 15.9077 68.5098 16.2964 68.623 16.6821 cv
68.7363 17.0684 68.9009 17.4155 69.1172 17.7241 cv
69.333 18.0332 69.603 18.2827 69.9272 18.4731 cv
70.2515 18.6636 70.6299 18.7588 71.062 18.7588 cv
71.2271 18.7588 71.4097 18.7383 71.6104 18.6968 cv
71.811 18.6558 72.0088 18.5938 72.2046 18.5117 cv
72.3999 18.4292 72.5801 18.3262 72.7446 18.2031 cv
72.9097 18.0791 73.0327 17.9404 73.1152 17.7861 cv
73.2231 18.064 li
72.6572 19.0723 71.8032 19.5767 70.6606 19.5767 cv
cp
0.4 0.3 0.7 0.25 cmyk
f
78.4727 19.4224 mo
78.4727 19.2988 li
78.7402 19.2988 78.9077 19.2603 78.9741 19.1831 cv
79.0415 19.106 79.0747 18.9282 79.0747 18.6504 cv
79.0747 14.5132 li
79.0747 14.2661 79.0464 14.0347 78.9897 13.8184 cv
78.9331 13.6025 78.8433 13.4146 78.7197 13.2549 cv
78.5962 13.0957 78.439 12.9668 78.2485 12.8691 cv
78.0581 12.7715 77.8296 12.7227 77.562 12.7227 cv
77.1294 12.7227 76.7515 12.8438 76.4272 13.0854 cv
76.103 13.3271 75.8638 13.6436 75.7095 14.0347 cv
75.689 14.0762 75.6606 14.1533 75.6245 14.2661 cv
75.5884 14.3794 75.5703 14.4565 75.5703 14.498 cv
75.5703 18.6968 li
75.5703 18.8408 75.5757 18.9541 75.5859 19.0366 cv
75.5962 19.1187 75.6216 19.1777 75.6631 19.2139 cv
75.7041 19.25 75.7632 19.2734 75.8403 19.2832 cv
75.9175 19.2939 76.0229 19.2988 76.1567 19.2988 cv
76.1567 19.4224 li
73.9185 19.4224 li
73.9185 19.2988 li
74.1758 19.2988 74.3301 19.2549 74.3818 19.1675 cv
74.4331 19.0801 74.459 18.9077 74.459 18.6504 cv
74.459 9.41895 li
74.459 9.24414 74.4512 9.12549 74.4355 9.06396 cv
74.4204 9.00195 74.3921 8.96582 74.3511 8.95605 cv
74.3096 8.94531 74.2554 8.94287 74.189 8.94824 cv
74.1216 8.95313 74.0366 8.94043 73.9341 8.90918 cv
73.9341 8.83203 li
75.2769 8.41553 li
75.5703 8.43066 li
75.5703 13.3398 li
75.8276 12.959 76.1187 12.6533 76.4429 12.4214 cv
76.7671 12.1899 77.1011 12.0332 77.4458 11.9507 cv
77.7905 11.8682 78.1279 11.8604 78.457 11.9277 cv
78.7866 11.9941 79.0771 12.1333 79.3296 12.3442 cv
79.5815 12.5552 79.7876 12.8384 79.9468 13.1934 cv
80.1064 13.5483 80.186 13.978 80.186 14.4824 cv
80.186 18.6968 li
80.186 18.8306 80.189 18.936 80.1938 19.0132 cv
80.1987 19.0903 80.2197 19.1494 80.2554 19.1909 cv
80.2915 19.2319 80.3457 19.2603 80.4175 19.2759 cv
80.4897 19.291 80.5874 19.2988 80.7109 19.2988 cv
80.7109 19.4224 li
78.4727 19.4224 li
cp
f
87.0024 13.9883 mo
86.9355 13.731 86.8379 13.4971 86.7095 13.2861 cv
86.5806 13.0752 86.4136 12.9053 86.2075 12.7764 cv
86.0015 12.6479 85.7446 12.5835 85.4355 12.5835 cv
85.1064 12.5835 84.8232 12.6426 84.5864 12.7612 cv
84.3501 12.8794 84.1489 13.0391 83.9844 13.2397 cv
83.8198 13.4404 83.6885 13.6719 83.5908 13.9346 cv
83.4932 14.1968 83.4233 14.4722 83.3823 14.7603 cv
87.1338 14.7603 li
87.1133 14.5029 87.0693 14.2456 87.0024 13.9883 cv
cp
83.3516 15.3931 mo
83.3618 15.7944 83.416 16.1885 83.5137 16.5742 cv
83.6113 16.96 83.7607 17.3076 83.9614 17.6162 cv
84.1621 17.9248 84.4243 18.1719 84.7485 18.3574 cv
85.0728 18.5425 85.4663 18.6348 85.9297 18.6348 cv
86.1255 18.6348 86.3335 18.6196 86.5552 18.5889 cv
86.7759 18.5581 86.9897 18.5088 87.1958 18.4424 cv
87.4014 18.375 87.5942 18.2827 87.7744 18.1641 cv
87.9546 18.0459 88.1011 17.894 88.2144 17.709 cv
88.3687 17.9404 li
88.0806 18.4858 87.6768 18.895 87.1567 19.168 cv
86.6372 19.4404 86.0737 19.5767 85.4663 19.5767 cv
84.9214 19.5767 84.4526 19.479 84.062 19.2832 cv
83.6704 19.0879 83.3491 18.8228 83.0972 18.4883 cv
82.8447 18.1538 82.6597 17.7627 82.541 17.3154 cv
82.4229 16.8672 82.3638 16.3965 82.3638 15.9023 cv
82.3638 15.4087 82.4277 14.9224 82.5566 14.4438 cv
82.6851 13.9653 82.8833 13.5381 83.1509 13.1626 cv
83.4185 12.7871 83.7554 12.4834 84.1621 12.252 cv
84.5688 12.02 85.0498 11.9043 85.6055 11.9043 cv
86.1099 11.9043 86.5342 11.9971 86.8789 12.1821 cv
87.2236 12.3677 87.5068 12.6143 87.728 12.9233 cv
87.9492 13.2319 88.1167 13.5869 88.23 13.9883 cv
88.3433 14.3896 88.4204 14.8066 88.4614 15.2388 cv
88.4771 15.3931 li
83.3516 15.3931 li
cp
f
95.3472 19.4224 mo
89.5269 19.4224 li
89.5269 18.9282 li
93.9268 12.707 li
90.6538 12.707 li
90.3862 12.707 90.2139 12.7686 90.1367 12.8926 cv
90.0596 13.0156 90.0107 13.2012 89.9902 13.4482 cv
89.8359 13.4482 li
89.8667 12.0742 li
95.3159 12.0742 li
95.3159 12.5835 li
90.9009 18.7896 li
94.2817 18.7896 li
94.4775 18.7896 94.6343 18.7764 94.7524 18.751 cv
94.8711 18.7251 94.9663 18.6787 95.0381 18.6118 cv
95.1104 18.5449 95.167 18.4526 95.208 18.334 cv
95.2495 18.2158 95.2852 18.064 95.3159 17.8789 cv
95.4707 17.9097 li
95.3472 19.4224 li
cp
f
148.585 56.3682 mo
148.774 56.1914 148.952 55.9971 149.119 55.7861 cv
149.285 55.5752 149.449 55.3643 149.61 55.1533 cv
149.771 54.9424 149.934 54.7334 150.101 54.5283 cv
150.267 54.3232 150.451 54.1367 150.651 53.9697 cv
150.761 53.8701 150.886 53.8037 151.025 53.7705 cv
151.164 53.7373 151.294 53.7314 151.417 53.7539 cv
151.539 53.7764 151.642 53.8232 151.725 53.8955 cv
151.808 53.9678 151.85 54.0596 151.85 54.1699 cv
151.85 54.2373 151.828 54.2949 151.783 54.3447 cv
151.739 54.3955 151.689 54.4365 151.633 54.4697 cv
151.211 54.7588 150.814 55.0693 150.443 55.4033 cv
150.07 55.7354 149.69 56.0635 149.301 56.3857 cv
148.585 56.3682 li
cp
153.432 68.3945 mo
145.837 68.3945 li
145.837 68.2275 li
146.181 68.2275 146.398 68.1807 146.487 68.0869 cv
146.576 67.9922 146.62 67.7676 146.62 67.4121 cv
146.62 58.1006 li
146.62 57.7451 146.576 57.5205 146.487 57.4268 cv
146.398 57.332 146.181 57.2852 145.837 57.2852 cv
145.837 57.1182 li
153.265 57.1182 li
153.283 58.834 li
153.049 58.834 li
152.994 58.4121 152.863 58.1533 152.658 58.0596 cv
152.453 57.9648 152.156 57.918 151.767 57.918 cv
148.402 57.918 li
148.213 57.918 148.105 57.9375 148.078 57.9756 cv
148.049 58.0146 148.036 58.123 148.036 58.3008 cv
148.036 62.1152 li
151.417 62.1152 li
151.594 62.1152 151.75 62.1064 151.883 62.0908 cv
152.016 62.0732 152.125 62.0381 152.208 61.9814 cv
152.292 61.9268 152.355 61.8428 152.4 61.7324 cv
152.444 61.6211 152.477 61.4717 152.5 61.2822 cv
152.716 61.2822 li
152.716 63.7979 li
152.5 63.7979 li
152.477 63.5977 152.444 63.4424 152.4 63.3311 cv
152.355 63.2197 152.292 63.1338 152.208 63.0732 cv
152.125 63.0117 152.019 62.9727 151.891 62.9561 cv
151.763 62.9395 151.605 62.9316 151.417 62.9316 cv
148.036 62.9316 li
148.036 67.2783 li
148.036 67.3789 148.066 67.4541 148.127 67.5029 cv
148.188 67.5537 148.26 67.584 148.343 67.5947 cv
148.427 67.6064 148.516 67.6084 148.611 67.6035 cv
148.705 67.5977 148.785 67.5947 148.852 67.5947 cv
151.6 67.5947 li
151.867 67.5947 152.097 67.5811 152.292 67.5537 cv
152.486 67.5254 152.661 67.4678 152.816 67.3789 cv
152.971 67.29 153.11 67.1709 153.232 67.0205 cv
153.354 66.8701 153.471 66.668 153.582 66.4121 cv
153.849 66.4121 li
153.432 68.3945 li
cp
f
158.93 68.582 mo
158.269 68.582 157.688 68.46 157.189 68.2168 cv
156.69 67.9736 156.275 67.6455 155.945 67.2344 cv
155.614 66.8223 155.365 66.3418 155.196 65.793 cv
155.027 65.2432 154.943 64.6631 154.943 64.0518 cv
154.943 63.415 155.04 62.8037 155.233 62.2178 cv
155.426 61.6309 155.742 61.1006 156.178 60.626 cv
156.478 60.3145 156.821 60.0488 157.208 59.8311 cv
157.595 59.6123 158.003 59.4561 158.434 59.3623 cv
158.865 59.2695 159.298 59.2441 159.735 59.2881 cv
160.171 59.3311 160.589 59.4531 160.99 59.6533 cv
161.101 59.7158 161.226 59.8184 161.364 59.9619 cv
161.5 60.1055 161.607 60.2549 161.682 60.4111 cv
161.756 60.5674 161.782 60.7168 161.756 60.8604 cv
161.732 61.0039 161.613 61.1133 161.401 61.1875 cv
161.239 61.2373 161.124 61.2061 161.054 61.0947 cv
160.986 60.9814 160.899 60.8447 160.792 60.6826 cv
160.687 60.5205 160.524 60.3701 160.306 60.2334 cv
160.087 60.0957 159.753 60.0273 159.304 60.0273 cv
158.781 60.0273 158.328 60.127 157.947 60.3271 cv
157.567 60.5264 157.251 60.7949 157.001 61.1318 cv
156.752 61.4688 156.565 61.8555 156.441 62.292 cv
156.316 62.7295 156.253 63.1846 156.253 63.6592 cv
156.253 64.1328 156.322 64.6045 156.459 65.0723 cv
156.596 65.54 156.796 65.9609 157.058 66.335 cv
157.32 66.71 157.648 67.0127 158.041 67.2432 cv
158.434 67.4746 158.892 67.5898 159.417 67.5898 cv
159.617 67.5898 159.837 67.5645 160.082 67.5146 cv
160.325 67.4648 160.565 67.3896 160.802 67.29 cv
161.039 67.1904 161.257 67.0654 161.457 66.916 cv
161.657 66.7666 161.806 66.5977 161.907 66.4102 cv
162.038 66.7471 li
161.351 67.9707 160.316 68.582 158.93 68.582 cv
cp
f
169.899 61.8154 mo
169.612 61.2354 169.256 60.792 168.832 60.4863 cv
168.408 60.1807 167.953 60.0146 167.465 59.9902 cv
166.978 59.9648 166.529 60.0928 166.118 60.374 cv
165.706 60.6543 165.369 61.0908 165.107 61.6836 cv
164.845 62.2764 164.72 63.0283 164.733 63.9395 cv
164.745 64.7881 164.898 65.5029 165.191 66.083 cv
165.484 66.6631 165.843 67.1025 166.267 67.4023 cv
166.692 67.7021 167.147 67.8613 167.634 67.8799 cv
168.121 67.8984 168.57 67.7646 168.982 67.4775 cv
169.393 67.1904 169.734 66.7539 170.001 66.167 cv
170.27 65.5811 170.392 64.8379 170.367 63.9395 cv
170.342 63.1035 170.186 62.3955 169.899 61.8154 cv
cp
171.181 66.5322 mo
170.763 67.2246 170.236 67.7422 169.599 68.0859 cv
168.962 68.4287 168.28 68.6035 167.549 68.6104 cv
166.82 68.6162 166.136 68.4473 165.5 68.1045 cv
164.864 67.7607 164.336 67.2432 163.918 66.5508 cv
163.5 65.8584 163.292 64.9873 163.292 63.9395 cv
163.292 62.8916 163.5 62.0176 163.918 61.3193 cv
164.336 60.6201 164.864 60.0986 165.5 59.7559 cv
166.136 59.4131 166.816 59.2412 167.541 59.2412 cv
168.277 59.2412 168.962 59.416 169.599 59.7646 cv
170.236 60.1143 170.763 60.6387 171.181 61.3379 cv
171.599 62.0361 171.808 62.9033 171.808 63.9395 cv
171.808 64.9756 171.599 65.8398 171.181 66.5322 cv
cp
f
173.191 63.4346 mo
173.191 62.4043 li
177.833 62.4043 li
177.833 63.4346 li
173.191 63.4346 li
cp
f
186.584 62.0674 mo
186.341 61.5059 186.039 61.0879 185.676 60.8135 cv
185.315 60.5391 184.921 60.3896 184.498 60.3643 cv
184.073 60.3389 183.68 60.4238 183.318 60.6172 cv
182.957 60.8105 182.654 61.1035 182.41 61.4971 cv
182.167 61.8896 182.045 62.3545 182.045 62.8916 cv
182.045 65.6055 li
182.045 66.0791 182.167 66.4883 182.41 66.8311 cv
182.654 67.1748 182.957 67.4336 183.318 67.6084 cv
183.68 67.7832 184.073 67.8613 184.498 67.8428 cv
184.921 67.8232 185.315 67.6865 185.676 67.4307 cv
186.039 67.1748 186.341 66.7852 186.584 66.2607 cv
186.828 65.7363 186.95 65.0566 186.95 64.2197 cv
186.95 63.3467 186.828 62.6289 186.584 62.0674 cv
cp
180.866 68.3945 mo
180.679 68.3945 li
180.698 56.2646 li
180.698 56.0527 180.657 55.9092 180.576 55.834 cv
180.495 55.7598 180.392 55.7129 180.267 55.6943 cv
180.142 55.6748 180.005 55.6719 179.855 55.6846 cv
179.706 55.6973 179.568 55.6846 179.443 55.6475 cv
179.443 55.5537 li
179.531 55.5283 179.699 55.4814 179.949 55.4131 cv
180.199 55.3447 180.466 55.2793 180.753 55.2168 cv
181.041 55.1543 181.309 55.1045 181.558 55.0674 cv
181.808 55.0293 181.97 55.0293 182.045 55.0674 cv
182.045 60.9443 li
182.357 60.4082 182.75 59.9961 183.224 59.709 cv
183.699 59.4219 184.248 59.2783 184.872 59.2783 cv
185.483 59.2783 186.017 59.4131 186.472 59.6807 cv
186.927 59.9492 187.302 60.3018 187.595 60.7393 cv
187.888 61.1758 188.104 61.6719 188.241 62.2266 cv
188.378 62.7822 188.435 63.3496 188.41 63.9307 cv
188.384 64.5107 188.279 65.0781 188.091 65.6338 cv
187.904 66.1885 187.632 66.6846 187.277 67.1221 cv
186.921 67.5586 186.485 67.9111 185.966 68.1797 cv
185.449 68.4473 184.847 68.582 184.161 68.582 cv
183.611 68.582 183.122 68.501 182.691 68.3389 cv
182.26 68.1768 181.845 67.8955 181.447 67.4961 cv
180.866 68.3945 li
cp
f
191.927 56.7422 mo
191.765 56.8857 191.583 56.957 191.384 56.957 cv
191.185 56.957 191.003 56.8857 190.841 56.7422 cv
190.679 56.5986 190.598 56.3838 190.598 56.0967 cv
190.598 55.8096 190.679 55.5947 190.841 55.4502 cv
191.003 55.3076 191.185 55.2354 191.384 55.2354 cv
191.583 55.2354 191.765 55.3076 191.927 55.4502 cv
192.089 55.5947 192.17 55.8096 192.17 56.0967 cv
192.17 56.3838 192.089 56.5986 191.927 56.7422 cv
cp
189.98 68.3945 mo
189.98 68.2451 li
190.318 68.2451 190.539 68.2041 190.645 68.123 cv
190.751 68.042 190.804 67.8203 190.804 67.458 cv
190.804 60.7012 li
190.804 60.4893 190.789 60.3457 190.757 60.2705 cv
190.726 60.1963 190.679 60.1494 190.617 60.1299 cv
190.554 60.1113 190.47 60.1084 190.365 60.1211 cv
190.258 60.1338 190.125 60.1211 189.962 60.083 cv
189.962 59.9893 li
191.796 59.3535 li
192.152 59.3721 li
192.152 67.5146 li
192.152 67.7891 192.17 67.9795 192.208 68.0859 cv
192.246 68.1924 192.408 68.2451 192.695 68.2451 cv
192.695 68.3945 li
189.98 68.3945 li
cp
f
195.222 68.7129 mo
195.278 66.2236 li
195.427 66.1855 li
195.515 66.5732 195.68 66.8936 195.923 67.1494 cv
196.167 67.4053 196.442 67.5986 196.748 67.7295 cv
197.053 67.8613 197.377 67.9297 197.72 67.9365 cv
198.064 67.9424 198.376 67.8896 198.657 67.7764 cv
198.937 67.665 199.168 67.4961 199.349 67.2715 cv
199.531 67.0469 199.621 66.7666 199.621 66.4287 cv
199.621 66.0674 199.511 65.7646 199.293 65.5215 cv
199.075 65.2783 198.806 65.0596 198.488 64.8662 cv
198.169 64.6729 197.821 64.4893 197.44 64.3135 cv
197.059 64.1396 196.71 63.9365 196.392 63.7061 cv
196.074 63.4746 195.805 63.2002 195.587 62.8818 cv
195.369 62.5635 195.259 62.167 195.259 61.6934 cv
195.259 61.3066 195.333 60.96 195.484 60.6543 cv
195.633 60.3486 195.836 60.0957 196.092 59.8965 cv
196.348 59.6963 196.644 59.5439 196.982 59.4375 cv
197.318 59.332 197.667 59.2783 198.03 59.2783 cv
198.392 59.2783 198.732 59.3291 199.05 59.4287 cv
199.368 59.5283 199.702 59.6094 200.051 59.6719 cv
200.201 59.3721 li
200.294 59.3721 li
200.294 61.4502 li
200.164 61.4502 li
199.939 60.9131 199.615 60.5264 199.19 60.2891 cv
198.766 60.0518 198.345 59.9365 197.927 59.9434 cv
197.509 59.9492 197.147 60.0713 196.841 60.3076 cv
196.536 60.5449 196.382 60.876 196.382 61.2998 cv
196.382 61.6367 196.495 61.918 196.719 62.1426 cv
196.944 62.3672 197.222 62.5762 197.552 62.7695 cv
197.882 62.9629 198.245 63.1533 198.638 63.3408 cv
199.031 63.5283 199.393 63.7432 199.724 63.9863 cv
200.054 64.2295 200.332 64.5166 200.556 64.8477 cv
200.781 65.1777 200.894 65.5811 200.894 66.0547 cv
200.894 66.8154 200.613 67.4277 200.051 67.8896 cv
199.751 68.1387 199.415 68.3193 199.041 68.4316 cv
198.666 68.5439 198.286 68.6006 197.899 68.6006 cv
197.612 68.6006 197.325 68.5752 197.038 68.5254 cv
196.75 68.4756 196.463 68.4189 196.176 68.3574 cv
196.077 68.332 195.977 68.3076 195.876 68.2822 cv
195.777 68.2568 195.677 68.2393 195.578 68.2256 cv
195.528 68.2256 195.484 68.2979 195.447 68.4414 cv
195.409 68.585 195.378 68.6748 195.353 68.7129 cv
195.222 68.7129 li
cp
f
207.557 68.0859 mo
207.407 68.1924 207.248 68.2822 207.08 68.3574 cv
206.912 68.4316 206.736 68.4883 206.555 68.5254 cv
206.375 68.5635 206.208 68.582 206.059 68.582 cv
205.66 68.582 205.338 68.5127 205.095 68.376 cv
204.852 68.2393 204.662 68.0547 204.525 67.8232 cv
204.387 67.5928 204.293 67.3242 204.244 67.0186 cv
204.194 66.7129 204.168 66.3916 204.168 66.0547 cv
204.168 59.9717 li
202.765 59.9717 li
202.765 59.5781 li
204.113 59.4844 li
204.325 59.1348 204.478 58.7549 204.572 58.3428 cv
204.665 57.9307 204.787 57.5381 204.936 57.1631 cv
204.986 57.1514 205.042 57.126 205.105 57.0889 cv
205.167 57.0508 205.229 57.0195 205.292 56.9951 cv
205.354 56.9697 205.408 56.9639 205.451 56.9756 cv
205.495 56.9893 205.517 57.0322 205.517 57.1074 cv
205.517 59.4844 li
207.557 59.4844 li
207.557 59.9717 li
205.517 59.9717 li
205.517 66.0547 li
205.517 66.2295 205.532 66.4199 205.563 66.626 cv
205.594 66.832 205.651 67.0225 205.732 67.1963 cv
205.813 67.3711 205.925 67.5176 206.069 67.6367 cv
206.212 67.7549 206.396 67.8145 206.621 67.8145 cv
206.821 67.8145 207.014 67.792 207.201 67.749 cv
207.388 67.7051 207.57 67.627 207.744 67.5146 cv
207.894 67.7207 li
207.819 67.8584 207.707 67.9795 207.557 68.0859 cv
cp
f
212.91 68.3945 mo
209.916 68.3945 li
209.916 68.2451 li
210.24 68.2451 210.445 68.1982 210.533 68.1045 cv
210.62 68.0107 210.664 67.7959 210.664 67.458 cv
210.664 60.626 li
210.664 60.4268 210.651 60.2861 210.626 60.2051 cv
210.601 60.124 210.561 60.0771 210.504 60.0645 cv
210.449 60.0518 210.374 60.0488 210.28 60.0557 cv
210.186 60.0615 210.071 60.0459 209.933 60.0088 cv
209.933 59.915 li
211.599 59.3535 li
211.956 59.3721 li
211.956 61.2627 li
212.068 61.0254 212.202 60.7881 212.358 60.5518 cv
212.513 60.3145 212.689 60.1025 212.882 59.915 cv
213.076 59.7275 213.293 59.5752 213.537 59.4561 cv
213.781 59.3379 214.052 59.2783 214.351 59.2783 cv
214.526 59.2783 214.71 59.3291 214.904 59.4287 cv
215.097 59.5283 215.207 59.6846 215.231 59.8965 cv
215.231 59.959 215.228 60.04 215.222 60.1396 cv
215.215 60.2393 215.194 60.3428 215.156 60.4482 cv
215.119 60.5547 215.069 60.6514 215.006 60.7383 cv
214.944 60.8262 214.863 60.8887 214.763 60.9258 cv
214.638 60.9639 214.542 60.9414 214.473 60.8604 cv
214.404 60.7793 214.338 60.6826 214.277 60.5703 cv
214.214 60.458 214.142 60.3486 214.061 60.2432 cv
213.98 60.1367 213.871 60.083 213.734 60.083 cv
213.609 60.083 213.474 60.127 213.332 60.2148 cv
213.187 60.3018 213.047 60.4082 212.91 60.5322 cv
212.773 60.6572 212.648 60.7881 212.536 60.9258 cv
212.423 61.0635 212.335 61.1816 212.273 61.2813 cv
212.099 61.5439 212.011 61.8242 212.011 62.124 cv
212.011 62.4111 212.011 62.6982 212.011 62.9854 cv
212.011 67.5146 li
212.011 67.7021 212.027 67.8457 212.058 67.9453 cv
212.089 68.0449 212.139 68.1172 212.208 68.1611 cv
212.277 68.2041 212.367 68.2295 212.48 68.2354 cv
212.591 68.2422 212.735 68.2451 212.91 68.2451 cv
212.91 68.3945 li
cp
f
223.055 61.8154 mo
222.768 61.2354 222.413 60.792 221.988 60.4863 cv
221.564 60.1807 221.109 60.0146 220.622 59.9902 cv
220.134 59.9648 219.685 60.0928 219.274 60.374 cv
218.862 60.6543 218.525 61.0908 218.263 61.6836 cv
218.001 62.2764 217.876 63.0283 217.889 63.9395 cv
217.901 64.7881 218.054 65.5029 218.347 66.083 cv
218.64 66.6631 219 67.1025 219.423 67.4023 cv
219.848 67.7021 220.303 67.8613 220.791 67.8799 cv
221.277 67.8984 221.726 67.7646 222.138 67.4775 cv
222.549 67.1904 222.89 66.7539 223.158 66.167 cv
223.426 65.5811 223.548 64.8379 223.523 63.9395 cv
223.499 63.1035 223.342 62.3955 223.055 61.8154 cv
cp
224.337 66.5322 mo
223.919 67.2246 223.392 67.7422 222.755 68.0859 cv
222.119 68.4287 221.436 68.6035 220.706 68.6104 cv
219.976 68.6162 219.292 68.4473 218.656 68.1045 cv
218.02 67.7607 217.493 67.2432 217.075 66.5508 cv
216.657 65.8584 216.448 64.9873 216.448 63.9395 cv
216.448 62.8916 216.657 62.0176 217.075 61.3193 cv
217.493 60.6201 218.02 60.0986 218.656 59.7559 cv
219.292 59.4131 219.972 59.2412 220.697 59.2412 cv
221.433 59.2412 222.119 59.416 222.755 59.7646 cv
223.392 60.1143 223.919 60.6387 224.337 61.3379 cv
224.755 62.0361 224.964 62.9033 224.964 63.9395 cv
224.964 64.9756 224.755 65.8398 224.337 66.5322 cv
cp
f
%ADOBeginClientInjection: EndPageContent "AI11EPS"
userdict /annotatepage 2 copy known {get exec}{pop pop} ifelse
%ADOEndClientInjection: EndPageContent "AI11EPS"
grestore
grestore
pgrs
%%PageTrailer
%ADOBeginClientInjection: PageTrailer Start "AI11EPS"
[/EMC AI11_PDFMark5[/NamespacePop AI11_PDFMark5
%ADOEndClientInjection: PageTrailer Start "AI11EPS"
[
[/CSA [/0 ]]
[/Gradient [/0 ]]
] del_res
Adobe_AGM_Image/pt gx
Adobe_CoolType_Core/pt get execAdobe_AGM_Core/pt gx
currentdict Adobe_AGM_Utils eq {end} if
%%Trailer
Adobe_AGM_Image/dt get exec
Adobe_CoolType_Core/dt get execAdobe_AGM_Core/dt get exec
%%EOF
%AI9_PrintingDataEnduserdict /AI9_read_buffer 256 string putuserdict begin/ai9_skip_data{	mark	{		currentfile AI9_read_buffer { readline } stopped		{		}		{			not			{				exit			} if			(%AI9_PrivateDataEnd) eq			{				exit			} if		} ifelse	} loop	cleartomark} defenduserdict /ai9_skip_data get exec%AI9_PrivateDataBegin%!PS-Adobe-3.0 EPSF-3.0%%Creator: Adobe Illustrator(R) 13.0%%AI8_CreatorVersion: 13.0.2%%For: (Louise Paquin) ()%%Title: (chezBouquet.eps)%%CreationDate: 1/26/12 2:23 PM%AI9_DataStream%Gb"+`M*`+Pe,KgF%V2mmjq-]>1l%U30H)hC-8*066j1AhCqchIlfdUO&9Z(^7W<?j%Fk#I<F'hCN(ZftcEQ,<[Z:cd^Xf]VQh:g_%m:K)5aXf#,D=0gjYnf@KFTQ6BF$)O;mnV.7HlG-!3SuPCkZ-otLSn!rYheWpUOKu1Bm"b#[;>A'Xe":L*Pn:Mp3kG*FhVJrX]kZK%Z]ot%mT5jZW7'q$ecse]B->F*p'\cMX7:4TH4]c#ZB";pf\WM<?h[tW(_o7kpfY5c)E+=,(c,nh4,)F;]]&>.kM9f*!%Is\'6#L?%^429`&"r2krjWU^2>`#4D:%XV5Mb;'pS-,SX#>ci$,E&NYfQ<TDXt,K$$9"E'tBN7Z%,u;D.T9Rj81QTU2S<?q\l]7hJ<]`rF;^?%]3/d$jElO8k5Ts".gWGHkqR9mfSY!YgW]a16<jl.gLd>q[@jYi>A;WL=G&4^rlkoGC;$BU!3=jg%?\rDCga2G_!Yt)8(;$Di<3B@%W4gf.6eJQ/KM9tA)6i=r@qAB`J6r?%!9@`d2c-iK1o&11iZL46N:"M4Cr<i#opSCqp6rkBhga'i2WD.8X_bef#l._epck#C)+u)s%0SnEiCCm)sAiu)^j>M4-K"YZUVfo0KgbLH`*$ZC&.KrrHG,[BuX_$>(Za*B%^TrP8!u)m\IV]sQHQN.r6i:4@$IlNS?e`T4[Z,KJ%S*sB-fUI55*k(W%r8r:Wb4Dj&k>`ueAf,!H0Z5jmr*\tI`)^<&Xmd#'``C&&[ON&tB<d8:MFD>[WSlT)`Ug<XV1SFl(%/sV1VSeY%ccC=8VqecKbS'op<_*o'``>Wo:s/No,5dF;O<XU^F:0J+0@GNgnJbAZ^MtO]'9A(diGYM2s$\?aKQAn-H%'R`FQ%.S;lLm5ed!pB%*]"V#9DG!'1?FHXj3G1)m"i3ROgO$gCk_N?D]FU8OK%Ah]OLXh[R0h$KpaIH([8ipp^O4_ouGsK3C<3o[R0i[2m4Du$1jGF`u.;M%&9EsU=Yn'Y\W3eZDo*<fS?YT.))%SJ8!`i-(@m)pO?/LtU^h`-eU/1t_r'+(jW!GoSoA'7NGXcgb`YN*kRMZoB40s>)&??eBg^*I%;HO]&04[eFmu/9.S`aRu+m-'S66"sFX^lSrSbr#,raF#R1Kg/lc'^LQ6A9kjIUd6X5+*_Eel]83:U08mFGnqpnqXng)%oZ)='<$Q%Y6/5ZSAa8=2[!3u=6AUa\L/5?qS@[7.[oYCZM72m0E4!AIujWkT?NJa1*ljcIsdm'a8b^+&FfE:OLYJdPL&ikpg="L'_m%Q0E5RK%8gT51s7/srbhqH1q8^iHCsR+gn2IO$J!Y*O0@4>l7E;NpMumrN?aN-][(QJ=LZS%UGp@5A_dX\T]9Q"F%.ddO`)SI9!UI!lU"05:%b1IBBbPqnj^uFLM2o+A/Op<3H6P"QIBZ'$n[R5+kH%X*IW>E\[_"]O@JNY%AR5ZTATF]YcU3a`?]\u.PDWOlU2V^TdaCB"<m1bP3%mD6UCq4LW+4m^5`I@'Af!TJIqNM1V2B[QeLJR?@+?!"MUOmTdlT1VWXcs:'.Hk,?ZrV35%TD/;Y&&"[E5QD2,"J5Z1-U_3+>PBcA%R"u2j>=$*r#'^1+E/Z!$OS<%e=E,q2%R+*I@g-:U9]+;U_V?K@*fc./6X1hH6GaM:VOq>:-iLoe),pH?E=MB%S36A.B_?(>n.TN>%j+M0tHl)#P)+*[qe76;?KJ?0P@bd(f3$R9ciY?HP1u!!UA,Mi-D3PW7ml]Gm/Ft2u$#<H_q$CalT<T+No7/1JSHi<XOV&]#&Kpcm%4YWnri2A3eLbnbFHZ"C\5]=;N$:R6XXZKArE'*+ah_Au2os3QZcAaWEM$ljA"Ym'B/-FWAD3RllhoqQYU=<]l%+YR.P!&C_.>R^$%(onkPKR*>.!^DL8]HM@U*Rl7`:f&F0TtnDMl'+i276cseHtM1=I*e9*7tC$5dX395>(McInT`m#%r8rD$'%H;MOGLD>+-e`TfF.!%AiWUK.bk>e16cPjGtrIDc@`8C7NnoCXZXT,e6_4$IZsK!I6^A(O?fp@ge6sD&NK6E\VJ`<[S1uoeXg`uQA@88hdU;MmiekbiY/Vn%3b457^#P]X/TZYlehrj/h78h$dLtUE>?U5aS1TIHnL,2mQ,W<f`BYJ[]4ND_)RUriY#mu;Yq=(rca(LAk@qWgDI,;]pV[C_=2[uM%a!t6p!l5Nr<Ht1HKsk0e+^-%ce]Rk)#=OUTS6PEU%2#1qK[V=pn"G+R9u;7uisKg$@9-uc`m8*A@boNY<eMAr-^$>M\#6luqA(>i%A\+FP\p:Ca.p=Uo6Th5:JpN!-n3-]h=<Xm;1Kl-q1F,W;&$[1YP2SZ<f&)_l<h>@R;JQ?9*j3-O*m^0Th#K02hZI+(k*Yf14k505%_7RWiN8j%?cRo'*Y4Kd^iPK_K3@j),OQU(Y88j-jmAP]Wrkq`_a53N<oe7IlA(;4ZVo]oK4u*TB9icnCKi^kl]GRZ6Wed4?4"a*B%RIigK#f9iM5"S9r0>cg*fk'N<k8q_iGf>?d<j\X*Fd4h`aEiQo^8(GC0gJKENEe?1a'9j9W[0t_4gsp[[of/rr?9@bq5m`I-$p6B%Sh[RihM5brZI]f7PbebT8s(oCcX)YV&*0`s%>V=lN.P5Q\g,X:,l*03&`&`);oEO0(@`VA$:M%-ondSORD;(iXS<`'(NJ;U[HE+>%QKBfX]qG-c32c>#@Ml;!=S\)i*J#oqkQB<q-@3NKi2>7o.-c6O#/Ui:i=buVX+e&NoDma,jFQGYHcu+f`Mk$85poHs=B:`O[D`u:%q_%._pbACOTZi]4\H$gfT39$m2G`i\<n!=)"_1!n"`-%YZ0.f_E:/K+Nd)G\'t)n0M$?@lP-u((7;k`lN-trTMrZDM5"Am*EJa%_%gf="D3"Oar[:4D=U-TP,C^`^HTc,N0A&g<dY@'O_RME7YX?1l./6>^5(im`B7$8j^_K_I1V@8,%2O(Z`7AAm"IZ%]KMBjYBW46$^%0]H)5%K#u:[B@Xj'I@PQpmr]NS=AY_H0cBN/.LS>^G0b!R+u?PS.\DnYN$ecM-gtc69,Ne&p+l!Kko[\^I5N,8GA#ZYqqF,K2b(X%CFDCqMT&P"",sHCB+pe<;=7AV;)!&7C3_qn'\X,@D6Z%K>iZ[7cCTo0)0@LpF3@0E.)Tjr@ESC9^tFZ3(jjR*3;_Yrl9=;6C?C[X%(q&PD"'Xq5k;AXi`OKu-U^?S2H$NDW>2ll+Xi:>n10kTd=(7"3CirC:%ALr\WQCWWTBYDOe*W;\Toi.u=Dq@2M\>[fg9(TOq]r&"%^R(I277CF0)0H72@Omn6b3]Da^\Lg5F,HG$IAr0DpH#G%&`;'0l-=0'(j<I.:Z(nRG+`uaNJ7,N9=bf'DmtI?lUe99loo2,Fu%8:%7cto:DV#*5fg73(2u7a($H?GZg]O5"k-p.T\QZ=dkJHc_HFT;^PheCq'%I66=TRMX]>NbR\pU1,3pn<dZA%/>J"5?\FBTTtd9@M`%"XYY+T8bk>WC)$5c($sZPA2d8;nb2X\QPTuq(oh2=WY7YCUKU$]it0?=e@OeK_p'B^,O#APub"'`Vo&%r0p#(J".R%>0[%\/<'tW%G-*]:em$PiO8^7_]mR1bFP,iK-J1f7Er0(jl?!\1C.PJ_aM+eL\ebg8bB2BQ2aB`$T49d&::n#?S_ZH3FX'4sE*T*&].(\.<GU34%=b>r_dJSOmJit&18IX(#]),kPPGW80-"CNpm=\nqd]56o?rP[_bHK[fg1f'X*[sq:\s&NbbSjV7>A.P2AfbK!"#$\V<uJ.R>Xc.0%FQMHgi<nf>iUYoIl#P^fl,"O+0#KG"AqdBC>U?t=F;=#VW%4YoTZa7VUW]LWU!$IQN1#6(r+#5-<9Pg4X/)nm\dI`FX"2\$^fSPF%p#YG]9jCHQZH"S5liN,$L,n5(i$\+%(_8egm8Z\uAb=%@:L<#DPo0h&\:TXAbf.&h^AL[DTC,<,^@Y3,R5:N,hn(XnF+?&2RBrR$%pG;Jm`-BZ$!&QnNG+]+aTkmapJP7a=2OG,D9T'En-3U)B!#&<5F&W1*6UP87[dD_MmFf2o^_PRK]9':UFpY=W>ldYg]4!]X,b6Pm%T&Vm5>bR@*$;M0cLf333J:=8aZ!8+T)WHh@qJZUUQuPJPmhXh2\g=l/E)jtATRjC2R,3IX4m:jM*b7?3E!bLG_c;5f#Zh>818j(K%aHk6!TTpbnkl^q!6PiKiA&q[r>p3L!FVWD+<*(ND;DJNb8$6n95!W%VAs`3!4YZSScmA>S`![V<b.:%XX;'OHbq/6X^00Z4N1<J;%@Iu2tK_r3CEs'J.`r.Q)"sXjTg80YT\fee4c?43YAih2lWZ7H6?LB?ql/Y)2bFk1j16-%EHrqAti`'a`HRANN9"A1ZQ&F`j3F<9>%!O1(+`HTH_pd>dC9Vk]@PtK"nTp.3aV'#jji.6P@+FY+$3!0R]\QC<sMZqlR/I&F]?I8q]Zb`&ui05^FEhQG\((,bC+Y3c#W#j$J%;m=*_RKXo<p:$PFjbrq$5+`?7dJ*3LhT=O1K2(iEQ*;6o_I?W?%A*Wr`!bDJ$#T1X-MY#A:_$)`0do;q(C!/0KZOUPpRj)RGZmYg%5YNk]07[;]+DF#1SdTRPK2e;R6'\&TLi3;^)67jCLq!i0DM-l:Srn"CTFE3oMur36#jUE%)RuG,2COaq:9t#e"j&6m>9;9H!#bMr%&KO\>$WPTZ/"ige:tYp6DJ07m:^%AociM\*5fF1i5Y;`;j=06\.FrGd_LU9jJr11p&pXg,HjUc3$54OCaA>]0U(AGCmbT>+mZ?$Y%amBuQ>r\kb$)olZS%br<?Rj)4#c]aJ:am=S7g-4n_HPBj?[O[*4;(p6?5-`\?kd%-@P/.K.O<4dc61IOP3E%i2+fdLG+aeK7l$*&%mZ=6>XJ</_AWY,;8FFZCMP3RB+Tj3E8q:Z,(W`,P87_JAC4]JGU_u()LIE,5QU,pq+^HO\^;-!W[4.:('M*ZCUdBG4FG]tfeE*^R%;4"C;MHht0O.!M:j<[))GpJ1M9o<e):_X][`X`-tSig[`&L].7'o3gR&<BsRTPY``*?C1@/M%P5jcHnT5Y#\<<At"PbB9WmO,<o`%-/a-(!`B[gh$/j_d8,;l#@If-FEF;a/1hYfKV&R\gHZC7k8!q(d2rE[$H/\PYRP(Y"5&Hh[=Q`HEXrocQQi6%.1g,bY]:S>(pp"Q%Xg""?V06S;I1c\tM*)(M/kLmF#=Ac]-'TjC/X.uS23^+c4n:.CW@/@tPBiT*XN#i(e31=+0/A+QGg6QddK]Yl5u2pUf+@S_!*gq'%pf1!M#%W:*4.tZk8F/#bHH8bg*fMnk",.4106-%qEJ(1K#)X<S@mP`9!J@-KL4E`e]S[HH`#D'4#ok173^-BF6&#Gn$H3.FM?Z$Q%n5KP+^0a!O8R+?fnHA_[E"0s_=Em\j;1Mq5CuUWqUEG=ki[g0NUHkSFQYG[m&o88!3^],4q*kZ\)>>N`#tWKAekt-/UlI"rAR'F3%[ZfdIm%a27a:8W30QP8`/I;1!'^5[6"6r7A,_gHYUdWZYbs:(rm6LV8%7)!X/]j*".$:No8_@-N9N$)(PXa0B,AY,a'9YL-B`0BB%klEN`:tfSt7C($MYqgT8d9*)1V*q:TA.i%M7(#Rr11Wm\X^4R&9<)*/--KsR',;2R;Mmn@Z&!95d>^OQZ%:gHQ"4;TW`qGnBA(`0%<!Wf04Am<*=JA\#gK_1u@X"+!bp3o\0tp6Nlg!O_Bn7R]@gbD.K/9ItB8j'^@6]mcQ,j:[D=Bq$S/F&s@Xd#*(>87.]5)2O)^p'V%[[-=IK++#n.dALaMrPZ]2997[AGBt%;+4V:ATp&/M)OI^7'rMYKC9St!FBChDNegQiCM5<9@hlRl5ZlT\`nEE=kDERf%QqF-8d\e%?c*&nkdm3^e>/6S'srJocI\mJ.?1;>R&XnhYm;9/V,HO=-(:6$bfnCHk#o&DZ^9iYb]0,OXCd43-:PeCMLUoQ9\<+FSmjq'K%_\X%ALgAr1o!_n)cJYmCf&f\>3%XPWnN`[W><UaZ?6V%]9mCc>?N=@P%p,a2/,W4A9,lSdYhX\$fpU;PT`&:/k("qLg:>u*0t[\bmXuG%WiL/'NnbWY)'odI.I\_gH$.N5EkFI&ogM/EL?uHUNkXkuAW:!XRELDi9_-APf;NLN<g`JarD40'HXW<5%E"*>*0Y;^^6iul*BVI_%TWd#K5^!\c;TNpKW/QpY3c<NTEhF`#Y%R3#D8oT%?P,J^TCWI=Ls_c<(]+4_Q7KGW*2n^X[7AWXY`0Pgh_oO`#Fqm[jW)T*P=(kl%KLSd6Eb-h1#=qaeRPa!S1n"(JI&aSD913E$3;fL=Zj<BQQ\[7D!F8_iqIr7'-4$W*JuVF2$idX(?g%6g)%F+laiGYD\`..1;(u2g%bSCAg7BC]N_/-A"nM`BP()rTuNQ_@;`oY75-sHN^Kp$qY>k=/UU7Wl-rV^3XcPPTdc+M@DUqQ9V!h8YW,Nb)eD]KnmUHs(tl`eru%qJu9Lde.[!&9b4G1]5%aIfmRke;$XmQuh_Fd+@IMnI#?3B:\C$p>[MFgE?:'*E?6%V17#Dfd_@g)gMQuco4>jgSW;$$A*>kqu`]8%_Z+h8[#u_=&]=-Y;8Gi`99_PXPL'qT_KU>e[[2-=S..*@Aec.2MIRShNG.M%2bjEGcg$22";c^;YQ.bJF$M'mVIe4UDCu2\1_c`(%6Yn:9KHASjr?f>n4c/CSUQgh"Ilb.#V"#h*E>I07-I"B7)7BWnmKYk<P;@&;d'.6djod^!1O0]!3sh5>gD9XM]E$BgMlR/"RIbE(%%Dr[$<<6q]^_`*or/g/t_%#!482Z.;'OD?^N1T;n$'se#7_DF4V5&`FLq!R5?6F'X8(`>KGbG5VirGN#bF$)h*(75m2aK('?$?oP%H<)DP2C`3M*$I;a>'RK<VZJqq\<[>!'-JY=\h)(Rmjoa3D3BPueTPaUU(c**K[5KP";FXS(7baklcBUTFN6:FIQs9<QqEnMBu^Y"%XC["=..XL1"_"K_WX4cREt'W6C8p4r:nm!<Knn:sm0`d"L^tbY5'Vqrr2fbh1]\OQ;hf0gS^?hanGn/(H5Rk/h`NB5)Cs=1C''VU%]eC/fk)L*?M2n?HM^ngC%id:=;kL?6i(>Cg2274cn6%JF[gA]q^NO4P'Q%,bVg1$6AC>)]U'=Y[F(V%pj60$D9K$p7&GWcr2IrO=%&$/6.RMo.b6"6XiM4To=af_l_k<dYk8Ud3a:fMbBmU0`OrF33&^h!UD'W@H#!?m$]o89Q.'0qD7B;@I/""K%h;&FM_V[;!edOLkB%F4r@da\dY1JPCYW4qN&EM5^\ZA!!(qC80l:=L.6<Rl*+AkrE#s9ec[4$2DN#OW:<8B#UDlRg>F,%'(^_@We`.^6;sH^)&8`jeImD%%!%F>W.!)iNam*Uc3tU)+PS!YGQKGLGMI)2_%)IW>_9/5YQA&m^.U=oeV9G1&QYQ>!X-.A>_k_HM4To=M6;ZMlV*`,Apfi0A)Nsd%]E>l8%joFYqB7ci$tF.9Fm_LuP_]:rIEr<X,8'V0GabAkQ,%@O>S,P22R#MUX6ZMZXnX%hNrs\KK<&Ki7tQKC6-]Ms6/!1j'QhDK%=tTO-RfQ*>B>[4JC4%MR_,Be7*Z/H._TRL@TkcotcOeh3Zd$ab!),<PC#ID'4gp8;_9-@.E(IlHD1*Li/d.UD\>kCL(Ggib#&"*L%ndWVo*Q9iWrAJ'bT+#\g#Rhi]KCQIR%C%qq_d)+=C?,qSILuhS:fG.f1YB*/BkoeF15H[NgsC-E7B^>(inPXB^0q/'J-d3m[W]qQ%+Z5q$!AP"5:<nOt_Ac$`GlS(GF;2$HkBX`,!![9<,^06E/hTueFa_G65he+!=k!,p\-TNs@5^g'5RYeh!hp/R@,M@;6U-M7J:(N9%fX4[_584MSA7f4_#(f/!W;^*5MiF`NBQ6r]6Y9a.$5EY;cOg9gi3s+[#o4'0KtcOTb)I2eNZ/Oh,7n;pb>8i6=>"YW!"=N7hfXW,%!$ga@P+aH0KT7QJ%%%__'Z=It5dRiYP?A$]&,+WIPT0iMA*%2s+MqPP4AYnVC+04W^V`0%TIi_1./9gW&h_[l5kbMmjGM$IdbbGC%5>5WkXoa@!GQsmtjoHSuZt'/$n4Dbj2#k3D4t*r^-t(tX^>a9CH$TIP86H!M<2RfnCtZ;JFH32P!*t+^67m6tJ<&S<Ci(DYEU=a[%1.^BIOT^<M^ee,m+mU?Q6X(fbn9bF,lKO`mJF=pY6EoJug.Y=L26I%73XT6;%0JJ@K58=k\@/Sk*i?;,J7\%T^!YMX=H%i:-c%VD%g=c[m@9,Y:2\cC1m2-6I?_M8&JYu<M%9[)f<DqiY@IZrN68)LI=U;5@g_RibEC1=-7;W<2g_LN-:DP.u@DQ8YC\b\Zlaqmj*0%Q3%#/9;gQP^jP`R"`G+V5J1+u9WbRt6SM[Nc2LpCW@fhe$iC;M4'kf<ij4i)sNd!_Cc4!/)Ps:;H!FTRbf33FH>=Qu$hQDY!iTY+dJ7%EZtd27!0q)eL_L?5$0'nJ8K(WirPNuT'Q9j=:GZZ?Z]AU!2,(C'o*SFJA=lfQRPH/N]>k1'IaA?(3LZUA17RfCa[=M16@ZA7B5D4%!SgN,^@/@H#GC+;p,3]@.;7sulV`+aTH_Q29mdJ^U<47[^]6-T_sS.'(eHI`^4sV8><=,2gS$!`CpSs!?l83fZ@)a%2qE"ZS9P#6%S%^;KC"h"d&q.SZ]'Odoed%g#Sjn\I.VCbF?ipQ7K.QkRQA4Q(B*m-dL=Q6.AB'H"$'H@ZpInp)&/r"@4=C`JKl.`W.hU^$#Cs8O%X/To>6i[Ft"Tc](GqL1;R;j!/<i7,LAI<\_(sE@V@F3@Wco8=L)kNsXN\TP.A,sp_'X]P3SZ2b'=9db=!#Vhm^fPPLKOsFgI3#S[%=uftq;aa[aI1YU=3=_)MBS-.QGbeI]JDH>Qe&Oce"+A)7p-GrAKI%@qZXWUIlnB!Eo/oON[6+cX^jcMCJ0g<pm^K1s^iDKiX#Yb%%*WQDV-",&a+XC)Xj3M]a!(6-d/?B-!\DSp&1>8*O!AK0\f+YE59X]<K"D\j1?aUSd&KLR`!\joUNj-Ob"ToTZ!t&]=5kbL0(=)]H%oT*:iku`P&DefTXf-W?%$B![?o<Sc0^0Lps"D@tQ#(!En+;SrAoMsrX@)k5)3#lF1@$u1iM%'#-=`Ob<[1)@>VE;@Gf[cD9!1);8%5R6)*"B/p*#OkEl'<[3E!#XFe!d^N$"LPrnM5S3RF>X'NFOP2>!4M+tZqO9B@\3]e,ES"Bicl?VEC.VG$$/J8-qQD]$OLtdbacNm%^j)%J!3jX/!,]&EDZFI(@d9pRUk#m";q[m(!63Wa/&[%$8T5<V6:,De\rPE"cSB#G+@,P;fsh&e?u2ml3+#1.#W+s`!`S*&!)oQ-%jG%!>g4I^MPMt7:'bJTp?iUC3&&;bcA3:dA3iIeA^b>qFr7hn08oOi>3tT@UegmCF)WI^r%n@'t6Tdj?Duddg2#n5@5VHQI.;rX&%*:im7\\SAm3k,.u35.cUF]b'IB%e/:qj%46iIIP>QiYq0WWG8j=:T@]%.kQ36:*SeFBeV=Q6%s2.:]$4#H&kK.q#\R.P1__lYq\i%D$^87()Z7iTu,[UPdmKl'/fKkh'Du%j2aSHdusf3-k7=N=!D@YN!T.(5Rei=5B_+%H:J,t1k6?"*?"t21M'Fj$jNB=Sk+C!LHroC%5"E(;5[]F7p+bp:$J8tP^sn^'^(B+hTB$%U%AbdF*/PjRD,%*%%!3Yf;1bK^$ikm%&Hj*"e,qZk^iaa5$c(ic)=/k&%XCoAQQ]%)%kl?]tN(\P!>-E1'%TJ@p.PW'mG;Q_]<J?sD'+nbo=7GZ5J0)YG#qhZtU2`egW3TtO3[[8Q7T0:PE'I)G2NfgI!]jNFI%Nb_!lm<3%8-K_0#(GLOA73%^BQ;0-gINC$_OX97^fK)k\ko2ENa\eU@UO0gbPaeJ.3@1]#$P4#!mJt.BSRcd6,3\q_4D?$!n2-h>MliP[[VhI%@8i3/Oo_dR&;jOWeQ+raO]AbcAf58T9?9.64b2p6\*DVGWK\B2ANcA/E6qO@:I?eOr>dRRd[pVF)SgR9UX0W.0LW[ZAhnLY4IE1D%&BYXlkZ@lp4G=O<kBc.=?,tLui"="_Q)Q5eA>%pF666.iMJ\9ig0@6-cq?oHJ@b6S=991t6FerUj4K*\;$OT]f`_L$Y#PR3l-]#j%&\uc8;Sl-c$O057*]lsuLRMJL!\r'R0oSWE+p%4YV[-.5lN(86(;-l[WCHR!Ra@pg?m+uR?s7FL"&fT@D5jrrmP?P(-jaOZ.CeA_%2*HJ.Ls0neK7JNJ%3jIG-Gc%Ieb+;m"@,)2i6$3W[U:j"6bFo"i#*r.%.o1<V$HJu>H=;F"*f%r7B)'jYCJE?,mLgIJBibG4TVi'%<<[PFg_k'2K7R&G,r&b,l4Ku4Bl]b"Y+lX>f5mai(WtaIR+4">%h(NCF#3mbUW2i2-$pIuW81ITH-eIPm(&?[&C@^/%.[AX5H/L"%^fm2+T$0G]'_BFHD?@D(lmfN4gW?sFj=-)iEUY6Q+J5^3dKN-]aYJBX$ZeXnPS=>U?\O`5.1ERM3cTYiPC`p-Xoo.AM6f57-"'tU%$<.'.?k]WA'GUHfjLG8(45.+4RNjMj-1GongCRJ75Y-/Z!?KdS[V@>6`7h]\Nsd1__2Tf7</heg3B6Za!$b<1#@p*m!2^?g8gk,[%BFbYhZn*r_;O8W4)bNh/f#uPD3N*2uAI.K=3qgIm7f%JcM1g=##^G&2PAaDVfb0DD@8)39lcA9=i<6(ho>o3jE9qX'Z@S&-'.f*c%"sepY)50$!5Y^b#g(.+sa$?U4#$gHP!U*@VZ4`\:'/2$CKIDrkUpFQ'\3j=.&9tI)e*.PLa*#=R,XQO.Ht($YHJ!aLW8^LgE^^f3%KR5#-O^Vgb%DWr@R!(5SUV)D5;P_+@7ZbRh_%=K9e3ZehE^DH8Nni!eFLIm\5nj93W7W-6<\:.Q-`JZu,m@/^ZZH_#JO8tYeKt'B%$g8#;5@ZVn#pEEi-bq:L!.^C![u&Wp"F<,+%sWSd#J^\Tju*DF#ZO)O!?EZD&l<bf!oCBK!Dq3UYna<f4uAt!=tri.6Q,\b3.REp%Tj8L*^'O?VLNR:JMh%*BQ&JhU!o=)%?0f!L'#ih6M)qd1(LMbk!'=5Sj;jW4["^W3*Wa:FEZ?k9QuZiY=O38@QDK+t>1\j[^3Er6%*Z-id^+p+EREP7tm5REMe.6[N-8s6p8,%>4We)QC"2-jK/Ngr``s*^WRt-YZ40/ScZ[?+LogHD(*(X!_S9QC'd+6]W?]@=k9R7Qo%_"C#3=8>h=d&&'b>K6_#'9&cI@3,EX=`e]MR#3M["a*3F/@=3,o9R;2JLsmH@Vf/']`\2U^c[.DV)(s@GQLL^=2ef7!$jY"KNF1;%8'B;,DugcM)47'422)88Yf^\l0fk>Q?l*TqZ=3hRDeL)))r^X0,:qUi1hBqL;Z_[UG`l=c2?sg0V@&>#,h*#UJF,p]BNVi1'cC"b%_#^Zl4!9Oh\Ecb:+#C*f!Z=8?e:7pKC&h8a#rir9+@UFqn4:i`?kmB'\EN2U3l$8e'g2Al#uLNn"JoS8iccg,BpD0pn8u3@<Q&Eu%=E?&X0[*qXSrApKM:K!X:IY,9X!slpWSI)eTkq_PTc`Q>+iop31M,$S>hK4Rh.5sAa^,>qQ7AK`*KP;5)!:>@)es'MjOT0mUAZ(/%J>3Pt<SK<p6s?r>-L,0rdbiY?2;kJr2>+=iC2nl_/0.sSNiUAGlCt"#P2Y`U3)\BRTPY(6Yu;nNI%B&uq8]pu/_[&,.a(W?!_8#"%(<1&$hi_P\TSO`Z'QH4`'\0S0,Fm@++5U!r=h`*5qbKLu"Yb]C,:u3jL&NSV'=]gE1'K6ZSalc3hXh6+`W_DABL?6Lk(<a]=D5\V%R!pGid8ns)3N-k06R)IP=:k[F)$k<qKScbg8cMo)<AjtFf9W)adXL"=El>b]Wh+kS3LLMHW9th$)i4`^]2Pt5/;Bi26@]D<U&p_H%MPK@J1BQ9e,%7F*PVX()k$VSqUmf_$"`hPcR%BHIgPCW[YI_(VE5A/tQ6XgCX!SL8Tu7sn.V3^2.<\k93$>BGN-)OGR0a:r=p_1,%+AS4nZ`dF3_2_WD1^@"aNMCSkGpODjB"3^J8`UJ^kE8OW#+KXPd8tHB"?OC8AU4>'S+:7ArD<5!%*;ELm4E/\)B;mAZ,tWV&7=Ir%U+N_T#o+TF9JS7"7;6`l&i\Jj+#Hf!A9WTgBn;S[#KPBOc4%Xg!#UZsW2.6U,TAZj28,SNN/gshas94QYcj)X"e8XKcnf0ek:2kK%#6MSC_8GO@^i^9C`L2RX;K8/K*fKT*9J&C:$jA:7&Z5)d!s72-/@s"nDJEjcL%LQ,/PkU$<Cn7X-JRN`,dY?RFc"_4$jNB0coJ,i%M1^Nq,gssE"'oaX&crOFBT\GR,QQloR?*R6d,r#d't\cH#)Sl+$^A&MeqU)d>HDI:V6rKr-_VK>N!IDUk6\j\T?mqTOso`%g\Oes%[o?31J@7Y88(NTLNic(s`$0)/Ki2a$B?:.).H-Mj/2eQZ2VfK^7dfa/RS[J4S4&0#eQ)lH?#;u?i_k';@424@<t']D)NFmAAf)Xu%8_T2Aoo`0H;GH;2QA<WIdEusU>2q@E%A5;<_9TiNnCO#geN3-f%RHa$$Q1(k:%:<B-J+0V]Rcp,Ecg8+mHARpcP\5H?s?RpbYg[G%WH;.4J38@O.&Qj`70>5-*pn%*M(hlN@UUek!&erkAt-[+d.VQAKemY;ad('f9p#!k9\hpT6IdnVaXGnR2Fd@#DU?!1!1)Y0!UhWk%THd3jNh%ScQs&+cj'bZ%ZrE9n.^85qV8abL)D"Bg"0QUB+k.PgU[RH\20G@ZBCb]">]`Uo,+`'U#9nF.NYkA0aruY%=cl+$Q9)?D%h1[69_/XcO9LLIImQfPLeLWRMQ:-@G6m"-]Ks-$Q,-!prS`g2b9Tu<2$/04UAA0\EGd[\%p*FL)3c@c$.Hgp"Hn#.!9Djq'!&(#r%E\ms84qg-FQ$lr0=5KO"ShEe1FS-'YB'aefB?C_ZOgl"LKD&BtcdG[rNE+tGgrB5JbnETI[#e=b(:^si#'p7oP`iMR8jCZ<id>#s%NIcD.+l3d8<Sk`'.r[AXAH,/Rfa%sPeM(Ecn>r]T"A\-<(ooo:RZa]'^@p"?\I"rp!^SjC`<4%K(f^;AJW:^Y86@%-3QGO^OS+LW%M=G9p>*q:$U-f5L!"+eD]ap@L$M^QsEefCN9^(cSd+!&4^e]'P78OS'^t$M'6&)o+'un8M/53Qfb((=rW7h'jQ\5[K'3@F"/3Asp%+$O2-ASN"tQngp3&p&1e$jR&+%V89?gT!&5EP@=G:mZ4L,fp&VDD!p\Kl%B]S+871"Xg(I0lWt4AU;d3Wf?P2!!JarbthQWeDE!*%(HY/'4mYue)tgUm_3S7:/:B"b1&/:r-$&AIS2bTZ`>:M25+eVD$FrA:ogB(%[DUs*XK*R3'`]7M:.iHIBE6*MdF-CL717>L\*qC`%(IMH,K;Ce\*a'3tYeMQ#-oj8qeEUN/f\B%fOCY$Zi@[2(;qWK:2uj$2qE-O62ZUNfmmTn2%\*=/*7IrLD/a!5'$(>heG/75CeuA'%'=t-f+N)2(V[R.3!>r=ekVZ<_)7FYJoQLj=m,R%"D)pYBW=91>G?EqZ)`j5/5hU0Ya2`H*7mH=8YcTBoI.GL)66=#*@uK-.F%UsC%NXhbj20@=me3"]$PH"s0b97Tq1fthk%TLLY^qe?1kWLOu!YAC689;/biW2;QRB6tL&_M3eaWsqf2?E%,-c)$97<D7LBHp=aR.7EW%m$+2ec5e90<&74m?&7NP!5ja#&5/"chm^YY.*l?VWp3Q8a%rbW!-17-SKV3*`'E\siG!5L/j/YJ&(sf\/F+ek/j1Z6+9K[dH!FTT%5gRph__CM^T-g8V$RHgrY7Rr-X;V1Phq^rTNuWPe;GO]"aJsp@PU#6gr=B:#k7h2B*?j&ME+6-JR5'.1KpBK9j\B36cToT_EioIo%npHkGO%UmjU6`U%ingQk3=4)B+KV6QaYQ;PhDOCt$otT8D=o]:Pg_+T-[JF`30fV(qeFd3Zt#S=fs9DU"/DE.oO@krCa`S7DU?fH%1U=cUPuub?!aFqDY8>s3,Z%.CagG%OlBhmnie5"tdM_mtrWnTj,Qi21K4&%cO](SHpcrtfeW&$RFKG'"L=B'$BPPFN>B:Fu,l$;"%3cnB\^WQhIJSlmKV,N<c%D&5q/gUaM0`*Qs!+DC5qd(DTapo+tR]b:-bHo`e"A2Z_)tg]N9+*D6"OHTEDNE+ibIFh>akdrM"\*Q7%Gp07?-nhZnKTUk?PfZ)%%>SL+[9!H`8VC[>R)A$q9p^+S8K\gF>)'U&6OtOX=</U%d[/8a_3G*>=OL,<!u2?CU1WZ3jBr8E":]W=%NOEI2BKu\IG#BAc#e2^+bID.,ohsE4PoKsjfbmn!'Y<qQ-S5(nWfO2R='31;c_9=Oqbf)EZP7.R]kQ`s^r,7rF+s@"*7kiNL3ga5%Q+pTgfW$k8<UB!kUs>6K8"Vb\GmebKG=^8h+dW@WL%\e>[=R76[Nh9@L5K5@/oJ`_YG@nq5%BEg_LZ2)'.b":N33SiCM1/Tlj=hK%lZIo)T4=RW8.YHo%8d]bhAA!>aX,^CAOh\E<J#=(.h['f4\tSu2X>I@^f"Q%<6&c@*TsD7YZK>j"A@-7B+X.:Jim,po"J[8JVeJ;%Y<'dW^d*l0H%Dr<fGUX^SFFaU$L1m!)QqG\NEC*]V7:c56Tq7-`Z#npHD$Q#X%X/`.&Y4t:4/!$Q;0RGX3Rcg;&7SR*`hYV!781X%!E0`S!U-Kf*Uu9<L91\7%2hF>#jL8ABT%,7"%&#C$sYt!_#lYX2o/+Z3pRP'r#$NjE3s_DSYIu1,5&;LE:0ZL>$4mg:;-/tQ@:7<%dFK@hZ")20JZ%Kqmjrm72Uks?Y)X#$Fac^JOH7n#^aON%UBVrl84:-MTW5efHLfe;#6506f8Ep`4TY^+a&<*(YSrQKgL@!Q[=Mo-%Y;W&oV\P.kKBJ;VbWFN=]DV4(#(hO?@tHcZ.s,#8KN--VfNA?4U)^$M+L^sJ5*rsp!rBVa>-%H;T0mhuB[dB[DO1]J/=UnJ?6*g#%3>(?R/?h411UQbo5_r2M:pu#hW0bl]a5:i@=2so-Y1XbkIYPu+F.Ng4CiT7H%"s1mZ3;/Hc4?C\!0e<N"AHLOlgh[BGQ:)qE9bHh%WeC;["1-0J:E]I)XRq.TPW$U73Vp!'Gn:k>XG+AN_;pFa\b[TVP$tT1O^hsqAI/P*\^JD@:p)EK&D0q3<?t7$%d<.I"<e*q0d:#<%#4]%%PR;YEioK>L:S7Q-j2Z9r9G,0845E?u'UP?TEc^O9?kOmX^jOk*JF\j92lE:Q-_7Q>WMpuVMDkuLhK@kVmN_mT<NJt]3CrVY%D`,<X21<j^3ejf/q,JBo.X50kkG)Sncq-?VKb'cUkF_epZ=r0S#1OMW7mEL/a,_u;r/aEG^&K3Smf[V&,F&NkKSPlTaBKD?iEhkC%Ya,;@6^p(.JdtjHF62Zl:oU-9(0X/P4KL"N4+%O'?hP%gBQ6Y[5]rgFd19RQHRsPfp5[jrV3bf8kn$A"42<fJ;cJc@-r+0,E#nmb%'*;1]=+VhA+OJ-Xcko"ZUf)JnM\/qi4.Iuc]`0-_bE-knn)uIA`!F)+?j[CLHf4+<RU1h;8)+Bo@19gb-EnK[bNacpphCdkG0A9o%=TI+&]4*CjW[m^Z*@XZBWYA+piLrD,`EPiPbRJZN^su4D]D+@G(b&hK%MZZS8_JooHI%c@QqE)sl)d<kn9%.kSg#[^4KpC0OsH)U%'lIr7;NqG-GljQ'O(rCPM]h#31'mSI8b5+DVBd[r<.\eaB2Hl_:h8'l4:7fY7\^PY'sOa2(f;[1WW&q/-S*[XkfU^Y,Mlr?Gr,`+%Z?2gi)^"--TI5L$NVJ<!r4I?K$W/f&8!-a1Tk)8T'F8E(:*Tghg#&cZIG'Vm,QJ[RO0I+7F5.#)jNN0lkT0OVj&X]`?@inkR64JW%?Q\J(?.kD2>rar6:GAoLN?ZOZTQkD0drAZdT>@6b*SJ/iF)GV&-u-sO.9#D-">bmDoI3>4"6edX[NETAVP=[f`R!PslJ7iDa<md^%hsh?+;f<?4(W=+g"EL0%<o?rmVBG"?ElPn8AB.Yfmb.FN,OLjj`ZOY[l8';95O&jMfcEYD.#^kRGU8EO\-aZ9$2Lk5D!6gB1c/#4%c$5&aNDChC7L)s!oO/J9:+2P.:^&'o.=_8[59>p7g]!sM.C#X\#Go:22XXOqh,$=.&U:a59JCq'!`]N+P6\)XX40I/^Y$`m)!Y)W%/J.1p/ku:ZJG9PA]J@=OA]sjG=<?%WNFgg`<.fMej)[tWSVVfBa]m[MSu\X%r)CJ*IWkoYX&'OM+I,%b<1Q,Wdf#WllrS'`7c*J*%1[bQ*%DK7Ik"2E&JmgF8qI=\#ZheRGqQeS+n7/G#+#H(H>49L#2qG=YJ"=%%E,,X(l89*,K;a8IHU"j*n+CF*/aCC$<hgJ=n\18o%IF]IXp[Hem7lS;3bGJ]!h8uh6DE$k]hM#t(8#&eneQP=XHQ4o(NX$B0`qLQaA&(O%hk+JK^,I!`j4#?Rf"[`Lo^r&P:!8SJTHjJQ%5Mt`IfCmIroJ@N6ne+R!bmZ8I?`BCQY:H9@F7:KU%gnk9])eiF3gX4nPBBEn%%7\&W<jR/F$BgsZXP6d_qr56't*@)>4upeP^JU=%Y(3OZo^nmWYa+)?9ClLcPEhH,p@*1)5,`mfdYi%Lb:b6Eh:Wf*#PC`[<D6bl>44=Q;\1q:kLZ3QSDg?Am\&-l._Y'3&9K\@cPu28%`WD\uLj9"EP9!]@E^kCIF)j"\(TbJ,?CouuYZHmWoP34BAj*R%DPpg2Ap_Nl@'b9<E>]q>\cQV!j*"*hV]5;DK2+'W6#hZ1e!ab/%[+jh(#AKFbh`u^DQV6LJ/ObHJogQ;JM_m#k]dq4uS40kFJWN=/2lkWg@BTlDId:RCfjEfe1S4'3[OmDbDt`b8e7HEa]!k6)(?s["%h-6\%;l)t/2,*bATP6U<]bTiO-%(F1>L_@iXu/8tYJDRC1eTW9i\s*T&-i9$a^:Agi1Ms?`"cV=7&W=`PbN*@)Bq",VNC.dAMM#b%g9BIQf%L:6^j1d5;m/n?]bP6d7K"Vt+mD-ij!n<a1_sKMX]aiVYTF;]^VZjROkO^cKla'Zf1EVY)!U(;a*OZ6l)f@uk*.EnYPHR<%?PZYDIlW5]DH,L3?D7u%(D3$(l=C#$$sU,Gq6+\6*OXAFG.-EaV_[q-OoDS/=K=s(p"D5H3R[0D0B'8g=R<ElKA',&@,,anEYD!j%i$U+?rg0'(s1=/!e!u/YfrbIZ\5SL[O(Zc<8dr#]Bsn7H<@#26H=XC`<4/_Gnf5V9;gR)!%uGb8,Vn\t$.h!@>&9AGRP@A#(eu[i%IhGD*9kQCG4%ZXQ-Wd#<km=WD'4P;L+mDG]P"Jc<&Eh1ubVe.'T/m=HFdLcr%^p/tbHe8Go9m!mF)ZLF%FU0kJ(Ahh:Tcg.R<WIn%E^^AH)>0"6jQ%9a6.;9_laR`1*Wh6E6U)Lr?H49Xk-[9+1rUrhG+gViCqnWeZjOJpqHrMnV:e!bjJH7L`H*6ps."n59Du5CYL[@s%e$DH2cUVPf[^49/KZm/62O0h,\M@5p/fW&9/cAh(Gt]qO42('%Vq!g(0h84b2)K+#`gC&DkP*ChNjCEO$Y/ldWRA17Z?gA(=R,:N%\M7RB4mFe^'tYYqT=YcGfCbR1.7@t&eNSC\3A5->R\Epq?;_l>?+`Vb/:gn$(5:79\9NqK06^'US<leQhK6fdYNS+FJ'f4[r\9Xi%e5A1`Si&AoZgLt?;JugUO)+-+eComc;14nU^tFa_IMX[1B&q8NH+)auq4U]mhegp/d:q)OCt?1=jGZiL0N@>>]QqSYN3$:;1EXl(%O(kSj:[)@RBg0]UEn3Bnl3cA&Gd$@<GW?#jTHZSr].)lP?L6J^lS.WcOubn$)]_LEdB#i_l(?B%2(r:((%")Ql:ff<ZdkN,`),bL%U5_h*JjcF=s7B7d$4F>7h5]A*P<KQE>QH"Uf([mZe;FDeDc#aoAL"baY@!sP1c6mIeXtX1**u'oR+b4Tp,],9/HIa.ji$d88cdD(%<,4=ZKBBZ8ku?Hs$D(sH8%$j-Lt$4BqIZXfT!GlDYCHI$[Jrt&S4rsG84^@?UV3g<f;"mC2XC%pl1"8M.nT:E?*5S%WO84n[4?S]%m(C&fDC&C)L7,<jY(#aJ_ka2D?E,**__<lEm[Z\OAmOf-h-l]C'[;"k-hV)fi\\lTK%8k!81oq?S?k>Wj3RN\%eF'"8$d[bVLIom%_ka2DepZlD36^AAbcEe!s1iUko=o;cAdSo+l^mn**J[3^dC^0Hk4:RV'^II=3caVJ_ka2Deg%h13t='qq`j[nRV)s.S^r$jd2L<j%>6Cc_27H\AIr,r"]sijB_'8f(#[Gd<oDd7Yr3Q>7]mXF@\iS5''OoAq)q()Ok2`X5fCC6GMtc9`/D:dRc20.u[+*#I/D@t8/M,V7%>I8D]!/hD*@F/WBTLC9-$[]=dB5-_c,!]AbZ\:PHfX(C_B?<l=rTX$WYF/Nd:&KKS%r\."C"10&0<7f^iYQ@9:n-k7?VtUN<Vs$c%h=GZnGiln$Z>SqPKtMdp;k,=2o_@OD/cHA\]([A<FtS-T_;\`RLr`T0lfG^l,/m6j:il,dPcVE5)-PFBhaSC\?\ctsmlK7F?FM06%c#t<mCpoht[n_6H2l[<Z;_2FQa"O@Z)S[Moho3(CUnqn!h@Yr,3*Em:k$moDklifJ&josB5J;:q`?-%kQ]q9pcnt'$obRdifej"5%ak;X-JY1^tRe[354/^n0*s1)si?a4orlj//+uS6sAjok53ALl>$Z%2W'GM3RJPBeO$*f]d#2nPloKPJ^Q^iCp&n52K+mDG]P+BE7%+jQT[jS<bd;s"8Tj>sL#)\?euk2?"k)PiF:rj+e1I^V4b8n&SI!)A0^@QXCXfM8%+4cH^LQ<7rNT1A$Q4*`Ss(>HrhmGu60njGQs%)p4JO5*\iJC`tI?OT/n?Y4%u#=_o7RV/W\n4M.GafrfcU[ZD;0aGVY2`>3KhH$D;Bs49s,`=u!;euW).e?>e9%ss'Cg$VW0RfALF%Zb,&6dPMt],CO0j1aT?E:)bt\G'X<Re*iWep`jO]3oAE7fkMQK&)dFZ*FJK/R`t;>Mk\t#kdDnN?#"eje).]I40sCcMk]o+6t"Dg%Ze]:9Fk4;b40<2#hMW<<SR/FHPZlTQe[S%*DGcDjC!+jcnjQ,f;3LgsI9VeZf;82Uk36i(aWK\=Y(sCajauWkVC?8rQ`3S@M&o`!%mjU+C9<"ZQ\>g2s--hmXb'qTtaBtjN;nj:%_;t9li<auiIBc6rU&7t.4NnLBs4NF=9]\C&Uf&.@=c01/2eP3Y6/[/_flL$"=k%:(%FdkhUk&49RYY)fU)cahMo$*nHZ`)V0l8FR3c(]*^W8#OAh57"U)V<uM_4h5.mh_[@<Ur)(<N)Oggrt(!l<6@XI#TXmMg&jYRScWU%`eG@\LIV,!2U(qX1t!&CG_a:4^T;.X?0ATXChMUA[[Mj9>4]$\rquT9`Odp<eTWY&5;d5jF7K7/=nA35>3/n2Rm30+c\q*o]Q`YU%lT=9BH[fdE?+b5n)?d3Vnn[d@WSQT<U\"F&r;EA/>F?7F(UuA#5jJ*Y/Y:&`jXQMk%r4'U0gWqA;L_u'OJO>c7s[LNbd[hDF_fPg%4R>Q?</Fr2R*&2(Zu*E!p"prcru29[c`cVVbQMNh<IW1FaW)kQ+uPk#eBG:ZV6hFl**n"?/0U>-r7BQ3Sb+aeD`4IPNi-(\Ef*mk%2`4%gK;bi,U#Jtcr4dT)RT2p$UL-HG^*m_IMAhi01+u'*Dc,#OfhaZ</k(clKIi!!F--ARMAiheFr*T,=g[7JU;iq+0rm_P9JQj\%.F,BGCl5bobYnBWKjLlFW3orTRd#lMF6AdXOdUYQ?1i^9+O@6g,^$M-?F%fI'[?KlZ0>U(e/k3!JYIR^i_:000#*p^G%Z$G*7QX@%mj8DDfQsaSRY&>;5/7(RF>!5JWt&nCW7$U<%\n21I82iSCS&2U214(S0(kj`(j+1f\'>_MEa@RDFIc`Z1kfp0luc(PCC`;:Jk)mY%mk.eV]4_gg=8;3X.D562eO::<2c$V0qH&PDHc+^VYQ]V8:NaT)nu*GPENeIS<u16Nq);;sr_'AjE=L6T9gR6US0(C"cci"&Mk/Z&%,u:Pe6$Y]n\h)-fc2T]@+;peWRnX6clFI`);kNJ\<5d)qGh!OKA+iOSMfeE#XMlCB>9nUrYg+d4^.#p5pLm_UHrl[(V0;3`KQ!"B%c%)q/Y3469A'1/7/JX2.Dt[)Ce;LfWp_Fb),3)m<I#Er%MX8EtL)Jk_1sJP1[pi[=SF:<mdl?XCdT`T::&(SgQ:8qTs!cj5r/2ED%nLY>O4nh/#:[k/TIhlt8puM]gnJ]`3#[+h1ibpm>?iS-(/"uH>Zd`&ebl7V=4+;<$]*0?<s+0:>K3#+'ZCYW(Vd$2\#=$e:.)PW^%5?d;egoC%NJ&$8s5:/NHg,'OAo:enn'Z<#[V<JcSg3TFFYDce;n(O[`E>JRSX0=!b?Vrh1<p\Xb$Fm#3j.Q!Q#H%HhV_`2m;BHV<%%ss)>HF-n[9bWYLFSbZW(Xi]JFL7&"R9e7*]G<Trrh+GfhbZu^*6.mSEY?,/:[nL<(2f2LrKS'?@tMknDY$gm2so,;>Phe!F?%7j%S8SAM(S)?&g:T,^9Du`+W!-P*.Q/Z#>Zm"cC6ES8WibWg3&L[qOJ/[(9jU57oC=hWk9]+\s40,;6M[g&V]ALjCsR90"G0\f/]g=Q%*A3oM\;6Ien^9(JQPSQ.,$[`u_lbaoEu6S/7#Wkd@FMVH-@Lk`_*uIner2r\d-ftXQAMHRVSE,`SCE4ffDh&8;#g0@>k2'm,U)kT%'6;3GN[,dnQ$Jd5G1:]hNL6,XS#tg\]@OVGkF=c/=mIpMa/@<!Iq3*K4(lgRc+*49*sBftmn?Nu_KX;&<M"?Bq,9lW_K@J9kD[$u%q5H_7r^u3%`^9^:SY(PBq"G>e,=/iBY9LQ4J!5;!lIQ0bMrS1BV7HDMajT1V]!H50:MVX`l8LKBK4-^FL:S^[dZCg]e#2iL-I(_h%ps6N5HNILMQQN:)#JA`T-$l[gDc7?h?7a)R%%OKlK6iGWI*A`CX^%?>I&s-(nRh_G+2=T_oo!P<qXomo?]cM!]@UOd*TUI4=e#A<%'s,V(AUE%u2:d\\I'[E'IR`%'h)Zfq9)VlP]Vpp[rm./hK'e8ir?l^Oh-ng61jcQ*,+4^=*n1\JYOO^h1p(TZh%-7Yc#a]DOZlk@%.^!3l^,&:1jP!1.cHdE^s+[%,=if82b*i'40kZ3@3atFt%R)hdf;l=VLFN4[`9bSBcNH,3*iT%uo-X'*%:R\68HcW'L]#3Y+`q`W%heF``S\M.UMmJl$+E0c5:\EnCQL`?qA&$f:kW]0'+;Z3u00AQ<(kQ'mZGPNdFOY+SDe*0teJNCDpW)MaVj1D>ea7b!P;0@gq#B1E%b`FG%]9P*kJSuI#P;RB`ANP'#LMBR>nPPd"5N'_+q!\GPhm6($1]-^+O_s#I4.2ALE35Z!fN'o769jY#DYA/\C?B?ebuPEk3B>PC%4bO$M0SK>ROiFigjZLjP!sS#m"nf`;i!.JP:dLg:&[cB90XJ+sdQSLFlD=I@'dIA<:L^:1Km^Qt4Pf61FK'.l*u8QTo/[OsQg\JB%]cHo*EF]Y&=;?0%ZnCXOG@5:aK,tK5VrVN*hoMr93h=hmbAnPsi$ZESKCs>#h`<h=^0R]sL^,+4"fkb"=;H?TS-$F2h&=0!/c$t_%+B+9F6'NtnLAg0!B!#?#ML*sX?3=a:id4hB=ff#7bp*^p<6IFtIPpG']7X@sd]*aW<E%i?<Z>^8L3@dH/",M/EUgQiX*8<\eN;G(%@g]#ki;!o4HOeap=,cko4M0amL$B?"J*Ql1==-%o5Z,%6#A[2;g"1)J57Q-IRV/2AXB]E=<jV9'Y+-4K^&(;k#l+t']8Q.Qmq5[.%Zod1"oECIlH'_i4%3#$T&1'7=Wq@s,ql:G0%,26i(\<a,Ain0F.a%B-hQ*ZurCNQ'#IXEM`LR@DI^>X4dHd;j(O!(IF).hSg>3n\%,_2c;?mhsu5V3n!PFF#LZ>&\Z[:j+'I:P.ejhrk4=^Y9L/_S\A>&Q*GQ=?cJ(cDW^OHJo);sYQp%=)u6LC:YGh.%LCAONrSHRrtl%_D+2!nk0q\fDVZG/S]2])Ca@\RTJcs\lfVLF+gc/]Z7L%[:U5NRe6n(6qY1[8%Pnl2$^6V"inc:5@**%C4PrcW(2F-8eQC(l2<7Q%`>l8=7$EsY!boQUClI,uqn;isM>YY%XqO./?j3,2rre>k<9=Vep,CQq?Z4?i7a?2]-iCS#$7B/CDQQKi>XOr:C;#gPQ=od/nO4t8%U3>R8La2Sb<bGpJj6l).O]a:9("J(q!o6\&-?Ra4IKX<nP+GGU;n:XFmC'C$*7pIHN#\dFOa>PO[;,=r=TTHrjC%dn1Oc;VfWMV+%Lg::Cm/n7EYN:hed-).G`OgS2*1GQ`-YQY39CE+EJL1F+p_RZZcm8Gf=PS<(,.eLGFQ4YEIFN"?O:8VBZ!1"M&L7Eua%4u7ri!pJ%F6#dkj+!I\H".M>U%Y/!pMph.UACNL&_b3Z!82a5)FjH!6\l[f^dl5,=p;&Il_+@H6>Qk!(D#P,!O`t^(!p?`X^"RC20#l-cC/PO%62UG1!#hC^B2FtJ\8a#e?R%4`X9:m4>)$cI11/=$[W*\(nOFMnm_hSNEK8U;GT&83F\C[BER\%eb1YQ0,W[g+m#ej/5GQ^)8U^e!%Xc[[H]>0N]SRb)P9?V8;iM[XbpC&d5<^[:s<nth3$4K'Fd^b2;]RT,lg0mXtj^3jf/8c63[+q$R1P&d^Q(r,\B]C!EgXn(:[MuE*%*KOgEan9$M'3+1=m\je3\^lQd+Ka4Nd()KFUI>\@[]lTlD!@nkaseZ8>6dZ@>aa?+`K^Ar&mTOd$@,+(LTWK+(^k5?3-`piBm3%n%F]@B(\rL[.3N>pFP:Y64p`gcd"be(MYH:Y-7du\r=YGqcn6Ah)45&7flP2AN@kDa8RSD3Od(_<UI#W^'9a_1;2(r%#mASS<UK_Lj%_,TD-5%<0h`'ZeD,ERRF+Z#h*)G>HGi>@@+J_L_lU`T5Gqt![lVF8g(LZ2m_So'P+Wfrq*h64_"0C!1MQ/Ks/8:5hZ%/VL.4guqG%O6"D%1V8WK*+bF5fX1We!QAP^W!+,JVT$>9b9aU()<bj!6t")$0:![UY,065bb:<B:X#LaG*&*/dO%158*gK9\3%n.G!Q?f'!"]i%a]9Qi8VUe;Ps#d3;9Q^]j25=):D`lIMEZFZr(.UnV+uG`$?B+G%;K"gP4)Ai=rf,/-*($X[NSA7rD'COLp@7&ff&@XXB:T?j,b9n%bAKfJj6TOC&$ja`*sHcuPsNH!>\-!0plfm!IaT)DZ:DURYffa,P`gZ;%0p0PE:NG#j]I):UkMs-[LYF,?6`,3J'M6N?I[o!T'LtS%4L_-nQpae5A_R;e'i*.U,@Dg$%<*E!$`_m_s+#rqNGQB*^F1C"n`6#p:!dF2/AsGKKrF_tb3h]J%C5(bF&4r3[[MgjHI\fNBkFdJ%lpcV92d<DlO+n5DB"'j-=h8UHZ?=ULXYh#,P&OUjT8_aYmrenFX_Ou8Wg*@s\OO&r;hReigYm6qBn%.cc/se6Ng?'=jk)9AX`Yd+%lo.^qX[FVj4I:hL3i;%2X)h*Qm6oc=X06jt[[>?\inU(CW\O*Oc+cK]5;<'s>:Qm_:YJcNg0_SEmdGY+p%n";Cn9c1(2/WqrZtc"%)O(0A[lNPF]@/r^5:ajC(0JcDZ9O:>=@gVb82,OZY(J'H%5S0)+<4ck?4mj:e!FnL%k[h=jMXKVMG*iGk\oJC:`@0bFB.KqdFZ+/%<cr5)`=e0keVF)hkO`L@ftSniC],/P)DPt0'h^';s12P'?MaHTY=.J5BPIM9q[@i3.oq:OX')'=>O:*)bP,k1>0eGd3(i^r4pVI/%H*oQ_Z@eZa>OH'EI;_%-DrY(pQ>1ZP<;B#/na,a#U4/m]kf6[:@sL)`NOL.Y2(bfOb#K+Me'mp039Ubn*iMP`K<8JOLedJG9%DTY%1Z8/Pkjc4&!Zhc[Ep!rclDd]@N<Zcp`'SqiO77)IEDqa,Br!9,Qo]`PN#Kt"BqfM=l0M9r8Q?fos"oPc;3+@=K5@&uSagbG!kK>Y%T%4*")A!q^SsB.oGEOB?QISaDf#$s@D3GG&0_iLfc^(kqm%MG+.n-Sc\#@otb%UfK$#$,%B/jQ^gJN,*rM>8Bj'(;1b9#2u<k_#q%6)U&4W3pC4?8([),`5*LCWP%-_]%+TZIS/Ce@HK86).4GIejj>Y.'kUCqYI`qHqo^F9DuFA$=G$ObU,`)F*aG1-q:EG@IF\Rr+TZ%*Ch2A`ldG9AW)@5;.6_n`8Vc!9?8"\E.NB_f7;Rq6#ZE*1V]#^r^]>D>O,RZ>.^IXe71r-O[:jJ_MoQuD+C.q-9C!t[!l38hS"FE%BA7='-/M?Kn`?k3c7+%XNDhWkRnq3ZmWCP%/ePg[P:gA-BJoL6X7]5g("#9$c!o=hmJ;H9Y/)?G$qI=<]6s/<fM/c7c"NP0h8Uo!%DRECfeSV*'S?!(0LT.&JAA`;oQYW2DNhTbd6A]e9#9?gIG=1QQQG#95pKd+E[N*Y-6[Q7U*SZ&3W##J?h!B9efbpB1ko9\!qotmZ%U4.Su6X&1G(!p4>Y]JH574Hs@q?P9]Bru`%;f:&G],c'lFhQ>KeN7V1o8!2c(SHX;[@'4OP>UMPm58pT*ieo[N5C=)@*7PT@D'3-%hMOE^Ei]S*LpI/;X]dZ-S?gt[o5X(;SY"md3]is/J#EH":qW62qS87'n<Bfe,o:3^B:=EEUFf7eO6<7o"U/VK%m-+7lQqS1?.+s\%V%.7RrWUNBL;:*n!SWdB%k/E4'9T#+_FUJ9SMV#:\]moc]p&FDegVMQXAcK#@%F%bQuP3o-AUtSY0lP.%Qj'9'XuiC@71:MTRZJE%pN'a@0\C/.dtI`ae+0\[XuC6'aM1McH'H;W5s&Y3ic'.*=,YgQ]R'R5]gf1iWkIO?N`._?E;TV*B<Ilh,fHmYrj^&C`=4n]@u1@9%1)tZORu?m9`AYku/%IC\FbpF"i.pL(8s[ql+V4]jd`<L-aHh.sDpa6Y<lb*X@E/N]GJlV7kAI%,*BqY;Cda$n;HZoiHR$$poO&Lr%?03&O8!gguBVSgfBq3q8N]G3`QaXNA'lg!dX8_,\!Mq^IG5ibP6CU9IV2s,rC[(_:SG[ssA6gk[(d5-aP>Gin2R4SAg[p7+6Bs^e%E4+[npDhY*d):%a_C"[6W.n(P?"-DL=DM:!VIcL<XU3.6(EUigENKiG&kVi9<hgG`T+iE!=WAjuS7alebmOSCB[H"p0*iAm62q#7%WBk#R:&/G'qo&od`d6:?V_SP-]%1cBl(0lF4k&[O.h"=!QI=mH\_UNaD0,dRGAR?"o8i"h[p.U:grY#7n</M^Xs"DA>Ebu%PcuT:%Zupe1$EGCsBpal1;U_5(1<qH_m%*[[EKdZ-esW8V`$3)FM>6-HTj.hpp&s/(OCrC\5A>9a'kq%5Nj2^tX@'05Fm.f3$X7)_?Q2Cs%=T?$Tn-l&U;8uDo_*gJ-MmI6Lot.K*ldjd!dOqY74DV?Z'Z5-@fmgH=JIL0`<VGOu?=G6D\-M%0CL'-<f@3S4>E`lfN(!-F06P"<%H,oq&k4/8"NgSX\46,;YoD:Qbo\Af?48%W?kEOhHTn;5>c#t<pm<S25#IQk*p*5_7BOVZ/rV.@S"m4&'#2_MUPJ)mEi<XoG33$0M%KcSVVF=6af#YdAGMA>aV@%5CSb/AJ$eWb==&kb;I&j?XpWVWq*N7^7/MUFKu;hX35S\MPg'HBcIl@h$S$IaZsla\QF1L_P['.-j>%3Fb*#Ki:d;Xq![e5SatMk!enlZ$=j&KD(?<S1*`aG"m*Iq]\b%`2p=]4(`'DVk&iB<F$-&5,aT0j4tTUUJE;5?a/H)C]R8,RqK,+%_@STt8be3E&[gsfF#Mi0ls-&6$Djs'&UE`V7&#m.8a6o8+#.DopPr[iZF+#'Kk*BJ;Xl:\L;'j`rI,`oZi/T:*4"/@-64hH3*Y\n%QlkXK)>$9%\LaD16c/<>_1$K\fe0@E(AJlSMl!Cu\0HB#^,[srr@CX>]=&k3b76Qm6p8[NBg]"gD:O*n!tVeW(DN4fYWo32,C7\i%,q<WL_shJZ=I11=f/\efDt^NTp'Eo?S4gn!(qSR>G10$?%ZW/#q-u`+>D7uO63Um:_Y,q5kdu^0grniq5EiOF4O&Ai\/$b=/mM;[%)m]`qM+99uBG-a8Led])LSkCE>-i?K*HhRfK]ZNMk'%'<G,*W(Uu;e$fJDkSGA*YVgV'Oj+QJ%\DINY=Ebn%M5WMB&PQ'cdDPRWW%W+EB9;i>^So$Vohf/uL7hd041)IZu=QdRMs#[,IE]tm[f/A[s#1&dQdN0S-Ud3XVibVA>_Sr<Ac6+pHWh%0TN]5[f0dM!@^b<kRL%bmOW_h;JAqUJ?0?K,dVKp*T>#k<eDIgu=l8jDEm&:>'3g`rS\-B7)2./2SZHbjQ=>4U^%CKNR2-kOI-*O7s^.I<^+Pp?qp$qps=j%@AESXoQ]c%IH,V7`r5#R`F^^Rs4r&#[-ZURgN`\XdAHM[Xnp**c&LSamT7Q^B!>f,c:u4?QbJ]EmMioZXFJOOh0<nRgY_50YZ<PQ%)sc#n4_aP9:cNdtWk.`9M0=g%LQC_s>jh=5RAm3GpFr4HW[t:J+.`m5?To3p%kIDGVk%Qes(lmuI.*2AF''kO^V;@JC#+6-=XkF1%cOV?4p:DCfqJT\gr$/sXbe6#ddU]tt:E'g>.\AWMqRP(%V>Ep'b4:b9@:k@`<V[<ZX`X@&X^>aY[,.o*(6/X=A,h0A_N$j!Q0MuS%lc+Rt\)6a9J9&F"q<2l)52H'=HId=aUTbAYq)uL)EjO"M]W3oERAKDro"B@[m_2jW*]s8b&+WBeXa>bgp]%n8;7uk=;N-?S+2)rK%o6@rTYFXULk.U=oopBAMNRaKTC]==r>4_@W7\R6^q"@>KhB0X_FnaHg`;e-&qX\2YZfJ7'q6Z9&f5I;<HapW#lC\(GYj)%crBi[(%X$8E/SZJ6*`-UZnrsc3W^E*,gD54Ae/?[Q3IEg#lb:E=^6He7MAI@9qQSs`I*o)-I^)sq7=I3YB]pk)\@d!?r#B(M&f;sUoT4lkI%m3Nn=Oa$OH0$-WPXnSiTI!SaO\`9e?d<sEA)WmreS#+ZhK3OT[pHJ4g((Y>2VGX9`B$!%-m?p>6mld[5:nJfA/\g6+`V\a]GqeQt%oaF7_ST4,GU[ii6o_@XD)X$M*#O@@&00doXC4p$.Xb*TcJOY@V)M([=!p9'k*GcEM"ESJq9)HPA0[>_"mt:A2T&2&H\Q:gsIIX^M%X53cgi#TIZp#'Ous&"76\3@uPs'FU,mo_QMIbt+sr[.8OHmlc,oC5Y`Lo#8_9L#/fK*AA^n#7kjqbHBp\(i*T_Q^F0pE&-qJ'0?q%,A3=bqrYRN"m=_5b!rRYr7Y<.I/B:3-ubY=%i4X%rHj5npj&BpUP(#j/puZ4`M#%[lh;G1QRenu=YQGZC[gYHdH#9gGmBn"otA1[%q7YsDiE93AX^m%PZLI=/2\<D&G3j"IR31V@E$pSobI>',MT=T!L[p#di,1"/p$NdHp;;$4#dZlSU\Z7Ns4el6Ha*'R"Z>sAY4V(=%?XqpT"V#XiT"`9aI4f>:MMKL[_gHINW"^2Kn&]fL=G%uTQM9lc4LR2I55\6%\p*c)(_2r[^`qJ^4ZQZ&@&d9=d)+GTiS*&3=_u.5%e`#!U_3=;*#@Vjqh0D$#OnEAcc=+!2DgH(K=$CM+GA]Tk)H4$bXkc#A:#<F5ijF(#iU[T+A^[><^lI)eGH#o_a^Dl'Rc")8H"j\^%E4Ngf*8Z/0jnCYp7iQC?T%,=Pi75H`dXum9q%(`1DY\bEV,b(fXhB?E+,8nRak'`P!@^R?`eO<?a4jTJNt60lG?Wh7a`ak&:Vltb%G5Rok]=IitpUfh:;Sn+1rV_^=s415UqK:+(E>`t=Pn*Dp5EGSiSP!JncAc<X")Mj:!gRd:`pTkWa875/SgMk^/i_6+Sau`mqEs3#%X1+bSms`%Gkb2Y<h>H^>NHVS[I+:L1DIA[AdYeo;="4a'mN&lsZlIn=F7[)iNMSu-\WOe;qAAOr+$=GtFZ/(rXSU[I2g<Juc`cs6%XW,$AXZO:I/t,RneIDHK#XmHqBLE)@O3RRF`Q&nj.'kbaLKbB"^D>0E(9&O,oldCe/%kb@HKtlp#V5C@q$/Dbhd%\u=Sj2OASgo;%Cbdn=5Y4aO^d^!;EHi7hDfgdENVk$WA"B&22VWlti;g7#3-dssa^fu8.HJbq_U`G*GSV3,S4/8)Ue0gOiY[]c43C7^Z]96dN5mY'%\M5;K>\kLa^X=[c-%>,^*[GEU([ob*9:L5N`g.dS1q!tN#FQ<f9k4g-7bR<nW/A@<:jV7O0b0VJdC"?Y8`VL/&k89QBrZF+paaP?%7);D;(>--sWJX,U>\9CiF.)]_.4*4NG!(^t`l;5HQo_+DR3g+pLLXk0Sudn]nTYb;@bd=<N_QP)-.]\]`/Le_UKD910leI&5ulJn%L>1F,Y`LUl(#gGIS!MS2*%mHl@QCMRnkkJHBT`BAd^3aa-\euNbcqD!!lArt$d:\:oSM8).J:A5\O/(/?Yniu_L+G[F*R<Y_TE\N%0o(nKHh3t;feC[7bgM]O-i:[mGM,X--GrnX%k@I/]t56L`qGC=jYuY"MCVp,4V:F7U4Vnd.G51V)&!)^?bcj&9;H03#RS\4Jp//#%^H3O`c)1F3&(O;/55G.;jT2+Zh4k)rZP7MQ)h*(orh38:nbB/KS>EG3j`fFjYOfAYB;aj<e^`d/]<04F\C?e>@cpLVI.7?c543jD%D\WZ7(rN<9l?%\6OF^jT2G.[-f^RMYYBTR:+4#.'c[0m9S2<LfIJW22rl*Vn&19!P?8%j3l#0!R(&CqD!k@V^E]SEc?(<u]S2ju!%+h7[bk52>H75%8gYPPl3c0^Q'2OD/o3Sq3Hh`bA:%%WjpAX8M$:b8;2)J@^knlqC-Qack2jqhrYrU=pn#iaUN-Lg*DT>&(hkTFmr%EI=S!f\P,VGUSYa2;!&o/A/U+*q6+MZuY=a:[lMUoHscV>ITO2pYH]fRu\VnWO3Z+dmu*3!b.e&`/-2#Z/cg>5:-$@V"RM6*`Q;)%Q#J&]3A7AAon_]l<e0S8/]]L&pjY-s:EURI6naE_:ubmDci$@Bl,e;P&CU*SAQV`uc1,4Lh73's=H^NV<gIJ"HrW4TII@Kpkt9(/%djVO,;Po=8+CrC_q8'1soCU2/I/\6^Au49(rb3s<Vh&%M#PW^Tr>>>&lLVlnm1#`MrTQt?i"+]uj^5^VI8_TNBul99fK6PNs($AY%D,aj^FQ4?d]]NUM3.Z3$*rg4imG=TcqthR?T5q/f\JKs`c$L#UD]ct[]7uT:c\3%uiJmVe/d*#,NRO2E:?3^Aqa4WUJ;eE`h#I#j%*%AQpWbscilJCP[[BD@%T"hQ0ir*eW4s&Su*IB<OqkW`cf&^>dg3A#jUc"e[GdolC+r%RT\cI!@nSs%LM]BG4UC+>TY/(ZrrUPEh%4P3bcI63cDP$)\g\+RYtp6Y^6le6]Q@'+!>rn+FUS#7dj3fb(21.u&VdQ'Ec@SGTu:UE&@=A%tgP82&pp"-F\r2nCu'CB,+]a7)'%H]LFT.sJF+l]mY1_7KC)rMR8?7nf',-\e`M['rlf5:1ir\ifPT%njI(`lc<Tb:b6s7I>B8<SBlA)?f#'l$i"V9<7O42h[g4UXeDg%o:O+M^-_6Zl(PDUD]cRSk,lMbeg'Zn,D!m.Vm&%c56.a.qW3'J]u,NDMWG=:anu&!f3i+UmFULsiR<FSNO<tqjA9Zt3HkuE1/$]5%+5DA74f,Cs^0A!%Q6B$Ge7&;>XI#[L<gCN.mq1+\M(l"&@W1kIG^BBaX1AOrmd]c-IA?b?FLYC5bUf%JG;b5%G9d-m>i0GT)%2d1%Ab'O!":T&?S)7S$q'NjXh*<h+=3`#i@!SNV&e=Nf40,")R\,4"=RikE@9jN)%D/BjWus.I]+CY5n[c$@I_7^*WV,K@.4k&;NK(-&%lVW$3f4pZ`%_>.joBDbA$3j-3n^u^e?WS`#SaaqW/b>Y3b_h2&rY8:Z\Pd+3)M]Fg-QfukCKp6df"7W$Q8I,%f*,@S_5kl;EuRu?%[7937le*U,<_>jViHD%7GpiF$;U$c"Jt%="h>c3a=PJ/PU'41lQnqW.q\'M+mll?OPW&+pHQ-><b/V\TZ2&@F^TggBWd0Z=G>F)L%Mf0[&kg39-`IH79Ik3a`mq`f1\(9K]_LK:F".Y/:Wj;R#EA`.?7qJ?F@'teN&@<81qMX8&LS^c8T,`?_Rk$fbe@Z_278Y-:Fr5?u%kWV2?oD?s"9)!u/_<QgDB]RF*"ad_-hlZ8&]X8.>h><uFq9,F+29<-%Hnm)l'^dSdQI[t_fcTg4HadmO#g;7@HJ#6t;CSlLZ4WD+%J".`+:N'9kq+hPGDEN7NG-#e8cdam?`\os$QhU'"\8r?FIhke1aF\DL'6F@79U5%I[.!JJn-lV,]f2!J2BG!G^'.lsC)aW/$kX4L%D@`<TSG0e3IerOEkB8=I<L>^#b&Zn\SE8hb91V:iSYY+f)]eR*c`u%-jLY%Z8.e%=nITJJE8tNkcMQuprl'5jOdPe"MjKE$j#"E@%gp7")QGL^^SK,WBQ]5tIcXSo-WI";j%IUorSM-hWn9M'VE4<@l<r_MLW8q1Mhl%MU-82V"\<XPsZFKa$l,APcWuS-BYBEtsAb0lO%ZBjDD9c!Bg10FOh<UX?Bs/=j-FktKP>&3A]rFp-+!T&4X6!Kd.]m06T&Zk)m!^4%XgjWV`0F%EYk3[fDNP"pZ87>k8T?mYaZ2Xqa%HlODd[I5a*iT/GEo0:FTe]-&$m[I\&H=cp*Bg+ZYj5nNXBmXp1ZIF$4\@df]2XJ9c-e:^$#/R2s^nO!)]YAg"R"t^6DEM%Ch3g51%2S/S][Cta,ge+n2Hj"L#jNO8:0KDW*#&LLu)(0HNpUC1hA,khsC.U":UsUm&T'':k:lWu0Ep-h`ZhT2[>.,AaXS6np)-T")*dYNt%#tAB9(X%%Dqp%8gKKFWffZX9FJi3Jl+L_YuE8qi`oB,u2T:HSME[mh`7f19d.n0Bgq>Q#A!8&f;l!f/8A@6p[B0c64ql[X1[^G[i%G(6ZU<=t6g6;R=;[[68@J#5'(Saj]@=%7qb4Apg%IPN53mPrkokpF(>W^:[]`h>Rph$#NKXaD&Q8IY@u*7Mn#e+Ko0U!;+ahdjaW%]oue#E&YO]q=I=]7Eb#m]l;jBr6mL!\[A?uLaj)6_S(?'V_7mCHTSk2qsT;@UHig+QIbO)^67,P\>KqqGq8(4rF)r8YVS<4KiW$e%HE/uS]-Ejj#TkFsQ7j?3`gaVb0_"Jmo#:ENcbfYEJ0pp6*7M9Ug!<0qdsnd8IAS`YmM][EJb&,c2K<TpR8iVIc]LV-pA+/gn7ZCk%rTRq1H!_[eLFd;e-KeIuLB?J.p#Wf>J,a]TQI`86hNg'SL/nii?'i(Kr8#=TX%(9N"7+c?cPu>KNAi>j>Bq-g;Ia'[YCUn-o6V]p%,U'AZ9q<;C]Y>?M5?=[;oUt>5$Hgo8jQG"8pQb>KlQ/#ta2.E:3\!k]/84AlF=un+Dqt=7iG^W\oP<Baf6c8"RpJ+eX&#O;q0P0r%Rs*h7`1K.4h+'S@1qPF7n:OFBJTER7$k>IUk-rTlq-`mg%;>p?d&gXpc+OT/odjrtr-Vh^R6'_,2N2eXF,*0UY:!d$-PP@tjj$-A%YOQI#`mresb1YOqnWgZ$RtLMiGE:'2)Nn+&r*rSTJ+pR)E;'82^,it"g\#k`&=i[kAtDMY(##`o.HqPQUR6a(ge5cTaP,8e(p3I,%chT^sS5Fga0)GIsO&N)TIAc+^B2Wot\es++\/R@;<fas:4Y6QcHWs$GJ,71aI/eg-N'S58XDpdich!aQE1be"rX&e\`I'@GmofKE%1&_Uj?tfPuo(Qo4)D+CC6)DZ$7_d7;];L>([)p?6<=ef[e%^AW/(d'Weh4V+qmT#c^AjL>:L]=0^C`\T11'.'WR"A/!u6_O]eDE7%3rdXLhh`khOu=-=K<]R+3:JjO6&J],g)NNsbCnLU=7\MCCDVd0+"*!YkCLgLp3N%.Nc0Ao](eb+ai*a7RUl3gGPUmpc_3lnI0T95%\TbRTj.G8c_:Hb#VX<GUfZ8!'*ga(C@<Z.,GkeKBYeE'MkipqK9lYMkE4(1ln,)\NEU]GsGC*TLrKuNUkKSq<l'%s5+_#arAp,eH%4!W4H/gkS8Q[\osmaVk#+^BgG@fQ17HH:(.p>4f$\a/d^ot/1]o8iLXL/Q]$8ieO,o=No#*jtgAI,5oB(C$50hL#5g,.l$b#Kput%X&&Ed4Wm1)m@%nQnOISm&i?-U[Pp7/j05.$\aaTSraE6^GNF59VZgNh=k`*=AS?]pD4dAJ>2NK[i_:I7?IE(r<nO2Bo6_:OVNe@q%j#<3Y@Huc]>aq]Og&&*R\rdr'N@o.1L.$0ZA*c1,gn.`E`XW6FqSL/3++<,:D_ErQ2$^#,WMIke)#nM$Y2urc`RVB6q8faF974Mj%-flW\g6+"B,8hQa[I!]TH4*mh^E9=f^%Ads%+ut]>^?-nIiiRs?Jk$LO71bZ_"EK;/f`$;<MY%XCbrV).=Es9RZJ3[;6:W4<o\Qo%*Klm63'-)kqda;G:)FY>gEWL4^"N2(Ei/OWmJ)IMpb2X*P<F9^[QkVNlKqdDQg"n+q2]1J?`h`?0A`>h@=)k&H[K:aFJ8-MRG4_/%iQpE!m]f!+l)4,[p$U6%ao1Y4mA$NGEF[`Y-DliZ\9k]3EHofT[9g=VE(d[9n=@nX$\9<0q:pJ_S/oW@jB#jYm"R'UQ^=-)bPAE@%cPpqpiTj1A2YF2do(_&:])6U>h,sNfEdY)H4[4@+Nm.A2WY`9cDffuHj9tXijV:Kk-<.I`_EMXofpB-R?X>q0*`+4olc+Ua0@NH]%p):$FIC2flD[26e!L%le8Xb)'BtR2<gVNdNb\HkP:Rq/jl*`eG)QZ!9o;@*1\9^YP+"sHP4aHk6IBo3sl)K6u:9L5?F#uPPqb6iR%VV@nFn*fCRIt":oh*Wj!B)bMQVn;)Jdpl+4,b<N_PAX_4a0s"r3d(H2>mqc-kBH2"T8ZNJ^[l*lZZ8[$^%_$\DC]Y.`lc0\>X>8o%Dr8IUn8psoa/?r"YL!);VjpO%GIuQl2.1<l*TVCT\n2rs0!Fqrk2;ak-!\)f:@IF+_W6pTR4WMBgpjCPa7bQUF-o"2*ZIpib?.T3%mLB_=3d'9UZ_sVJ"I#\:Z^7;6*Y&N<S\+ChPs."5e'm"A01DFpbjD`l5+Uc\FfP?%C[[mb0DV1,/Ip)hpYBcLFZTB`DK7)gPkHD_%8gC\"kB?DXFcMNBQ-f;rgM,!VDnkba]sX'UBs$8pq>#*.@'3gSs6[_t@Ss$>`p24PfDJBFNVUD[+odokXn?<CpoSaV<cr^N5*T4.%g!@sN>2JA)gQba9hkuDbJ)!Gi,FM;BrNAA"2ilg^MfFZdoq/Pb]Ck4]77!hXYCCo4Ea$uWP-I1@1ZV<aekXP6rHWGOhok19\Xi/<%)RKl6h7VFMNP&$&q4/Vf`r=Y1:Yo>`HT'Jn56(CA4I"Ubf>37"Kq7Z3ffQt0:2BffF8`@YI,01=b3sGqmQXsES!qXkoP('JY>aH&%kk=>qC<p,#!rpn-^<LOJj`e:!Z[?r-p[`$8Va#BCf==i$Qc?T84*If/$9C<VN1[:tj8#6prqCNL'*`WW;sK(K4^0"X-sY\srr(74%Jkh@;NTIqL)nDLDT>u;ikC/F)+/<^$T<grWIcd9%:+u"n%+,K5hmsZ`:9D@#TsaMd[uBp@aa%thQ?5a4TNc1)hfHa.VdHa#^-3$#%X%qPa7l)sg5.UGC/=eC5S*OcX3;2oh37CU8:q-*eY-^C<F/;VJh\oVU>)t&%cC16_)+HUZjEq_7A+r\MDK;Z=7<RAZnoAaGJ52(t%V_9^p2ieRMDKKMPI<GQa.S2EX\Q@*.DpRIgq*@a>%lY;;?@#F`LBFH8PD-amn!WoWMgkV7XI]+#-bhQYIU]u`!sN&\*Xmu[7cX>h%j(Ei6!qYbDrVCgZ1f1%Cn>GFtmrr2t]BbY.KtdiCaHuMX?iOB$%`U$Mq"q]]nGTBVf<*GU=f_>LbFN"4P$^!qk4S07>[=KIHl]9t%XA'_Lb-/PaT>Sm^LSK>Djn+nm1YK!ALR/tW%sbntQWkBAI4>*e>Q<eQGO_ja99[iPMWObbhLFhb(&n'uD>.bHnCQEuf"tbaCVu%c%hlb1n(4AnEgABqHrjlMu1IoD7epm@3\\D/:og&8eqT2:eYKQOlQT'W5DHO5.B(:c'G?]L5P6J_4CW>r;82TMOThh(`7h><"B@X2D%or0KBXrX%9Nm&lc40Qr^Qa?q)BNu)I=B,4]]`/JV4t1PpjieIjZgdbd=oM%`1$bqP(?T*#pdTL%(?W@6r)3i:V0d%Cb9Hr]`qEVQ%]a9`rrEXeRLcF9bO#8o140J?=ff:L0Co5f*U^oEPR5SI;BG<2+*BXan*IIERXL2\kqYN,bpX_LsGPZ?I\5U`EbPQR54N22FH><CM%[qt:CFR&P9cM<U[WH8!NYYu/Ys3-EcVU(MZS\e,Fnudj2^",8fp;oeT\d^hVlt`.u%h/(WS[.r2GA:cV(YX@$e()'0Vo-Pk^$=FN%(3nO_m$+pXJkjE/,jkUgl'1=nRd8;::2,8dS`3D<r>0W\l\GK>-\&9th=\'K[g!4%AXt%0'XXLt(-9E#C0,>jW-eM:D8br'pZq]+%n"%2M5NoI]n>=h7I(F^4e+>ftO2<ut/J`$F-hE4"2N[A&cokFmMrp\#=a>Kob[k13/jo.BIsWQ`P(.)8L9;&OYn!?NpAW:bnC1Cl%iXe%''<_$,j&+$RX$;o+EEt,jB00NrWr&4GIeD%>p7po'<T'g.=LY*rd,_'rjJ@h0M:g\%`1NNqrqN*=]#Lh!AioP+9B]qeTC2Np%XR[gfO:QOA0E?h#I3_u:dG#Bten2-JOC#`Tj$j,/2Ve:\rW``)/Sufq%I,iVcO<Dfdb4L?U$hWA2)oAbI^G%qOI)KIjj3[Tc";lo%J(3DqR*V2X@!CT-CAl6_q4GMEN:q2)Vtp>b`q(-H30lKj.'JCPMcG3**Z72]ZDb98-&n<;$ia67S#TISpLpfqNOORD$!sGRZ=)8K%a`HbuT=aNegjE1jh"Jlp$fAj]no_,N034P7$obJ`e)`FPYmX]1XVpCVT<,fk$Q'C7[=A@rHLf\U'Qn'9!Z-f.CjA_R;/9f.jKID0%G]t=c/ttu3a5p(`\>T#!ku*HfB?u#ifP\.IX.'2@RZKUmV:!MgF=F*3l=RLhTQ\)$N@n-_?QWL@:`bB8g`^b,86ai9%!=Zs+!.)k%*A&"Be(Bk0d5SST@h:m)#8bB.QI:7(8#ITUd4guZ3r+c'<?'+sMUu-lnr,ERh8Mud\gs[>P*HhH8+3:$fkZTgRUc-Ua/BcLBKusb%N'kdXH.tn@VJdm^Taa^9d>bY%o8C.e,Aul7`C&(n`H-</boPK]lK)g/,j1,U\&4%,/Z`qb&rU[TZuJaA=.<o4<E[Xbn65-2'MK6`%`oL^ZAq%B-MPXL+/,Qr92-F^#Hci,^ld[hac<779a$fE_%-_VPUJP"ZHr8q'U=.GNMA<^9lY?CKG*&g';T5AucC`h,L]12jU4rPM%h7ZUQ&km2<Z2KFbj!(M)e6#nIZoY?<_Q+S:/iR6CRA@"9[Cp$^0-+<&1e2>$>Yf&ubdmc%@(<qq]RE[=:;pRR4DT5^@$*dF/"j"u%UHdR/pm@pdk>UKsCer*MEoH5mY;J[MiirqS\V?3f<jFWf`*6T>j.:h%`^d+7AliX-2&=A0h$Eh6iECsbjO-]mD45`%2t8X*;4-,u%PU9Y.dQfS!ji>rJ$/'(r&K?#&5XbQWKBrA($T>Nu-.>FTEGgj1oC]Dl3OJ%SFl<1<$QTp@2+SDI0%"*Jfgc'oXI#t.[Jj22eb_W:%OQMiO\Y!g=j^PbM"'A>95ZN0GG^b8[QFp78d8RVCF+6Y[P>?RSs4.e3qpl(L>'_ukJ%i'4S0=.*QYZ@1f]7__J*a31W?PASMcH=d%$dBa$P%_+(,k9An`?``9fR;`G7%1nM0UFVQk??]d]h=$d4k2Y?A\NhWX@kH5RPL4G`^=d]Ok/FuN8itP=dkdK88@m'G*?_b04DJm%HR#t^Z:!;i:Q+<F\2O[(Sh6NFB<!fT<qX/KaOC:+:T_CU96\.%i9kShINL+6F'i:/'bpFYYW?):9\/uNb1#jE;PiR5Z`5k@6*W4C%n`1&"1felXX%Kk,G+t&fGl#V(;q8WjcQ;q8)2upYZ'GOOAk!I5(qiW2%@9km3M(.9_Cq3.+7M`aD._m9d=c95-(%H;P88Hd@0!Wh%rGJaZSl]-`ZR/HD>"7!Vl*@ZW)*ukJ%dCR+bXE1f#Z_E"q&>\9_5\VF+k::o]L_(^\*!:"SFb-WT!V-\74X-9WNdXsCS&"8/;k^%%.iN2Sq"!eu,+;\bgHc2'[;qC2X5$J(ODJbj.OHe8ZqGtu8o.3KX[G:^Q$->tHa18Vdo\(dfU<@G`s2iP],2JZCRg<QVV7.<_]gJ#%f(tl"@0LY'`iOL00tm]8!kFgGQ'P<H5:<(%;Cp#=?>kT<383\82Lnk[UZHem(274>T%i@?LC$J/XOgK0phXHb3EiOo"::'9S>4&&%\bc!("!!;D/WZ[79`*=7lQ!%CG9Q@\cdC*3qls4?V^*0;[P/CcE@,H!H.kMU#^q+PZ_7!<@D7c]N.":\>E[7[i#;p&h#M7:?[`GJ%(UKfmRb8n4q9E1c0oH:N2)\*eII1p/ak$:rg$AsM+4A+*Q#5cM-2nJ[Km#&3e5X@pR^Z3i[4c?Mr@l_rq^E*38qB:!M7bcc-QR<4%k[)Pk-?*Icn5YAtV"p!:]1>R^Jr[=8hePc/dIZJ-D2[lH>?,U-k.<%+L>Q1_n&p-`BWQX\ro?(8(:G^3Y\UAQZl5bXg1a'lf34#B%iQ%c3\!*TEkHtq,Y6F;mQ%nD+O?(P,F5,+s,n&&)EFS?iTH-To!rpBe_c!cqPrt>-@2.u.B.kQ8U+bV1L$7:=;*2MWN1Z^\CR;W?%ETPPjH*2;3MH*PuURae+72?L&A\A_IQUFUcBg'4+P^'>\Usin0</;-VgXDD"Z@Zeq52IEJ(@)X!m)fZea]^[8/kjSAc<Mm(pM"/=%[ABri>aMXbbI47e$=c$"\#3t-4Z-jGIG3KAKSP4]b\p4p.*+]m:7fudq-^&(!b+AH9th@$W($^_8qX."&Il[T,dNML,0slVm>"ri%6L=eTbJ!oC*e2g(lQ5qL]%fG4DkEbADE4nP:/5\@^P5LM@Z;+ER>R[Kf?fdacnS>a5Rh"-Vd)Mh==r07%:+5_SR*o#:(:KS"^Oad%CSQWe]Rhb9/_EN%?$QTZ8[Vr!20@ppFBgEMJJu,jpJc!PgGO'^KU]!7M_0iFCZrnkkZApB?:1&O81pkqgDsP@e$b0Ui/9+:1<D-`%L6V#g?##t@4]8CgC*d@7IlJ<h.BEF03!ZI0H@IKBV1!,`VoAFsZ3_Hl?DgRD.<J;9MT.E#W(Jesc+faOc($3H(ggEUj`stYk/Y3M%AsIG&kEk^D2:>.j7A"7A8-P9>9fuKg6cppI_d$@pR]FABQ8>K_8T%=>"]TClV1M8;=DflblYb`,V_OePf!`?YGeCM5C:/r<DWsj9%<ZQgOagC6uHAn]QXXJ"L[Z['o]+s(ujT,UG>:u6hK;;2iAnK,)VOAZ..9s![F:+>e(pUWYSsr_D<o[=!.kMXP9U/%Yn"j<[6J57n%.G):N=0+H!DVNWLji+N8IB:h=f$&,Y)a%]e,kUJ4DURkV,$(auC0+gYR&2<DlbJsh?'XaNhOEWB[nt+hfrY1L2s%Cr/kmiKJgjct%)fspBVuQB)%;IN!7'h.<Rc_Cec6Bc)9m\R8pTJ<P?guLF-Dh1hdb3kuXCE!>01k6"W%t37`gUCbobC+]=PI)cVIcLP-^eq\&$8sf%nS9]r*KR*3S^oQQof8:BeTBIKT5UKm'pJK\I(s6<]j.FkJd-+>dLnR<M0&"4`'<F]e@eo!fS_>q-H=p2[E?Kq;$5Jk`=FfQlt@*e%kP/#9C8Gqmg7^<t\U965RXDD+M-G$K6`niaNN0>e,H_(7bA-*Q:!/tVKKONHj[Yol)U,5p4`^,$+dIOjl)hgcCQX`'9`DNXRX6F&%<"_p)8V(+Kf.!kYHHVT9+4/'ZX&==3mtLVj^\-1542kcSfaOScYLB*jSq^FgPUK"P(-OFP+f4IdBi%h\mZ3MSV2;an'J!<6Vs9Ad%ZdYB[`K^l]HZhnBj8YC-UeZ/F2V98'AsO?L_L3.]1+L;qUcbPnZ9HWq7n0iZ2qn#I:]j'2fc;Z/Tmaj(dnhXK^./B=BGlk);+56+%qE1Z%O%c^KJ"o>U::9($Pir^q294cml$Kq?_al<$Ru+FUS2XbC=ghrR7sca/6[;Dcdq35J)6bcXH\7l/lHn$-LRR;r<[gE5?imqm%?Vj!gls4A"I&nK6+h(XZ=^>=V8[FBoWa&V,0jh,kY"gJf/ZBG%mKD>s4et]F?;7m[:"A!84GsoXMLmI\GqVc`l:a>\HKdgm?$SS<%lfX=WU`M-A$[VQ]e+IZse60.T%p,'jg:;MhGcf_r^^BaR3@BCo(3+c8*\N]e'n%mjl$Bl+\YE%7fBIUkVPaQ=U`M-'Z)Wn#q6>7U%X=[Heej1Tdqj$gcE#m,YUo)R#O[ZimQ(5q!O-O`0S'h6$Xkg,uYfI+`m8p'(4(HNY^LB9)l:;7d&UfVmks-Or6RG/l%X`>XL>odR%LKJ'#ZZ_[06,rNSo126goAF\RNQ;Z>Tss4KCHH'o'H_$qKm(S")CmsO-BF3&P2Yq0<AH,Q`j+C&fo*CsesY!;\Xh<mVk>*!g?D-O%jO-FR.FtksiZj!^:=C[bZYhl<\ER^@Bs2X@[)V(07NWD'ccQcAC2-Sc'rbfk7h\:t3>W\er1T"tMk76^7ALYK;D3>KX1/S,PkoNu%,5($-1DQm&V\9fEW#'6a+r.5%U*:?><'(:F@hRtdoeD"3+.Co(P0rd/gANiG*jn^sR8UPB51\sr36p\?c04C[.9u;TFM&=Uj*o2D%MNura/_H>*PeuZt&90G[Io6W?j&Pjb9&]@>@hnC;j"eSMB*J/-a^p0%IgU6sX.0Hff#JQl:!B?3M-al<XlN?\i'9bA`@'EJW5CG3%1>HV`6*!I>Xr,#)4.V^?H(N)MH>-^@S?8hR.6J(f.i]c%BT@=.kSL_JNTKi2p40?VSD!_EHM@*lCoR1*I<d.*Rlan9R+Yc:Rs5kt%cG+BRlQ>`+iCi'p?fpM&]Ru3_L&0?ZikiV\/g8ksMSrBl?$aT7j-6^cb,[RUQ)&/ZIMCD)"acHF3dRW\h*,-3D!TAZX]+u?8H2Z`%@o7rNF*pqflukNhfVu,rYY\A/f>$p$qkC%<o9)jMa$ZuXCb=6!kc<j"b8.]M7t7u,RgCks?p-kg`GT9NdqSYB^/+Jl'm<o%n$Db;%;H3#VUTEbI^:_>Nn_g(Edt+Wj5M&>phNZp<[s(g,l14!ZX+eaOpL&J3/*_40?"(dc8d)2,c$q0)T<.hEVnDcBX,qYV3SCF^U,0G4%mjZYpjlInbT-Gk#B'&tD.o=E:`t_Kidi.T:K?PVV,MF/_lqD+ho*j0Nf;/0_X60gWdc+^^K5-^Bg+:Q;XOg5(,aW`B8C!VQ'td1N%2p&JgL&8,S3CU5F2'ee#fg9"PZV0@OoD5KI;j0l8$Kmb"mp!-A7]Ob;q-=)f(VSKb,FPmfg:0AM3k_WO'OO7-R-n/N!kNDJmmjDB%53@W7[@/_o%Z'Q4ls)DR`UdNlXJX24$"iFurG&pV>.Tbq4r.5Kjn[p-1[WqrVFrM!U=n>na4dPjbA4-"#pCChVYd#SDR#W_02<2(%b)TKNjjhfDp3pYSl1/TR.d$H3:ed;>CQE@@mp%_UhX7\I\"hJqH-2,<45-*;]"D4XK%&l:W2=>Md\#B*:$JG'FEu#CXhW?8FF!bM%P7?&S2-mYiVKWAsW1'k[\*Rog?1eqJVj]6e<&Q)[Tk_.LX]WcsFJUiq*NQ'\YH@572-jMje4YRtl11PpR2ku3<7Bs6LU?a.M/'UK%Oc^,Rdl!IFSZ&F/>Dtrhmo2/MZV%CG<7BsZdM:WZf=h8FSf!!Wqo)`"\uGH?YJs3bZZgIi/:;b]6L:\jG92\1ZMF9DFU^]a6^4Lt%pXL!o(Y.+$D03"YF\5[`PmN;9bbg7d72/9--koWD(C_iMUoLMh_X2C.^sn-oKGC7J[<1eVfoYb<.1/(/aZ>\l]3N-,+iVkFdB'nK%R^%\8^@8,D`TH9R\bNV7ZA\/)^?/0PkGk7KrfM!a$?)9cXAl6"nX@(a9!2o_FHmIab4Cg\Msf<RX4?7.._!WdHDrB"F4\p:LkTR?%RQI@`P[AOap,.%lqpsi&]5#0WVp,^AF(NZ=RcU#@^!:)n@jt#GRu,;diE@:kg@T>ar%*fti.AP;\VJH!'4l8>SkD69PmZcUA2Mo,%<u;]#EE'(oUg?[A%U2IJ_s.rIrmI0=m=m4X\T]`3:P;)6$g4%(2H3PdB6EtJK8!U1Ca_WM-McSbZ_==sVYO_eZ_=>&C)PjhM9X9A%3`>e+IOG=X$C2Y:Y'.Qh4-f5Wc"fbkm+Un2"`c+&Q0c&H_TclL\Znb\[7,:)A.*2I*uYN&pE)G?.NfYqa@4+-@l2mhbY4@/KhH]Q%\!0VUHS*F7*bc&IU(XXaK=]PF0?U!&H+iT9AP.@@EU0&]@oHV#S[uY!Ib64^&Qbk._j2pT/rIC%ijH5F$#-4eX0[M'3cI]A[+"G[%e^@&XKR"pb[[*t?=J:hMV$QPZBFYo/X\d)8aTLGo%<kZtA^MNB+!AIkjGK#T>M\!BG@d&#D3/1ZB^1>aNnflN[%=5M9mQ-W'?)ol%[82N'2r(7qP,d#eI,p$oZMRsJa'J!igf6Mf*7[jP(Y50?-YcD=oieo1Q5XPAk1$CZ3c[18`sQUgQ&fgprZfo/DWd<Q[s$%3\+9X7%fl0C`g?D-kkI+74(2MW!E@l"(LoJtlQjLJZYEetX]HS[c.LHA7ej+tR6VTJ5JmU%>pT7mB;jAQ(_<KFM-)sPA.V2<<8N-+0-;DJV%;HUpq3E2tE^!pkZWH*$X$<:+U@N(bca=?'h[4@;A.UjmM+Murk-'G\o`UHFKn@!<dImu0:3@s^a=RL_'7#gMA^%bP]fIsA`8Cu:4%O1^^rqUffNNi"l"kZ`gW>`T8RVJ9Cl\U88Y]#Q-Vj\:-,``8e[3";WLeT:=#<uOuuWopZ+=60J"7VqnrrC*_..c/aR&!h+X`J'/.%DbIc&)uI&BV:j8pKB^GJ;31][h<!q9Q(sP.CMRmdB1W4:]66'hZ2,tNK_KccMr&0J*j4)ogACPf=*IZ@mpV\jr,Gt<%l[`uK_P%d%5&$m>Ei'8k(b)K`o6U<30>g#4MXX@J4/KL[X?>0iF#@!F^E4573k0WAs'9^WgMkST>fi6^n?-P@SYf'/?3gF[j;pTK;rou$2#H;c%YL?Z>(-$[(>cJ5$,$XrB0CS&QDF(1,DnkmhkreLPAh2ld8ig8Fo85V8h<Y$2f.#VS(9F?)/$kdq.D&)ho4r?DbKGYkWQ[![[L^-6%`IFj2bkI7aM=g3P]Orl9L%":!Q,`X@jEuXs7jfD9Q4kuEF$=cQ8nT-F;;RnOn6@O7'?>^-@bN(ZW]SGPT[YQ*bnDHTaC]163a:7d%e3d,=P15k&<B)73Eq,e<X->M"05Pt%eBKQ2cu!eZ93"d9;L*"WiRTmAbX*?:[uu>D<cs`hH*WF0ZmHZZZ:_N>pll)2[5u(TCQ5p;%Q>]nW(fE_e<gI&A07$8o>.+@85o'9R>8n2pbMkW924fQXfF5Aq5+*9[#HsI5mnEPE.7%gS=#g&fM%B<%\Pn8B*fkMH45mD12,^E#%\S@AlFLds+BTnn'L*P_B<:#nmZ>So3ldOr+HC!$XBVGj<h*YlIcAF-R(MdWj1nGF`@K>Nea3mO(3?ct3Q'Ui".-<36*OCk]<jE_-%UJYqY\1=:`N`\0R^+M:KXIm8<bDu&O/+fi$cOC0`\%t`'qFJHY:P7+d`PKCA$HX4SZY8B&[dm%fQ>3M<QHhM;L6SZe\R$lZ*B2Ng%;a\u2oi8A&UY6JV!H7ibP]H'P>a:NT2S7DIao3TKpZpAlKfYK]+`ji,mO^4H1tM"/S\],bD+S4TWRBX\26Gu>507p-ZHX,"HCmr*%/%4Q0'K"B;/tAg[WYPD='k#Q1^rki%'GZF(WW=Zm:9RIt=LA@;d@]2d'k#Q15lHAReuJeOec<#-qSQ<`.9%b$0XH&/X]5C&XT?@t%ICon@=jM-&Ofks([0j-Q%:EusJ#E^Y?q:_aJ9nk+`mZoJp+PO.INr&YQh"j3q%#.?C[`hO-^XB]]903OQh!_m8@a?#rhY"MrZ&&E%j-T<ohN.SA>fp,q5B8,)jf<KQANQ7Ll!=N%at"Hr>,#W*_8Wn[[=:*a7OQK9Wd(^SV6clL^=Q/M=pN?-._=68[61:HhWn6lX5A]X%L<@'YYM:XmDi(rPY?sKaQ(AHXJU@?a@r`sbode>sM*4pWhWrdpP,gq[h9oO+CAf_EF:7R1/"^"bGOaX=rDE`3\CL$M2h9uGlW69D%]F<>Oh!:;2N`^J)H1clj>Uc.h(A%k"od`9&.uoIqH*:SSTNbqUeq&2Hb2'odSNp1qY@"i>S!sT[JU@@das7YKC[XI$%b//#FK]%s%/+E.Sia0CjJ4cqa47*`rB.HkEHEU\9Wi=h>Vr,d-ZuN9VL('(6Xa[6*]36g_1#dQYRb#/qjBfUl>Q&#)DY%2Lnq:e\,.4P"rK@#Z%4C$+#F7nL=rQ5q<2:rDolW6DgYIA\1mc,68Dl*#QHqgc-X*c!r>PJ!5XlPX@X481!p\L0)4Z(El]kR.G^N*$i-Q[Bh?G@[%rj=JD%pp'[t$L3!Q8SgkNc0k6TO#NuC#X3^@?[B,df&B3gj(g5<U\I$e%ZjJ6X'bbunPq#IC3FnjA$/::=7KiP;VSh80BLi(\CFA)L>'Do%0.rM>]2uB,Hi;+;S,s[Gq-Li,>Q*8>[7T3?f;>aTik9dUl<ZPkY@%+-IP'HtpRs(l%(C&cfC.b=nCk!n=taaKldt>meo1433p!Hn%Hi;+9]/!:N_tX"m-TYgd8fte!05"Y!>Q)^jKr][+hoG\]knS!Ik,H/!Cu\j:KQ6,0lM'9(_9BTAV&5o^!7K`;IcZH\=Kh,LlW7C(%X!D`?p\L^6RD%.S5p*.TP#_?b^LAK[FI4C&=]N,dYEBCEp:YqO:,W;q8ucY7kVN6F^N/:0>/f1"Jln04'05(2H^To&F-rTiOZce2%O.</9Od-&$G3tSChIjtH;qMfC=;&<8R=<TMi5IXO\f+14aSKDP0ZM&VN>Je]kEI:(onqH^lh+%4M3X(gd3#"XN/=<6?X?&^<Hm?o%b^/(^HK^s1qXNY!07Pl\B't,&H\Wh5j7gHD$dT4#g@*AZ^!H-T?MDR\[7u.Ach4odVmV*CS`_ZooBl(/>/0OWSZ?.Fjf#mrJ*D-c%<h8i90=Q_CfDF=Z[m(*VTAA\66T;dV^<I0M9E0;J^22Y$hG#"RhTQHm4J2Gqr@`4&hWO<FT4\E+m%IF_s4<>)p#5X0]g&%-PFG-4%qcql9F*Oqh[C\VK3nJ6IIf;AhAIm'(.gqgS`lbKc%:dp-q"!ur*Y,lr#2e!=HV_>u=82:+DHpn$0KM?OriL'VKfr;dgV8T3f98^0%2Ac'ZD07'68_'/VqS%(fc<os%_4ZglJAcl!n)n<_aSaiE7c%VE@aK5S#-]b(?[(I6\Y=*-@dn!=pZqR+RD+HCM3S+bq>K/sGMR\,%9%&]t34/R2m)f'^I'r>HY"@uO?TC+02u7Epg"tV79WRMU)=jK#m4N-BF,@Y3Ri8Q>]QKV3qA8%)rCc$LDN=Jnc,H<U?]MeFMq:+5%'5pegEtbb/T2rhcgYLt0F7q%7gV_8#h:JEcq),AQP1oa.*&T7uB+C?)[m!D%O&+q&D0<V_XQJsnJ][MQhnGY@/q6#f_d>7Zh7G_*%G/qP&T5fp!fQ&_ohM.,OE:tWKGf$Qn7XpgnloV'ZnK6uB+5s5,@Q<[LoJf"R*2[qAUtC_E!\Dot%p()YQEBP)RU%^=QcAmZ=,,;W%f?LS:5A/A/2i%&J_RGHuLJe#*XjO1QJ,Id*rmRir'E9b[s7!Dj49!(GITTm#7WlQ1&KQ$SFNH3-mXH;,J,8P;8*t],oDOF+>2PhN%OjIaDNN_"0_'DeJG\aJ,I_k'9hY-(";69-@R(RIik>0*;0k,i%Y6FN4I+lM3'<#-H2m6iFZ#"cefrMeRDAG[C;nZ<#;:HAf=R*5I%`uSjn#MQIc_m=EVUmFj_G^il+X8a6/hnAlo[C!L$]q:s.>`Q@^2I,jTc38!.D.P3G.,e;*c0fFCa3?6HDnCEVX$=?(^ZY@Kqu/3t%^YUhm?Ok9_PHCJGVfRcG0.'A&iqV#`&FI9\(1Cq.^P]JfgGgj_[C!CK=nlhX,(OS9.8rHN9A;B]Nq0^;=>E"u03eEJbJ83VF!/F%%@eqW`!$oP!!\t0lo&n<Yd.4Z"m>ZhY],+H$HYX#47fB!B!G(ZF*>D`uR1K(oe_rJs7=7eVimI.l+NqXLl)QOYgJaa>gTrtLpP&?[%L+uYW?,!mu%[lZDUR<-Xo]Q_T:7B?RF*O2p-/AMZ",\/[]atZp6Jm/J!3NSZJfKq7S(-TcBcSPlg-gL5ABfq8A3e$AU=g\8EB]k%%`l#>Vq]eE>@uL;P0hbF[BicFac+;1(ISW`jD+m)2`l-)e@CVYnZT7p`]"mbTTmc4aplThIVLC;(DnOLr(3RfPp)m3`(nDW$C=2H*%)\ihUZ`[%ST=VCh?f%H!m%o^YfQm^;S7'1F]KC-JCha:o_n+`[?K27NZIVDc6PIbdC>E$^^Gi=m+-p5>VB8<M.EtpT:Q9;56?LHj%$BORBXV(rn^X0G(2/kF7[O\nFKaFjfF6.)cN3t[I8c9\SC5A_8`8@!#A]E&Q^LNH`N7/C*lZ31jI[TuCo0@W-h)@36^2c.0"6h&&%2cJ@i=ZaM\Pp,KhXrYM>f%n^k&RhlSnG2MAZ`^t3<OJ2*.3*MO$a]_CjN!1,8N8rG,'P#:TT/+\6sNJ^4BV)rnuj^,Y(5S5XS(Um%M9jQe$GVRb]#9rdab3F^$!G#AG=M0uC=0O]doTR/eg<p$9<\5t2O?G@@Q`&0d):4*,Y_L*IRIr$A`&gf')BgfEpIe0eN*So5Aomg%D8^Ga7a+Wq^?&)qgV@rZbr.o-A#5#R;eok1gW2h55^g;LJN/r@:%6[(ROB,-S:t$&#1?mP8"n5uqY2o"mt$ip_.$H6`o5uHD?D_M%-[it,YDnbkU/2.Nld6%kJq9!SHZFmfI!1:sg\9gd3n<,8=u;+?XKkpiGi-*3\lrBDcu3=43^%7sP'@h(#5-:^brNa2@Go+mVa(0m%nb#?,Ei.;5[[k^gl4Y*6j6McG6_HY]NIK:t:]5#+nb;ZLC0t#NH:!#aLI7:%j(Ve;N:bjRrUFT"DjrT>)?"Q&AQItJk*ib:VuJsX%AR9_r4RL`*6CP,BONT"M*sa=8qERRr:9Bn/jXnb+h2=r>CZ3oNkM<(O$l,3t[JgXS6\VC6XhTM.:n]>6BhIb36\VD!BM':#L'gWu%o[5I(W6c7,CD,A[L'gWujgXT80iVfn_/%j]A#R`g;LV80FuT!/4[Q]M(r1"t73?D3..#j%)3N/]SDG>bh?Un;PYd<KFUW0'T)H*F%_+GbnBq96[D2;$hiZ3%$2:;C`.Vp\rrto=1Ms4uHZ&%WS*m>idX4>I'Pp/b0R#0hPU,\1FDSRX2VZMEH1m#ocB*`f_h7+LERT'LS%bTotoaBUp"S;L]q9`'WFI!MU0Q$UYsIc?TBf?;p&]:OcmQ<fVEZ=Cm-SI3BXb-"L#7#':U;-)0Z$fq>"C4Y@=?%E`F>n^T%mquHT%?N0s'qp73$qc'&P?T66IL[3!GQ^aIsS,_qol1+';roW1ACU._bIXc?c4`Ha*Xracb\sW#ukIu-'K(Q2iOh0""'quDd>l#2<hQHO#%RD)f"AK9$0!DGCDL@)D5mdZ.M0=?7R;Q%,'Dp6JoYs89^n[KcXU:>,_]nY^WV;=c3d`otPqsrtEf!c&jZ'F;)>qS@*+Ut2mIa+G%%R<="./=_3upAN7HfeIfc)J:Lm4E`1R\E;DfE<DCZoet/[4S@CD1qmGK9/N!LV-p$ECj9h-d#IJ@]q3R+UK@-7pgLUXI,;U**nrk^%lQ1?>,nY+d*2H-D)HF6BUA7A(cH99@!-TG%QYYS(-,KS-L(,=QQ!h#[le#sEi(&mPOS\;#%G:L1YbI>tB,m)K2Q@fGLW1("cm)NH%/OqZa9&Ek6!a%AobU"HX$R6)SLQ`hP)9bd8C-Ptq/P\f#/<VcWr+%C,5Fd^^>+\?7YkpW_Sr\?Acih9JO[B3!HX9ttdi=pVHJbdh%F\(d0,2SM\2Woo$s1Qkl?VGpUB+MW=EHa$Lqb4O`G#t&s7nAiV=^Z&5^`m0/A1Jd2^I)5;]/'KM2+ATKpX/"E2`i4Q1U6hpT%Mo7%KqpaHeKgF4_8fd?EMqts09#GYBuQAb/uAh"Im4>_Y"UE/s"lsHGbKgc`Gt)i(`eB+65nh#@a\^lH]eS:\]*dR7rE<k,M3BVeWm\]%RtIR1lfi:U9ufb9/:&i_4f%_+"MQt`<TnRQiP\[0d*_0"B:NOc;QVP^-PY9A*Z=,%f(q*!ots`Qjmpoi$.gc_X31m(L%':d-]LT\%(!.N(4XGJl"96RPm>jCpmGsIZbZ@u6N1g-HZE\8g(ot;\ZE\8g=R3.5)r$[;ksL?]&"=@[eDlF(2WZ8Y@8WPML!8cQrpk2B<6)_V%Pk/__gM#S/><KE;;U.(BXnULqhi8U7n'<o]I_#@"5!I[:na_+;2B'5Ue&V3fQg_/p:$<Scl>Ar_E@'@i^&CA;O9"IX1nbO0BMDU@%(?/OY)mk@g(OTWS&6Xt,%H-l_JmCL".+iC_./(uHQ-no.h19'prGB&#\7VG^JT[DL,,lB'P;(@TaN^OV[Y>FH>FFNRrYRZ"NkZqO%XQ15I3+-f!/>p&!6VcTVl?F8s*,j!MQ#h1eFF(aC*M%5uBKM5L.@MgDLs.d,qU9L+9RN]'c]"@gWAeh)ZX'r%K5qT3H44gfD=K$[%9jI=lNj_+U/\,:dhqAT8UW=m2at$M,)Pgit:?48%1P>T$P,DCJ,l;3!g?,f1beDTc4Tq+"nJJ<#E[X46@r5r[1@FENI2)89p+X*`%e=[9ei[m1i))Jck.)lomK#FSE<`I0Sa3B+5P"4<u^K&C\@\f7ga""WsoDaRq\K$YCr5U9Ip8($.m\!1TF-uu&-)Y'+Vq?KqOor`q%.?@L"Kk/A[;O%kg2S"3+HEC$%7F)/Oo4[b'OW!+N*GR&,q8k.9S^7Jb"RodN/LtgU)uuOMbO.HLRO3f],ANYdkMs6ACYq]<ri3WF%2nQf`(.<I5dUf%j6-ZU^\W^->*f,_a(?*?*aRS5Lk.#?M`H*Oql`AQY`rEWYG^_`(%1[\3MXbrKqOcCb3un-M(?"G\.s6>aDA;BQ%G,,AXrngE:'<T]oBq?n@>jJPc>(8b&p2AgETC@GZ[W(j8n&*_qs5(E<bV&_+63#!?Ib8486'p]Eo\]e^F]f[CGIu)XY-!I_s4P?g%bM1J&X1,j)%i6o!gGK;adIu/MqGPpUQb7Z7msaO?U<sfjoJZY)%0+coNUX#]FNr9a8,lM7YDp3D?TU,4NI[]%9+N!6a$0Y(:RBP<%h=]g+d<1EZ^<f*ZCN`PK%*S#FSU0M0G1V/e$L<`@QncPMlDEkM?)D&[?,I+/J5m+Icg86C,p9hf&01/kQD":%[71-DnE^:n*sJP1%UtuEp0P#^uTbY=[Rk=\Q4g5rS'@cErUZ'Y*rQt#=Xh#TX>p6UnLMiGQ+1Tg2oR'Y[]Xi#[^CeDllW-RJ23"hXR6f3]qK:\n4Ys'K%a7ng3c_bEe?C,@Fp!>M30&NZJN^q!k]t.Y*"L.3`AU+U?W^\*q#Yj\,Vf(-.!,ar=4XUF&I0[++6*B=r7n2=@Z&Z7u[lkXh(XO'<%-BEl[6VecJ0arS71igbs]0+fGd.@W0c2"g*jb@n:UlS7!W`qdQd7:?,_fIA88Y<_jAT>E!M)RGQ#$83>234'I+RCs+MtVoAjM'c1%1d5[$FNcdhMH2(>%aq+Hqr8>.K_0EZ9J[+C7MpA),V\L?$p/>LYj/*(3(Y2n[D8rWJ`/=3$luN%TWpQo9uiqbG"eqe^qe/J!RO=n%0S_kjT[9Y7-=MYn(j3lnQX^$SLh@Rg.0]h74l8_)L@8%k(7*!a]6q@gLdK"cBS/F.2`dBPJS5`SBt*M]a8n!-0[Ke0iOk5j9L,tg%Q><0A=3usCaL$&>8U/>r*J8%O6IWh[69C"4Leu"Z4\sffg@rqq2(48RZ`nthT\P&o-36YqoLTIbod:#.HU].(^-ej`7Oo#NkSml"%.0b&%D6i3B2!-5J:8j6ch',OR+bU&cB@)q_1fU]5(dQOtN5@M.a>/Q,M3h$`oJ`n-7>O66U]HX4N^7"-ZEZJWh$f*J!"eu-3o[Em%D@f*f$K5Y:6LT)*dU5=BQs`>*0n>A-[K@Xq!]#T_RP*I%6h#Fh>K[=X@&[_L5m#sb%?80OhB@!FD/$u\Hif[X_[(,IM7/@7.&d"a%OO>J]2?LlO56,UJU302blLIY9?XbE<J=&_)hV]\&O$9iOq'^2ei[hH^`6Pnr)^NQ#'0*_F+Jr&jBjqEX6:Aa]*#G\'!\f8'R03gE%@O5-id&*Y#!Q;3)`rl_q+KPkAA4M"kg05TUqB:?aJK0m.ot<W[JQ>_88"SrQOLjU#DoC_<kW8fQpM<X>&J4n,;^GK/dlpr1_HLE;%8_?hOEY4+<L_2TQ%r:+"=1*`T;AY&t+!*'&Dm$^$^Kb%D7A.a@B$!1W)C\CtkZ[ae)^j^cs/`ACLF++keAc4#8\1"4+[;*bZQd\m%`c?1)5."UAT>V$j%dZj9V[/<ni6*B4(9TjRksC<!-<t<eZA5<h:`DD/NTPH01l0fh+nu.VC#D5lJQ8)G)'gob,g#H-nqUuoRnY"N%md7g-?H',[puEnO"L<tU!9M'OFj<Th%$TicZInd/#,5bo/XF<H(P>6]qhE:bR=SpaK5Htgk&#8neYmha7NXEZROX;YeZ&mcRRCs5%esfhL"42K*Tk1KWO!biuLb"pc`N)7;MEW3&+En:a"YcGP6=VBG)AlKV$6s]6+R.ee3e2mKCOlp_TFh%@jgF['+HZu`8[X9PB%K">%1l^7f5CCn@L`5<G9[f!*5V9',!$6+,Kg#aK/GPN1d=;Lm3["F#;*^&q0!s95m?Q&6;@Q<Xd,!+>_FB_a,&'ajJsHQj\?R&.(\VRa%][J\??o)>D#^mTsoDi=pY)$G"cr"6]X<5sOK[>XniBtes)&@Ig#RXI\K[-ZL2-J;:,!grsh<?R1-9/I@2&Bet6i=ajeRo4YkSj_f%3i%K*L<W@bj@qk$o^Q2EE<O*38aZ_IUV?so_JpG;S3$p?7enZdVSPAq-)&>/M9!QO`WWbEqHV)K0#lrhcj,EUD:1^(Cf:V0'GqWZ%(dUJ^Lj=IO6=6mbXCSu-[+M/kqAR2+KQZ\33s""98Lk;7d;`Uq5,+#F]J0"RBGli]8cg,oE7@AZJmAEY8j3!GO2M=Hap@<\0oq"'%1gn6ImneYTpsBH-Pg.kFJf#[34p%Vl4RF/PS;u/)8a]DjoL_LIp`8RWUj>lWL)$QdA7!AJ#q0aq]N`T,6O7a;Spc5jZ4QTaG#_&8%@kieD`pMK[M&?M`:C&)#"7\5cB^oKO$F%;hZiOC8\SQ,u-8ZM_"RJ\k\-X:dZ,++`Qj[-P<k=E\Y.j.YJJ!X<2(O8HB-\r8hbPXL%mQQq*d&7[&.gWkaSjSg@g0:@kWj`$o"]9BB^5HCC.'Q1,`UY7J59#3q$W9qr0L#tg>,El,>XdIZhRPZM9[%J+7Of6,Zk%bpTPO)/%^^LKH&.f,:D)!REj["(;6Eu^tVLpFLm=:"eSKP=sn]9>X]b;_$M'oK`VuX+I?n*T#19bJ1G"<9\&5\WR?"gXp;ABXJ#Bi^,o.<iI%Ct9OnKk<K9OGo,Eif(5NA75U;$eQ-P0ESj_g&V8+!\\!_YR#JI$FoKN80\*u!rF*%13j,#:FPY[W,*<u0`X=,GX;N?5Z]l#+l%V-%(I2,V)hs:sjp;>UojBd-*1'b/XC'tV#tmN6J^#a*jJgC0LQ:c?!-E(ASP#bUnd[cHBK/m#,=!g%nPo^M`O#mI,%(UAU67]mV&e2h%!hmqf[=HA'A7dkL4DcF',apcr6"&FR@'O]=n!&9Y#ngnA@_R*5bMkl$N'O6V;4$!VP75gR"MG`ir&`+)i8'!7$AsZ&nF5C5&sd$9%j\=VGNuhDRCU'mROoZPQXiHTn!&PYB=?RM3ZjMg,,_.Db79d1;YHTP#ook,)37^cB%9%Q40L?V:Tr+d8?<Zh1@)t7pFprnVbDi`g%@3HBnk->@b!m/i7H*U)q[Q3Q88>+3G-^dUC]%%PqA-T3j7^`%1WsOXJ/Xh0>'e]KM&;0tdaU$4[K@N%hBXq'=AD3>S<LD"2+>?,f%'kW?Q>eamLQ8g36/(u.@'dbq0G]0%-/o3h2(s7qL,.!)R)'7g5X:&6K]m6&!9G0DWi$gP81*Y_:<T0`8r?XBV2-i0F;7`t9;nB2E%65-U]R;0"i&;ZiI=hn:_$.Egt/6Aijnf2G^3XFf#B*WnT=:s\u6>e\^KItVE64rd_#[?X:$kb]_![MN"$rPe:?GgFiYo,/K(/6,[%ln\3Mm2]luNif_K8mifNgXnjPC6%utgfB01[?:NS(7]o>(2U6&#.fg],;^/[AP5tqJ7L9HR+aX?[!c0-Jn)8UU'5$u_GJ^5+U3$)%"OK5L?/7f=@(c2nj+u8=HE[U0oO&+RH>n[g&)BVcN`_IA#Y0AZMD4Do&2TBC?3niIN6`ae)Akr:%lf)kV%8sLT;JIj7fZg*:102*%9\P-Z#J)*QS[kno<eQ*u*r:Vo#Y4h@.W,59Fu9Q>"*8GJoNR&glABN^8JGSR-AjM%P=uHl`Pp-TQDKeDadZdOhXXbtL_\kOOsn0R%/5h-'85WGiKG-nN#Y2+$&It&/38pAFmb1f4f[2NK$i?d1;+;'ChFM\(;6!:ZV_ftl-eC4K(#dS9(L$769G+`"G[j]hkFQ(dMc.C4%7O5G#Mu,/\a$bQuN'W)Y_J#)8[VSBj5^pTs['mp9A$MICqAa1QaLV_+%]'f/\g41)MnX8*r=b6'Dl71"_HULUI>:f13T_$jAWe78%K!Jp'!^`%T$k7&Xn/^N#(kr;&#sHIh=JOjn(k?IV]#nNf%Ho-BUW$Y;Hk]*S'6Eb=n92`6_LOjKbR@bp1r_/kNd+\@kHaGFCQ'D2%%d_V`dr1AQEA\1kLN)#=*Q)PaTuCMn<F[=[b9E-,FBOK@VcXEa+:L&^3AF;ne1<"!O7*o7a^HA)UBUEDP4\i86`<?#0d,<\HkjJR%3O.nuijc4Z_R1pa7]p>34VmE]M[<D*%/):1NBu3$"*#^`P67Ecj93>_eoMN0KU*3"O0\.,jri0tNc)d[J6]hKCQL(7c1"t.Ik)Y\%*8Wls'<@>EKG>HSd6][H?&@o/"*0.YL.N:aA37T,clb"Ir!7W`//%lhX[7ciI'[V:2Z%P`I2o^-bbquuli^`]+`FbC)ZR.ZML7i1%-/Snb+Wd*l)$\_[[gT<^>NVq4FcVan=0*tU=p<k"9O9NZ&uf`13GUT?T]LM[KZlhkE>3s^bYc*,&<:<7kMXXglSBUp^?I%3*s(jC%N&s*lhP%)W#Fn6i4TNDBVuZIP9:X;uolj@`5%u;DW/+.LJndsd-Fu+.MSrI&2mR/`R[`CM$\L%$]]1CT2UXE&i\@$7`W1D)JS+9a%KSh?Ud:=>9b#Je1C\U3\*ThI+ha%Jq'i>4@C'T:P)sfWq*E2DfiHWbq_$l&5J-?F:MNfqj5m$^^!^fm=Dl2It@XM:RQD>ZjNZ-!*%kWU+=YSGhO%X\YU5[8sSXr%>ajH-GNB!nH..#)ZNP-\Q,&3]Lj==QTBhl55dZucnsYn5gc6cn,'*",>8a;k:'NZ^l3+p$pnh:(9@%9EgWV(ke4c+[h4%;_Vn<=A@j%"egO8@$;XpVQeu:X1W6pHF0.-f!.MDO?8RX.ZUQ>`Y.1[f7bG$?33JeL4k&Np!b.dPY-E4(2]?V%Gs"bYUTg=m<m\:UK@#f=!O*mQ1&Q\^+ik]V,qlaI9l4?T2Nh=<.@,?#34:JKT8]tKHER^YpR99!%r7]PG?sgOL5*=#^1dn&F`:l\%rq!a0>^,#T?lsttMd)\,Y7M(j![-e$3IF'l9*&k[&J6ef,gK-EnCW@gBI:8YT(8.f.L/+X'UPR7520]Q1,rR_Js$.5h3JHjpsT\h%('&_WKL$*@a,(Z:E^LBcZ>rX+N<EXob_hRMH4CAj9?3\jKu%T8-TK!VGu)j#H[Lq$"c"^['O#J)&1EX=$mRf2I;I<O>R(9^kSP(.%**@&OBnh9QTu6[Glm,VMQu)>ViZR1dc533nBPgJh^`b&lR;>S:Xsp%m03$=W_\3$Jo3>^RKN8YREZ>j&XQ)+PF'3^1Hkcnn/5Cd?%:r%NMZkM.;XC,.L7oh%4e!=$?/)\eY.LcTN%B#-sQ%J70!q:K_F'r-+3*Kc]^'SX68^hfb"#nk,M?&TP9(i@GE3'^N><$W<F?BSD%L*H\i7"dZ=!^qCO[94"DaH?uUd:,^,JLj$BI9$M26GR"U:VI,\9gp7#-GSSDZAB>29WS7Vm!,!e2'3W@HLAk_9[P6)KV`aAJghr7%OAj<Z&><27;XRfd;jnGA+QRVR5n1_?o-?^bWN7!d#<Nd&mBJXoL%a/>P%R5d0/Q&`'okWbdKo$(&2G,`N&C7\+UHa0Fb>H]pu4<>%9c5I<7RgV*;H^*0&U<l/MQ7<oZGec?GR!I&9p8Q^+);8bY6L2CkAl_rJ2C35=?Jq`RmHOm$:&c/oT=ZSY+ki=i&Le!2S`U^()\fV%7#396"edBUH_,.I4P+_09A#PTbUd:-0k^#NR1_5N8\XgCeEjg4fl8<[_\mZ+=<:,IQkGObkt;;LX;^&^6LglMRU2'UG[$$SK@DuQ%`l+tr')D#[Qob:-Nqt0r>a60F#`b=E/\KMRI$GGAnk1QmKdmYajj?=bADAMh$tVn;L6A:*;GqA"&^a9/(=0<\8N-.)<l7\B:dfjb%SruNi@f*mH9'X(>FbbtZ+:tmY5dXiVd,[\t_E_.YcHff$bEq*'GOO!7P)Bfm!E]oE#maS(iMf41-P4agn484qlgjZb(4&S&fl.oL%C:O>,i(FJt`Gf1cBeYu=0rV]@aGGjSB'N%k#'^f-@n2B0FBXM\@@2TfW\j'-jc"nE@T/iu7-oK@+>RoTe)a??;Bj/O)_+:>3@)6%%$sWL4i/:):IMK;83<;:-`%oI*!i'0)7M)231kOXI`"X1aIuCZtOZE]bT<"])Q=@rg8&bgF1!N*K(_@o)P6PZ_,6?\ClsuOR*Q/^?%6SOR&cAXG&UeZ<Z1DUL7[,1AAO!HaJ0cihE9hAmYNFGLR61FGS9nOkr]@12KW!Nkug(kf[TX(JD`t7h8%EFCHTK\8Ifn^@KZ>sQU%9ZC.iB_cg.@ojhO"(!C4e10#'o49O_W1%nhobGZ#Z/1fY-tcUrFC;*#@g#r9V-ltr>;c+Iq6j9/M[9iEcg^QJJ<l36]2W6)#^c-&%Mn4J?ReXnPX?B@)ilNg;.5EF*+<%@N0X=JjW"O;gQuXYp'!Gjk`g&)42`-b%"#cs0^hu_q8STFl;L\_@iAsPTJ0BI_IAaBD*UtU7%`&(Fd@3@-N6V`k.q97ihkGA:uV(&_#&amak%$)Q!'K0^!&E1JX7LtZuSeu[5='HSt!_.P_%5Xf55VQ?(f"`.)LgZ=@D_%7mC9gfE%#P9o1N0#QsPkO%@`X+7?BkJcN6iaaT5u^;[*e9q0\Pos3E]HYl5[Z"dZ"XQ#@0_O+-M@FY;irTVZ;poKni8J*Ga0k;KBs4Mb-1:\%GS8MB=a>\,O&I]"+7k3POoaSlS]2)k!U**(!4*ip[aG]p)/>'e%An-&(e.FX%8VBi+h$?!D$<6;^(mRi."fPP'p^"PhDcun$=Q7j%1DX,JXhNhC'S^To5=&Plcm9\5@^[EAQR(4``Z8.VoR1m+,_YMMC%KfT6A*6n+Y/cF1jKOS\gOqNNR?Mhbk+:l,F(,o8"Ig?AAR@3%j=nC6"%hT5-0teR*iH!RD_/1R7%0P]J1;Ab;#//1'=/O>#\9Er-m7kC#)!ZgV:LC=Aj?i11c7@V'Gs60/Z%/l;CFgnbEVHh2KMQ&%m3mC=+nuOB@DbjTV6\(5EWGbDhG`g?6s9<7D*p--1U&/PYI"C5jYS+`kUH\e$74@.q<+n.C8]=EZ3Wcd>+EbbJ$p'Wn8s(ZAi[@C%PoG!RA4-tPAh4Ts(_FXZ6<S5e,qeb4'"a.q]fUsO[]<A#f9Lp8'U7&,W'SB8`q=1A:"^&BJ77SqQ*UNNdJL9cO#93uQ=)4'H-;<=%[.kS"k\2;gFX.pJ/@Sl\Fh5"h&(+4P#ZX<=jV9^H2FfVj(b0[SjU*gHg8iqo:kHRcekimt/Ce$V[?^ltkVJPc')W4LWu`14E%^EN%_2)?49,]08b%4,Z`gQq'e.h#b$71ZIK0h8Nfp0l-M,\UGm;/d@[_sgi?P12?ZnP:X$?$0U8(TI19dr_6PdQm/@+5E*b=jlMCrPXI%(c/]>b5UH%0He)BfEjqXLR3J5WdB;[+c[dl:SarE$=^1nqB-itSDL^YWJME^6`-^>nUVE''3a$LA%D)X@?!NPG/AjW9Bb2/$$]Q3%[H@hTW3m=,h,Lp.Cmj";5Wn!]Zos/J7_gur/n/s-3UACoD$,'q^6NefcS._N'[H>LTsi<G%L?2Y9BjJ.l)lGGTHpC"kh;Wt(G<;[%`Sa-0UrmZGN\u54:nO/Y&sfme2K,"NI-cd]L$'nu8O4&''PSH"AT5b\1_^3eEcI-7[M6`kO_Z+JAK5r+fJ5BmSE6u#6KMB9WLI9D%iHXEh0LT$)25"!,ff(1/j,,oN0Y@[t4br^R&>=5:$(4&XqOWe)bE4r(CVZ?oS1LN#0BDM0O;E=WX8HJNEWj6*<fNT:=KGCsJV]2\%94P/^nT'A[-:i7r"Pab?4\LA]42W&hrfGQ?"C;/A@i1DJ"QD+j(\ih;LL'):6N4b4q?K^LM97?jmW?cTShjB0TSuU`QPXq3OpeEX%1*YF;)'pI0><HJPP@F)KN&UO[O$#):XY>/\B<L0M@<W,)/^-stJ4L\;+<H_#Upr)$XFf$e;[No+Tp_uFR$&"2<OBtQ9r7KeHtF`I%?rl?!;(_k_.9WD2.3('.;p#8SpecM\?XnAtd0N#(:ih.4lMr(8U0QdJ4Ng`b'ZeS%7]]I%<D21pie13piKJ^UL*J'=_f@"W)1f4o%+SP'V8K'*]7g&mDFYa"[ka+iO7P69-Na540o.;\S;)ntma"t@=5%LMWB`L-H6Dh:!'Y%%DI?t"Th1+348mO$d:\kQ#k[+,JnSur7%\4AFY!*jD1bq]>OeoVIH@Z)%]1R?K$,V3t5X`#X"8NS^4h(cu=a]dWFbQ'=jj:/ZBde2;^jmkg7K]ta$QbZU-!C%.UN;sUQ6nL=@%XpBP46i6Vj(j*e@:1m-^K/uMm(BA'Q!'lH1:S-X>ENM&EiMn^Ee2/D'J,sZj>m#$uT6)\.P63^ISFl1m*DJif(kURF!1j7*!mc8V%!)8W!'*)8I\H$.a;@lAq(XEl`joD8)Zkk8%VpN>T+sM_+D#+:3d`D>OEd%NAH7E:43!2h%8E;!3+q!K6E&%X+!+J$o<5p`p5j&-p%[#jHE)b2AZ"PHBi[)\\U0-L6F!o;CiVFdpNN;ZW:L+)Q5!0mXP%?Mr'r0M\D4O$FANL.N?[?>H=[1$%ccHBpC,JFsbcN_B!J9#.-%>@_[R15L2,ge\#<ff.Sd"jhI#J[Q2Qmn"Gj>m_iL#;?TtlQ^l^&snL]^i)>tWIg*T\,nkJJR-DhXf)!TR:WEPC)NT`nI'p[!cGpj%]Q,9GJ,tr9(tfcLapWb[Ko;G*"mJ$!2/3pfreBAX*A%Ub,N0dIakj>E90Na9Gec*j9]BoIk+ejq*"K;5h*>r_QNn`V(ggjA6n<I-%I)Y)`3.7?#%od6";^I;b(EE$*4r.;8OTKu-ckHJA,0`IpG^_&i&ctI;)!;XL*/[!cNO"2%='t'Qi>;XRApH]n8DD:p2QSn8b4<O!%"g#*-Y08Qg,qL18'llPA+r+!Y_5WOgN1IhlO(efLE)69TKR&8.;P>.->[meS=sT^?^d`,OMI.;EH#d"P!4FM`E*bHJn_bZUX:`[N%+I!!<q'M?c*4:+"CuCMN,d-1\`0i:ZphIcr<RR^E&HKiX/HLNU7STReQ)epCjKo$-)@Z*doQ[U6,"YP4$rkcYU0<Wr%p,G5a6YK'%.Ek?`gn>is%#RNp:-blfH]RsC&"f2BO1g[I!h<3i&=;_b!'_5!38'aU$V)P04'F[Pg^qP`AhPC['$2s2cI%4?%X8B=+u\0KUHRUU%?4a%d&(KFN7RdTeYHWR(2NSEjl&-!qW;2snY(Lj.'CeK-:_M6IBG?#Zl5_RbM/$deqsDHDY/N+Q/l]\1(_\nGS(Ks"s$/Y@gjrQn%1-MLF#Ub@O!lJR`JmD"L(SOYV%%C9#?nW!jg^,P)&_F19AH5_L2@#NR)?a7q)Sc`V6oP/N*#>jT*A_f)>76akUB#5"ij4c.\@;XX%O"Fk-PdK7tV,"E)TJN8QLL(NHJY0_O$052"bp[&m?0"?t&&==8oAlZC#r.rl_?uK[fE.>4)h@=nON*,59XtWAHc[%)0k9R8%g=%I%LMO5V,u/mP1.\kW^u_@"::/(."*JD\!6fJn-XJj!NJnNp'H\K[E!ZcXJ]$s/n3gafS9Y\@ieG9+PkQ5tM!P8gR]F!7glPKdFl=`=%i/:6\b6Xp1%/eDhHJ9o`)$$$^W-AE5-#ZoF%%!#7T.GN<X0V+1!O3;/)s#toBF6:>7Z`]+=:p(N_D+VH?nFhXVuXU=AZ(6tH"d]d%L'9dAS5G*Y!%Y:B+lZ$0Xt(84JY]Nu<gl#?A3]!pYaJ]^]Cobm3@.Kciq,&Y*eu,:fHXR["ZCY9/ur%#o+f_*kCk1b^mtq+AP8mY%@hfeWg(I+ZG\>-qOBieZDK6.,8BZr%>N#p>Et/Ak=c%n<Ltj`cjE)#&-kr@rWZJ/XSM25q2W?uWVCCsn4=*A%EueWknMg4VAB]h;%E$P!-A3:snJPfinckJT2(D]LPTjD^5(o)d/^s(Dl)6pDu`%`MWN*4&4!l8Fup(eL2dLj"g`KA'7+<Et@N^sf,R%6bj8-HhX<RCpL%$^:o>7*@nqIn'o=!r0tkT](_GA6E5l6C_l1=q?Q5&?RC?<?,nl44fO9*egYg*;np0L>](!(,>l]mg=SDcQUUd2u4pVATZp!!k%PY%CVE^G+E<K3"n%>tT1,pF0u;H1&^H9Gj*!Bf#YBQ8(n#s6C[r`&EjUK'jE%OC/`\;PK+RI<$#;`G_?gZ0U\RSEc7H4f0rn:T(6W?Z%Z.NJNU>X(C,8)$&\qH#!kU6iN5(]P?I.[u!K*)VY%4_QEKr-V-W#o51/>3F6@jn9G6\,`&T,!gQR2&7DTUatmMC9MmZibKe7QL^5%PN($k@R)?-L3s]g1k>a5,AIDQP9%hD:FpT^R?/=\TLt[5iA+VgV&;u6N#ZOcZ3lsV"H<S1^oIOJ-$8<]j7!:<?.EIk9eZ?C/N\Fj%*ZAl)g@kc=UYWg)i+5j!M_Xc7;:5A!mG"q9^1mh[/UU6#Usm.a$O.[RZk\KbJXA96.r8L\:0/4[U<3k-1B_RW<3/:@1HogX,"i;F%E6_<i-j51?6HF.\M"+)k1,9^*0*>Qorsr!Ifm.!VrrF4dA$EIA.2W1BQ1?'sN=bN,>A[Lc!+rgD7#2@*6jeadm2@ZC!+66?gl]oj%$/#D4G.fCr&;BIGi2f^,/+`T'2lYrt1,De"ioN#8dg^p;\ch%+Haa(<jWso-]hm/5+;u(5N3F07a@DqkUf'_r.V&]-;\:$L.lq.1%EFCYhKI_5=j)S%6W"*p.MTo_3/YjJm*XnK(&t:2Sb_X<<BhPdu-Ro,ep#5G$=X5IMK7MifMZ]?^ZB%]l3<K:BC,iF+%KeUn;4Yg6%5>WM#0%U5ae/$@DN=6:&iBAaR*N1i2^q#Cg4B*X2PZRYGmkkYKV`d"B/C$Zkls,YKE3$7G`"4'aKX<<#7Om:C.W'1>BB&buLhlOc%H7Y!C;BVsN!l1%qpQ1YkB5pH<U,baNYNLRJiWc:0Eq;Ua`$!BjMgX1j%7IAA7olSFnN?W'[t+RRI)P.l!3R]GbcW-#Zt"kr/F6T,%+27nCA7?EI!aDbj+SJ:[0us`-[^]Iii.bMl_:a%RUPWf-9+q#p1ke18O37%u1F@Y4R3;Z#[0n0O$N%W]#2A\s"Xa9lScPV5k"9`&%8<p;FNkYZA9JMWf;9K5INp4kpN>R(r=[jN,m-$M8\Ya%n0Pp4u)PY:LUg/#8R[d(`=9F^8%$3#n,LnRuJ`i1NW1Xt@b0p*QKa8g/%lq@i0435)j_cZO2!"jdB4@ADkm<YQ3'@XoFA$W3D`_<Y3Cug"f8Hk\/N_(%PC_k(X"*RrW[NM#qKQ/n2V/-FB9A=&1'WF_&*/KrB%1U7mKS5.G?WJ6+F6M>;#5]Zob^Ok!6gQ\:L+=GfrWaWs+?mGFrKnDl+B-4W0UEucBi<jaBL1[dm#j/IW$q2CC,GaFRo@\jL)@LnP%3ge<o!HLkldU[S]$nKoC/<3g?qc)jJ`Q9@-Qb7rQ59pj[JK"WG_*/W!.2g'$Ju1&(UHHm7Y)To@Sm42b#4-<+CBM2*@_EPtB>p:`%R!R($#E]JJ*&d8^,ml9J3$9\[Z*k:e(Af`GG_Anp)abXN^rluDG'Pm+Ch_R3N6+#5Up7-IKQ8+V[k7.d-0eNQ;BK[SdJ4,SZ5'=.%'OD\FI--CI9N5++N8B[AQAn.)/:c!`6]#O)'_c,>:cb4<Y<X<LeTVqQQOMoa@Al&d'dfKXMa[mr)B_G?n52%H#\#']a0U_0_huS?%MibR`02s3`j0]"4$llYUK!$^VH1?VS\AO:JD]8J3Lri7?(EQefob]o@=tt?=J.(@tfR4MqmQ`0Igm+Nt<+.&&:rK[O'8)[ZJZhp$%E"-e9<u)Cs@MrgTYTmG;QPtYbIE*I58d,9Hh3aiK`7"bV_ruJW.JLiU+#$Fj$CO@Hk""de28\G-P>d/NCCrt[MRq9/To8Lei[d?*%n2poj,%T`cn5ZZCEpRaj4Tjaa=#NlTjfqTIM@orQ:HU.l:R'GRDD42Z6SD9YY'e)d5QH?S>$Rm>g@78;N,2)<U.i`%+qScf8/":;%50R:<N.Ah+(=!8B;A6!6/.E:2e9;f:W6BW4&;,[BQ_lD95*IJ).04INaGaClD(G[gh^A:>#ba_<`L79ooVX7gJEu/W(2P%][.c=7%'ijAE70)hNB*Y#u(CgEQSHs2R+*!.Prf6acj&S8K&?Ci@Q:n$iFBG2\P*$?T"5@quB0`IK=.mnu]`_%2M<uSE"Ed?DY%T*G'Zssf%JNCD,Skfn<0TsX_HUh*_DFL[3dSCu*2AqD+g178k+J)@1;KIk%M,u"257&8o.6TXQ@UN#9mht-;&j(+GcJE"Aa5)t!nr=k7c>J/>%!*,h\.D-D@63n"C&rVU;s(k('`;//(.q(/Orc0D6N=6GbUkZOu/iJ([ad:XTI'SDWGmg^H!tZk-NXu@XEMU/]Zk*F^?3HnDL3H`t%EOLkJH'K:ZEPf7GBpdi]?mDlsM0f6TdE5ln3N:+u$8qGpGiAb^/Fpm^PQ6+$j2a_&LflLBi^n@pjp7RSKJ==@B&!t7QQTVMW[=XZ%(njJ*2'qsPE1GW^bJ7+qLadRr["9lIHs`$XGq!aY-F+YV^4Fghl]qF6VX+STENq+ZaM*OoK/tYE3nT(k3;HNrSq)YBNStZ71F#Rb%1PQ\'L2rqSADWeRXM?4hLG%(YfVo/W#BI*`?O*h`MueJh]K&'@ERGWC1qO@\,7.K*EhX_<9t?M@1!QI`\iC"O'EZ*B@YoZO63O2Z%!0c&jMY!_s>E!Q@Bu>ss::)Kn`YTksV4/#e?Oc)EJ]NMK*4;6h3t_m>`7`6o&!ml4-8>S4QGpk$QuSG'"p2\0p&Rq&+KN^#_h3$?%!9,u,-<H;A$J/&p8:5(Pi@q0]grZf>YV?_G?n2Hfm>64$(Hdlk#P2?ZaC/Mm=%`kQJ<+Mt^Q"f6N)`V^(9-,ujckA<;R2N#"V#^M%m"o[p><&VK)]-FZYmiiV'nl7D5[go-E#d>`2Ht`7Qf;&uXu@Z5L2"HdB27QM_/\$N1gOH:bEfZ-km:!lLElBZb_RS8OWna@+\'Af%$#`e9MIQA-(<P`YUaFdS]Pprn.b\KSpOqmcibaGkMpT1_lt#,o_BuK%?&\oK\!UdcGSe(+KPK%"$+h;h"m&<8jFtq*Lce'3!8\;`%E%h?=ipPc[&[Gk/Qs3EI(bo<a;61DI<GFteps:tX.,d1-OM[7bI:VRD*6lG-1&A1tS=0Q\Jm#arE'6VifcYH^-L]S:!o\1j!>@0a%r*;n<&4Bnj!C/=Y)%iOc@PF*/A;4RuIU"\Egr#GI3Y^+K6A(fq?qW#)&jD<pnK\n2^8bcWfdWnFL@@Aj$C^SUjJ3E-2H\-7-t[U8%_bhf@Lij%<=\^aSQh>/0U[Wq$Z=a0CSdc@Y2tV`)pb+P(".F/Q[`&[hBpA?#@M:oU-uEO:Wla7gpq3B*(f&]Q`!kf\`gK>JMM?qt%B612.[PKlnb7ZWDEIe4XQ#\C`4cXP@-%Zc_s0g&^9AVDb<!tO!WO%jXq6`@EqF'n)e4+Cd\I=bnhNI_P5I(LTQmpW!D[)`dGS\sA%"2X/5)l=m9iT.X?J/iQuLmsLl4=.pT41laDJGWWR`?;BP3@58l)2Ti2"%&]7c2=&(gO0huQKo]jPfMu\gmr6TH!9R@=!7Q-(!2Vd%6X(GF]G=mOXuMC@i-Hu.qiJ#%X+ukO^ltj8=\sr6HfBWd!/MI8A7QY#*f.]%WFI`Hn]u7)'5l(q+:jD4M\joCYp;!62[1DMIgVEc%`rNR-!!(d3+u34"Oq,SVk4EI!a=HVl'8',2js,?kCC*N`k>jncH(\\`iXZtod5KmY5f1;;^i,a<A]ck)KHo^:ArO14UoJFB+Ci,/%_,T;kVbRCF?]9tRq'JL,.G2$=HPIp#j60`+12S1-rWB*9Lm>ee-UC=X-^FlVfVXE=!7FkU$jOdCU34KEi'aG-*!$P1f+uoT=-7$%%&fdkBj:WtL:eO^E9LR&)#S^RL9oQ2o@ZeT(\N=\`PE6r?&?4a:4CQ6=->/a8Af04$oNh'Ji6iZRA5QkGCS8aSJeR-17l.2_fK`n5%]0(>.2C(2=MSmS.E5F"`c2^*0]o,t6[5C5/08Vqkm`o)FU^fABP20q'*oW^c-6a:)MKj[Oib7l?TO7bEDkN=K*\j$1!598?>pnl`%O[b+/>(I],#m%i!3klhNV:nf!a;.5P!$<L!W3@hV-PRcOM9TTi3[d8YcPE-u-iql:EIqs:OQ!!LZSBOa6TslTA9$\KOr4=/ZgMX$%=O?&3NKeWD:hL)TDFU-,AaqoR[`ee>Qr1h'2MC/u"tNJ1<,a,3"2L(NH*]Pp&Z*9?L6R'1#r&Au+/`UOL)+09<,JpQ6/VaF+S-*/%]!2Ei'=Hbqf.73AbJ?dZ#i)'WZG9l$E=Y;W=;)Q@)Mj<-"e['QaAZLI*uZMqM#,,Xn1Y5L4?F1iB=YkZ:4B[_YXArF(PePBI`iEh%`'tbXL]]55;QTY8%/It@.Gh"IiFc*[V`:c570t:#S$R$Eh,rRCP^'u)L6<k$SkK>2pF=;6ioPAa2]VYQPFFrio+EjpQ38L/DO6D$%+#-1o-"9e?Pr6Q..0,7Z,VoZ:p9='b3\l.Z>`67O5S]=O7KC7G++[l!*=p8:;>M!%TF13Z-bo0\?"-j6,7?kq1do`tL^S5+,#m(-%iJBhfTjhajKVW&a&i2(AD%IG(!lPa?K1"Xn`9m?,IKjbl7&upU`*s@gPhp=OhCo#TVQW3>c]TpqKX:3UB>`-22h]j9`ZJlCeHEa_%H[ZGmWt*eDCobo3qj-#N4kS<)Nc%WRi[>NAQ7Pk.XfBk7H+(iu&-k63aASJ6WM\i--Yqd:`2.")=B#b]?s=XkT?*Eg@R]_>X:WkQ%Go+P;=\51t+.DDO2TpqL3,h\l"!ga#O$b`MmM7gJSNuBr8lXe+'LU7S3)PMC.J/k<Ah0>>jA2&>KL6.CoSPWBLElgm,:+K>AGWSS%S>g$ZnDO(ZPc9=KnWCeY8iZ*4r-TtmM9eA=jV_VZ-%Iu,+U1A4X14EC;^q,`a]+-&'4iZ4_i6F:i[H1A9(B:KGVRdg;OL.iDJk],%KXZAL'rYKi\jr/\n_POZ9(DVS9Vlu`UK"',"d2h24uL`P+<IF1n^3VlCSOdm@Xtmt0hA,j`N;P-8m,\_%uGFj\$%)-nMH>i)^Qs7%^^"aGM+RcP[l?rYZK/HE+APl;^f%h,%2g]DV^'0;8ppDH+FKT,_/=3\Fd/iCgLI3F=%Q?maC$?h4H.om<b.pm,sH3F,`TrF@SCa;%BShq<!+:jQPc_k(`su$=kX^tLPcY(=-%6e.<l22DJu4G*47F@Q@@XBO_4!uS(,^g7\.YFH8lieYYRldS*q!9T21I]*]Q1q@&k%M"%qD%U$>U9AP6q4^ZN1?TDV()Kifnq7ZM9dr"PgpDN!"O^6,cOCp^IV[l*DoQ[[:)q4&g,-YVt.J;jJlB4iBO$Y>uIXo)4\;gW3P,]%O=Q]b+0PF6jRMbDJ,erUn!errMnaHp0=B]@(]Ws$lf-m^na5?'k)"QOqYbI+qY'])e+NS#nUCP4:SQJ<qj2M-CB$Ku6RPq~>%AI9_PrivateDataEnd